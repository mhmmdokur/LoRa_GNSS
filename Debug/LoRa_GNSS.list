
LoRa_GNSS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003588  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08003694  08003694  00004694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038c0  080038c0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080038c0  080038c0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038c0  080038c0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c0  080038c0  000048c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038c4  080038c4  000048c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080038c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030d4  2000000c  080038d4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200030e0  080038d4  000050e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dce  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e84  00000000  00000000  0000ee03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  00010c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005cb  00000000  00000000  00011430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017066  00000000  00000000  000119fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a91d  00000000  00000000  00028a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081cef  00000000  00000000  0003337e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b506d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd0  00000000  00000000  000b50b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000b6d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800367c 	.word	0x0800367c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800367c 	.word	0x0800367c

0800014c <loraGnssMain>:
#include "protokol.h"

Global_t Glo_st = {0};

void loraGnssMain()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
//		UartDmaInit(&huart1, &hdma_usart1_rx, &Glo_st.usartDma1_st);
//		UartDmaInit(&huart2, &hdma_usart2_rx, &Glo_st.usartDma2_st);
		UartDmaInit(&huart3, &hdma_usart3_rx, &Glo_st.usartDma3_st);
 8000150:	4a22      	ldr	r2, [pc, #136]	@ (80001dc <loraGnssMain+0x90>)
 8000152:	4923      	ldr	r1, [pc, #140]	@ (80001e0 <loraGnssMain+0x94>)
 8000154:	4823      	ldr	r0, [pc, #140]	@ (80001e4 <loraGnssMain+0x98>)
 8000156:	f000 fa5d 	bl	8000614 <UartDmaInit>

		Glo_st.lora_st.adres_u8 = 0x01;
 800015a:	4b23      	ldr	r3, [pc, #140]	@ (80001e8 <loraGnssMain+0x9c>)
 800015c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000160:	2201      	movs	r2, #1
 8000162:	f883 293d 	strb.w	r2, [r3, #2365]	@ 0x93d
		Glo_st.lora_st.kanal_u8 = 0x04;
 8000166:	4b20      	ldr	r3, [pc, #128]	@ (80001e8 <loraGnssMain+0x9c>)
 8000168:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800016c:	2204      	movs	r2, #4
 800016e:	f883 293e 	strb.w	r2, [r3, #2366]	@ 0x93e

	while(1)
	{
		if(1 == Glo_st._100HzFlag_u8)
 8000172:	4b1d      	ldr	r3, [pc, #116]	@ (80001e8 <loraGnssMain+0x9c>)
 8000174:	7a9b      	ldrb	r3, [r3, #10]
 8000176:	2b01      	cmp	r3, #1
 8000178:	d1fb      	bne.n	8000172 <loraGnssMain+0x26>
		{
//			Lora_veri_gonderme_cevrimi(&Glo_st.usartDma3_st, &Glo_st.veri_pkt_st, &Glo_st.lora_st);
			Lora_veri_alma_cevrimi(&Glo_st.usartDma3_st, &Glo_st.veri_pkt_st);
 800017a:	491c      	ldr	r1, [pc, #112]	@ (80001ec <loraGnssMain+0xa0>)
 800017c:	4817      	ldr	r0, [pc, #92]	@ (80001dc <loraGnssMain+0x90>)
 800017e:	f000 f91b 	bl	80003b8 <Lora_veri_alma_cevrimi>

			if(Glo_st.lora_st.paket_hazir_u8)
 8000182:	4b19      	ldr	r3, [pc, #100]	@ (80001e8 <loraGnssMain+0x9c>)
 8000184:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000188:	f893 3a30 	ldrb.w	r3, [r3, #2608]	@ 0xa30
 800018c:	2b00      	cmp	r3, #0
 800018e:	d020      	beq.n	80001d2 <loraGnssMain+0x86>
			{
				if(Glo_st.usartDma3_st.txCallBackFlag_u8)
 8000190:	4b15      	ldr	r3, [pc, #84]	@ (80001e8 <loraGnssMain+0x9c>)
 8000192:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000196:	f893 343a 	ldrb.w	r3, [r3, #1082]	@ 0x43a
 800019a:	2b00      	cmp	r3, #0
 800019c:	d019      	beq.n	80001d2 <loraGnssMain+0x86>
				{
					HAL_UART_Transmit_DMA(Glo_st.usartDma3_st.pUart, Glo_st.lora_st.data, Glo_st.lora_st.veri_boyutu_u8);
 800019e:	4b12      	ldr	r3, [pc, #72]	@ (80001e8 <loraGnssMain+0x9c>)
 80001a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80001a4:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
 80001a8:	4a0f      	ldr	r2, [pc, #60]	@ (80001e8 <loraGnssMain+0x9c>)
 80001aa:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80001ae:	f892 2a2f 	ldrb.w	r2, [r2, #2607]	@ 0xa2f
 80001b2:	490f      	ldr	r1, [pc, #60]	@ (80001f0 <loraGnssMain+0xa4>)
 80001b4:	4618      	mov	r0, r3
 80001b6:	f002 fa5f 	bl	8002678 <HAL_UART_Transmit_DMA>
					Glo_st.lora_st.paket_hazir_u8 = 0;
 80001ba:	4b0b      	ldr	r3, [pc, #44]	@ (80001e8 <loraGnssMain+0x9c>)
 80001bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80001c0:	2200      	movs	r2, #0
 80001c2:	f883 2a30 	strb.w	r2, [r3, #2608]	@ 0xa30
					Glo_st.usartDma3_st.txCallBackFlag_u8 = 0;
 80001c6:	4b08      	ldr	r3, [pc, #32]	@ (80001e8 <loraGnssMain+0x9c>)
 80001c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80001cc:	2200      	movs	r2, #0
 80001ce:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a
				}
			}

			Glo_st._100HzFlag_u8 = 0;
 80001d2:	4b05      	ldr	r3, [pc, #20]	@ (80001e8 <loraGnssMain+0x9c>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	729a      	strb	r2, [r3, #10]
		if(1 == Glo_st._100HzFlag_u8)
 80001d8:	e7cb      	b.n	8000172 <loraGnssMain+0x26>
 80001da:	bf00      	nop
 80001dc:	20001854 	.word	0x20001854
 80001e0:	20003054 	.word	0x20003054
 80001e4:	20002efc 	.word	0x20002efc
 80001e8:	20000028 	.word	0x20000028
 80001ec:	20002464 	.word	0x20002464
 80001f0:	20002967 	.word	0x20002967

080001f4 <veri_paket_coz>:
	}
}


void veri_paket_coz(Dma_t *pDma_st, veri_paketi_t *veri_pkt )
{
 80001f4:	b590      	push	{r4, r7, lr}
 80001f6:	b085      	sub	sp, #20
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]
	static uint8_t durum_u8  = BASLANGIC_BAYT_1;
	static uint16_t indeks_u16 = 0;
	uint8_t tVeri_u8 = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	73fb      	strb	r3, [r7, #15]
	static uint8_t gelenCrcMsb_u8  = 0;
	static uint8_t gelenCrcLsb_u8  = 0;

	while(pDma_st->okunanVeriSayisi_u16 > 0)
 8000202:	e09c      	b.n	800033e <veri_paket_coz+0x14a>
	{
		tVeri_u8 = RingBufferdanVeriOku(pDma_st);
 8000204:	6878      	ldr	r0, [r7, #4]
 8000206:	f000 fa2e 	bl	8000666 <RingBufferdanVeriOku>
 800020a:	4603      	mov	r3, r0
 800020c:	73fb      	strb	r3, [r7, #15]
		switch( durum_u8 )
 800020e:	4b51      	ldr	r3, [pc, #324]	@ (8000354 <veri_paket_coz+0x160>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	2b05      	cmp	r3, #5
 8000214:	f200 8093 	bhi.w	800033e <veri_paket_coz+0x14a>
 8000218:	a201      	add	r2, pc, #4	@ (adr r2, 8000220 <veri_paket_coz+0x2c>)
 800021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021e:	bf00      	nop
 8000220:	08000239 	.word	0x08000239
 8000224:	08000247 	.word	0x08000247
 8000228:	0800025d 	.word	0x0800025d
 800022c:	0800027b 	.word	0x0800027b
 8000230:	080002a7 	.word	0x080002a7
 8000234:	080002b5 	.word	0x080002b5
		{
			case BASLANGIC_BAYT_1:
			{
				if( tVeri_u8 ==  0x4D )
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	2b4d      	cmp	r3, #77	@ 0x4d
 800023c:	d17c      	bne.n	8000338 <veri_paket_coz+0x144>
				{
					durum_u8 =  BASLANGIC_BAYT_2;
 800023e:	4b45      	ldr	r3, [pc, #276]	@ (8000354 <veri_paket_coz+0x160>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
				}

				break;
 8000244:	e078      	b.n	8000338 <veri_paket_coz+0x144>
			}
			case BASLANGIC_BAYT_2:
			{
				if( tVeri_u8 ==  0x26 )
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	2b26      	cmp	r3, #38	@ 0x26
 800024a:	d103      	bne.n	8000254 <veri_paket_coz+0x60>
				{
					durum_u8 =  UZUNLUK;
 800024c:	4b41      	ldr	r3, [pc, #260]	@ (8000354 <veri_paket_coz+0x160>)
 800024e:	2202      	movs	r2, #2
 8000250:	701a      	strb	r2, [r3, #0]
				else //makina sifirlanir
				{
					durum_u8  = BASLANGIC_BAYT_1;
				}

				break;
 8000252:	e074      	b.n	800033e <veri_paket_coz+0x14a>
					durum_u8  = BASLANGIC_BAYT_1;
 8000254:	4b3f      	ldr	r3, [pc, #252]	@ (8000354 <veri_paket_coz+0x160>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
				break;
 800025a:	e070      	b.n	800033e <veri_paket_coz+0x14a>
			}
			case UZUNLUK:
			{
				veri_pkt->veri_boyutu_u8  = tVeri_u8;
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	7bfa      	ldrb	r2, [r7, #15]
 8000260:	705a      	strb	r2, [r3, #1]

				if( veri_pkt->veri_boyutu_u8 > 0 )
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	785b      	ldrb	r3, [r3, #1]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <veri_paket_coz+0x7e>
				{
					durum_u8 =  DATA_AL;
 800026a:	4b3a      	ldr	r3, [pc, #232]	@ (8000354 <veri_paket_coz+0x160>)
 800026c:	2203      	movs	r2, #3
 800026e:	701a      	strb	r2, [r3, #0]
				}
				else //makina sifirlanir
				{
					durum_u8  = BASLANGIC_BAYT_1;
				}
				break;
 8000270:	e065      	b.n	800033e <veri_paket_coz+0x14a>
					durum_u8  = BASLANGIC_BAYT_1;
 8000272:	4b38      	ldr	r3, [pc, #224]	@ (8000354 <veri_paket_coz+0x160>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
				break;
 8000278:	e061      	b.n	800033e <veri_paket_coz+0x14a>
			}
			case DATA_AL:
			{
				veri_pkt->data[indeks_u16++] = tVeri_u8;
 800027a:	4b37      	ldr	r3, [pc, #220]	@ (8000358 <veri_paket_coz+0x164>)
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	1c5a      	adds	r2, r3, #1
 8000280:	b291      	uxth	r1, r2
 8000282:	4a35      	ldr	r2, [pc, #212]	@ (8000358 <veri_paket_coz+0x164>)
 8000284:	8011      	strh	r1, [r2, #0]
 8000286:	461a      	mov	r2, r3
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	4413      	add	r3, r2
 800028c:	7bfa      	ldrb	r2, [r7, #15]
 800028e:	709a      	strb	r2, [r3, #2]

				if( indeks_u16 == veri_pkt->veri_boyutu_u8 )
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	785b      	ldrb	r3, [r3, #1]
 8000294:	461a      	mov	r2, r3
 8000296:	4b30      	ldr	r3, [pc, #192]	@ (8000358 <veri_paket_coz+0x164>)
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	429a      	cmp	r2, r3
 800029c:	d14e      	bne.n	800033c <veri_paket_coz+0x148>
				{
					durum_u8 =  CRC_MSB;
 800029e:	4b2d      	ldr	r3, [pc, #180]	@ (8000354 <veri_paket_coz+0x160>)
 80002a0:	2204      	movs	r2, #4
 80002a2:	701a      	strb	r2, [r3, #0]
				}

				break;
 80002a4:	e04a      	b.n	800033c <veri_paket_coz+0x148>
			}
			case CRC_MSB:
			{
				gelenCrcMsb_u8 = tVeri_u8;
 80002a6:	4a2d      	ldr	r2, [pc, #180]	@ (800035c <veri_paket_coz+0x168>)
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	7013      	strb	r3, [r2, #0]

				durum_u8  =  CRC_LSB;
 80002ac:	4b29      	ldr	r3, [pc, #164]	@ (8000354 <veri_paket_coz+0x160>)
 80002ae:	2205      	movs	r2, #5
 80002b0:	701a      	strb	r2, [r3, #0]
				break;
 80002b2:	e044      	b.n	800033e <veri_paket_coz+0x14a>
			}
			case CRC_LSB:
			{

				gelenCrcLsb_u8 = tVeri_u8;
 80002b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000360 <veri_paket_coz+0x16c>)
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	7013      	strb	r3, [r2, #0]

				veri_pkt->crc_u16 = (gelenCrcMsb_u8 << 8) | (gelenCrcLsb_u8);
 80002ba:	4b28      	ldr	r3, [pc, #160]	@ (800035c <veri_paket_coz+0x168>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	021b      	lsls	r3, r3, #8
 80002c0:	b21a      	sxth	r2, r3
 80002c2:	4b27      	ldr	r3, [pc, #156]	@ (8000360 <veri_paket_coz+0x16c>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	b21b      	sxth	r3, r3
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b21b      	sxth	r3, r3
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

				if(veri_pkt->crc_u16 == crc16_ccitt(veri_pkt->data, indeks_u16))
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	f8b3 40f8 	ldrh.w	r4, [r3, #248]	@ 0xf8
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	4a1e      	ldr	r2, [pc, #120]	@ (8000358 <veri_paket_coz+0x164>)
 80002e0:	8812      	ldrh	r2, [r2, #0]
 80002e2:	4611      	mov	r1, r2
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f83d 	bl	8000364 <crc16_ccitt>
 80002ea:	4603      	mov	r3, r0
 80002ec:	429c      	cmp	r4, r3
 80002ee:	d10f      	bne.n	8000310 <veri_paket_coz+0x11c>
				{
					parse_rtcm_v3_message(veri_pkt->data, indeks_u16);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	3302      	adds	r3, #2
 80002f4:	4a18      	ldr	r2, [pc, #96]	@ (8000358 <veri_paket_coz+0x164>)
 80002f6:	8812      	ldrh	r2, [r2, #0]
 80002f8:	4611      	mov	r1, r2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f8a0 	bl	8000440 <parse_rtcm_v3_message>
					veri_pkt->yakalanan_paket_u32++;
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000306:	1c5a      	adds	r2, r3, #1
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800030e:	e006      	b.n	800031e <veri_paket_coz+0x12a>
				}
				else
				{
					veri_pkt->hatali_paket_u32++;
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
				}
				//makina sifirlanir
				durum_u8  =  BASLANGIC_BAYT_1;
 800031e:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <veri_paket_coz+0x160>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
				indeks_u16 = 0;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <veri_paket_coz+0x164>)
 8000326:	2200      	movs	r2, #0
 8000328:	801a      	strh	r2, [r3, #0]
				gelenCrcLsb_u8 = 0;
 800032a:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <veri_paket_coz+0x16c>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
				gelenCrcMsb_u8 = 0;
 8000330:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <veri_paket_coz+0x168>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]

				break;
 8000336:	e002      	b.n	800033e <veri_paket_coz+0x14a>
				break;
 8000338:	bf00      	nop
 800033a:	e000      	b.n	800033e <veri_paket_coz+0x14a>
				break;
 800033c:	bf00      	nop
	while(pDma_st->okunanVeriSayisi_u16 > 0)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	@ 0xc0c
 8000344:	2b00      	cmp	r3, #0
 8000346:	f47f af5d 	bne.w	8000204 <veri_paket_coz+0x10>
			}
		}
	}
}
 800034a:	bf00      	nop
 800034c:	bf00      	nop
 800034e:	3714      	adds	r7, #20
 8000350:	46bd      	mov	sp, r7
 8000352:	bd90      	pop	{r4, r7, pc}
 8000354:	20002a5c 	.word	0x20002a5c
 8000358:	20002a5e 	.word	0x20002a5e
 800035c:	20002a60 	.word	0x20002a60
 8000360:	20002a61 	.word	0x20002a61

08000364 <crc16_ccitt>:


uint16_t crc16_ccitt(const uint8_t* buffer, size_t size)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	81fb      	strh	r3, [r7, #14]
    while (size-- > 0)
 8000372:	e013      	b.n	800039c <crc16_ccitt+0x38>
    {
    	crc = (crc << 8) ^ ccitt_hash[((crc >> 8) ^ *(buffer++)) & 0x00FF];
 8000374:	89fb      	ldrh	r3, [r7, #14]
 8000376:	021b      	lsls	r3, r3, #8
 8000378:	b21a      	sxth	r2, r3
 800037a:	89fb      	ldrh	r3, [r7, #14]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	b29b      	uxth	r3, r3
 8000380:	4618      	mov	r0, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	1c59      	adds	r1, r3, #1
 8000386:	6079      	str	r1, [r7, #4]
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	4043      	eors	r3, r0
 800038c:	b2db      	uxtb	r3, r3
 800038e:	4909      	ldr	r1, [pc, #36]	@ (80003b4 <crc16_ccitt+0x50>)
 8000390:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000394:	b21b      	sxth	r3, r3
 8000396:	4053      	eors	r3, r2
 8000398:	b21b      	sxth	r3, r3
 800039a:	81fb      	strh	r3, [r7, #14]
    while (size-- > 0)
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	1e5a      	subs	r2, r3, #1
 80003a0:	603a      	str	r2, [r7, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d1e6      	bne.n	8000374 <crc16_ccitt+0x10>
    }
    return crc;
 80003a6:	89fb      	ldrh	r3, [r7, #14]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3714      	adds	r7, #20
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	08003694 	.word	0x08003694

080003b8 <Lora_veri_alma_cevrimi>:
}



void Lora_veri_alma_cevrimi(Dma_t *pDma_st, veri_paketi_t *pVeri_pkt)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	veri_paket_coz(pDma_st, pVeri_pkt);
 80003c2:	6839      	ldr	r1, [r7, #0]
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ff15 	bl	80001f4 <veri_paket_coz>

}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <compute_crc24q>:
#include <string.h>


// Function to compute the CRC-24Q (used in RTCM v3)
uint32_t compute_crc24q(const uint8_t *buffer, int length)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
    int i;

    while (length--) {
 80003e2:	e01d      	b.n	8000420 <compute_crc24q+0x4c>
        crc ^= (*buffer++) << 16;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	607a      	str	r2, [r7, #4]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	041b      	lsls	r3, r3, #16
 80003ee:	461a      	mov	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4053      	eors	r3, r2
 80003f4:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < 8; i++) {
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	e00e      	b.n	800041a <compute_crc24q+0x46>
            crc <<= 1;
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
            if (crc & 0x1000000) {
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d003      	beq.n	8000414 <compute_crc24q+0x40>
                crc ^= 0x1864CFB;
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <compute_crc24q+0x68>)
 8000410:	4053      	eors	r3, r2
 8000412:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < 8; i++) {
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	3301      	adds	r3, #1
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	2b07      	cmp	r3, #7
 800041e:	dded      	ble.n	80003fc <compute_crc24q+0x28>
    while (length--) {
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	1e5a      	subs	r2, r3, #1
 8000424:	603a      	str	r2, [r7, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d1dc      	bne.n	80003e4 <compute_crc24q+0x10>
            }
        }
    }
    return crc & 0xFFFFFF;
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
 8000430:	4618      	mov	r0, r3
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	01864cfb 	.word	0x01864cfb

08000440 <parse_rtcm_v3_message>:


// RTCM v3 Message Parser State Machine
void parse_rtcm_v3_message(uint8_t *data, int data_length) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
    static uint16_t length = 0;
    static uint16_t index = 0;
    static uint8_t message[1024];
    static uint32_t crc = 0;

    for (int i = 0; i < data_length; i++) {
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
 800044e:	e0c8      	b.n	80005e2 <parse_rtcm_v3_message+0x1a2>
        uint8_t byte = data[i];
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	74fb      	strb	r3, [r7, #19]

        switch (state) {
 800045a:	4b67      	ldr	r3, [pc, #412]	@ (80005f8 <parse_rtcm_v3_message+0x1b8>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b03      	cmp	r3, #3
 8000460:	f200 80bc 	bhi.w	80005dc <parse_rtcm_v3_message+0x19c>
 8000464:	a201      	add	r2, pc, #4	@ (adr r2, 800046c <parse_rtcm_v3_message+0x2c>)
 8000466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046a:	bf00      	nop
 800046c:	0800047d 	.word	0x0800047d
 8000470:	080004b3 	.word	0x080004b3
 8000474:	08000509 	.word	0x08000509
 8000478:	08000535 	.word	0x08000535
            case STATE_PREAMBLE:
            {
                if (byte == 0xD3) {
 800047c:	7cfb      	ldrb	r3, [r7, #19]
 800047e:	2bd3      	cmp	r3, #211	@ 0xd3
 8000480:	f040 80a5 	bne.w	80005ce <parse_rtcm_v3_message+0x18e>
                    state = STATE_LENGTH;
 8000484:	4b5c      	ldr	r3, [pc, #368]	@ (80005f8 <parse_rtcm_v3_message+0x1b8>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
                    length = 0;
 800048a:	4b5c      	ldr	r3, [pc, #368]	@ (80005fc <parse_rtcm_v3_message+0x1bc>)
 800048c:	2200      	movs	r2, #0
 800048e:	801a      	strh	r2, [r3, #0]
                    index = 0;
 8000490:	4b5b      	ldr	r3, [pc, #364]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 8000492:	2200      	movs	r2, #0
 8000494:	801a      	strh	r2, [r3, #0]
                    crc = 0;
 8000496:	4b5b      	ldr	r3, [pc, #364]	@ (8000604 <parse_rtcm_v3_message+0x1c4>)
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
                    message[index++] = byte;
 800049c:	4b58      	ldr	r3, [pc, #352]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	1c5a      	adds	r2, r3, #1
 80004a2:	b291      	uxth	r1, r2
 80004a4:	4a56      	ldr	r2, [pc, #344]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 80004a6:	8011      	strh	r1, [r2, #0]
 80004a8:	4619      	mov	r1, r3
 80004aa:	4a57      	ldr	r2, [pc, #348]	@ (8000608 <parse_rtcm_v3_message+0x1c8>)
 80004ac:	7cfb      	ldrb	r3, [r7, #19]
 80004ae:	5453      	strb	r3, [r2, r1]
                }
                break;
 80004b0:	e08d      	b.n	80005ce <parse_rtcm_v3_message+0x18e>
            }

            case STATE_LENGTH:
            {
                if (index == 1) {
 80004b2:	4b53      	ldr	r3, [pc, #332]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d108      	bne.n	80004cc <parse_rtcm_v3_message+0x8c>
                    length = (byte & 0x03) << 8; // İlk byte'ı uzunluğun yüksek 8 bitine yerleştir
 80004ba:	7cfb      	ldrb	r3, [r7, #19]
 80004bc:	021b      	lsls	r3, r3, #8
 80004be:	b29b      	uxth	r3, r3
 80004c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	4b4d      	ldr	r3, [pc, #308]	@ (80005fc <parse_rtcm_v3_message+0x1bc>)
 80004c8:	801a      	strh	r2, [r3, #0]
 80004ca:	e00b      	b.n	80004e4 <parse_rtcm_v3_message+0xa4>
                } else if (index == 2) {
 80004cc:	4b4c      	ldr	r3, [pc, #304]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d107      	bne.n	80004e4 <parse_rtcm_v3_message+0xa4>
                    length |= byte; // İkinci byte'ı uzunluğun düşük 8 bitine yerleştir
 80004d4:	7cfb      	ldrb	r3, [r7, #19]
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	4b48      	ldr	r3, [pc, #288]	@ (80005fc <parse_rtcm_v3_message+0x1bc>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	4313      	orrs	r3, r2
 80004de:	b29a      	uxth	r2, r3
 80004e0:	4b46      	ldr	r3, [pc, #280]	@ (80005fc <parse_rtcm_v3_message+0x1bc>)
 80004e2:	801a      	strh	r2, [r3, #0]
                }
                message[index++] = byte;
 80004e4:	4b46      	ldr	r3, [pc, #280]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	1c5a      	adds	r2, r3, #1
 80004ea:	b291      	uxth	r1, r2
 80004ec:	4a44      	ldr	r2, [pc, #272]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 80004ee:	8011      	strh	r1, [r2, #0]
 80004f0:	4619      	mov	r1, r3
 80004f2:	4a45      	ldr	r2, [pc, #276]	@ (8000608 <parse_rtcm_v3_message+0x1c8>)
 80004f4:	7cfb      	ldrb	r3, [r7, #19]
 80004f6:	5453      	strb	r3, [r2, r1]
                if (index == 3) {
 80004f8:	4b41      	ldr	r3, [pc, #260]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d168      	bne.n	80005d2 <parse_rtcm_v3_message+0x192>
                    state = STATE_MESSAGE;
 8000500:	4b3d      	ldr	r3, [pc, #244]	@ (80005f8 <parse_rtcm_v3_message+0x1b8>)
 8000502:	2202      	movs	r2, #2
 8000504:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000506:	e064      	b.n	80005d2 <parse_rtcm_v3_message+0x192>
            }

            case STATE_MESSAGE:
            {
                message[index++] = byte;
 8000508:	4b3d      	ldr	r3, [pc, #244]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	1c5a      	adds	r2, r3, #1
 800050e:	b291      	uxth	r1, r2
 8000510:	4a3b      	ldr	r2, [pc, #236]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 8000512:	8011      	strh	r1, [r2, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	4a3c      	ldr	r2, [pc, #240]	@ (8000608 <parse_rtcm_v3_message+0x1c8>)
 8000518:	7cfb      	ldrb	r3, [r7, #19]
 800051a:	5453      	strb	r3, [r2, r1]
                if (index-1 == (3 + length)) {  // 3 bytes header + message length
 800051c:	4b38      	ldr	r3, [pc, #224]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	1e5a      	subs	r2, r3, #1
 8000522:	4b36      	ldr	r3, [pc, #216]	@ (80005fc <parse_rtcm_v3_message+0x1bc>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	3303      	adds	r3, #3
 8000528:	429a      	cmp	r2, r3
 800052a:	d154      	bne.n	80005d6 <parse_rtcm_v3_message+0x196>
                    state = STATE_CRC;
 800052c:	4b32      	ldr	r3, [pc, #200]	@ (80005f8 <parse_rtcm_v3_message+0x1b8>)
 800052e:	2203      	movs	r2, #3
 8000530:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000532:	e050      	b.n	80005d6 <parse_rtcm_v3_message+0x196>
            }

            case STATE_CRC:
            {
                message[index++] = byte;
 8000534:	4b32      	ldr	r3, [pc, #200]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	1c5a      	adds	r2, r3, #1
 800053a:	b291      	uxth	r1, r2
 800053c:	4a30      	ldr	r2, [pc, #192]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 800053e:	8011      	strh	r1, [r2, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	4a31      	ldr	r2, [pc, #196]	@ (8000608 <parse_rtcm_v3_message+0x1c8>)
 8000544:	7cfb      	ldrb	r3, [r7, #19]
 8000546:	5453      	strb	r3, [r2, r1]
                if (index == (3 + length + 3)) {  // 3 bytes header + message length + 3 bytes CRC
 8000548:	4b2d      	ldr	r3, [pc, #180]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b2b      	ldr	r3, [pc, #172]	@ (80005fc <parse_rtcm_v3_message+0x1bc>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	3306      	adds	r3, #6
 8000554:	429a      	cmp	r2, r3
 8000556:	d140      	bne.n	80005da <parse_rtcm_v3_message+0x19a>
                    crc = (message[index-3] << 16) | (message[index-2] << 8) | message[index-1];
 8000558:	4b29      	ldr	r3, [pc, #164]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	3b03      	subs	r3, #3
 800055e:	4a2a      	ldr	r2, [pc, #168]	@ (8000608 <parse_rtcm_v3_message+0x1c8>)
 8000560:	5cd3      	ldrb	r3, [r2, r3]
 8000562:	041a      	lsls	r2, r3, #16
 8000564:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	3b02      	subs	r3, #2
 800056a:	4927      	ldr	r1, [pc, #156]	@ (8000608 <parse_rtcm_v3_message+0x1c8>)
 800056c:	5ccb      	ldrb	r3, [r1, r3]
 800056e:	021b      	lsls	r3, r3, #8
 8000570:	4313      	orrs	r3, r2
 8000572:	4a23      	ldr	r2, [pc, #140]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 8000574:	8812      	ldrh	r2, [r2, #0]
 8000576:	3a01      	subs	r2, #1
 8000578:	4923      	ldr	r1, [pc, #140]	@ (8000608 <parse_rtcm_v3_message+0x1c8>)
 800057a:	5c8a      	ldrb	r2, [r1, r2]
 800057c:	4313      	orrs	r3, r2
 800057e:	461a      	mov	r2, r3
 8000580:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <parse_rtcm_v3_message+0x1c4>)
 8000582:	601a      	str	r2, [r3, #0]
                    uint32_t computed_crc = compute_crc24q(message, 3 + length);
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <parse_rtcm_v3_message+0x1bc>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	3303      	adds	r3, #3
 800058a:	4619      	mov	r1, r3
 800058c:	481e      	ldr	r0, [pc, #120]	@ (8000608 <parse_rtcm_v3_message+0x1c8>)
 800058e:	f7ff ff21 	bl	80003d4 <compute_crc24q>
 8000592:	60f8      	str	r0, [r7, #12]

                    if (crc == computed_crc) {
 8000594:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <parse_rtcm_v3_message+0x1c4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	429a      	cmp	r2, r3
 800059c:	d10d      	bne.n	80005ba <parse_rtcm_v3_message+0x17a>
                        memcpy(Glo_st.rtcm_st.rtcm_buffer, message, index);
 800059e:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <parse_rtcm_v3_message+0x1c0>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4918      	ldr	r1, [pc, #96]	@ (8000608 <parse_rtcm_v3_message+0x1c8>)
 80005a6:	4819      	ldr	r0, [pc, #100]	@ (800060c <parse_rtcm_v3_message+0x1cc>)
 80005a8:	f003 f85a 	bl	8003660 <memcpy>
                        Glo_st.rtcm_st.rtcm_mesaj_geldi_u8 = 1;
 80005ac:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <parse_rtcm_v3_message+0x1d0>)
 80005ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80005b2:	2201      	movs	r2, #1
 80005b4:	f883 253c 	strb.w	r2, [r3, #1340]	@ 0x53c
 80005b8:	e005      	b.n	80005c6 <parse_rtcm_v3_message+0x186>
                    } else {
                        Glo_st.rtcm_st.rtcm_mesaj_geldi_u8 = 0;
 80005ba:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <parse_rtcm_v3_message+0x1d0>)
 80005bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 253c 	strb.w	r2, [r3, #1340]	@ 0x53c
                    }
                    state = STATE_PREAMBLE;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <parse_rtcm_v3_message+0x1b8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
                }
                break;
 80005cc:	e005      	b.n	80005da <parse_rtcm_v3_message+0x19a>
                break;
 80005ce:	bf00      	nop
 80005d0:	e004      	b.n	80005dc <parse_rtcm_v3_message+0x19c>
                break;
 80005d2:	bf00      	nop
 80005d4:	e002      	b.n	80005dc <parse_rtcm_v3_message+0x19c>
                break;
 80005d6:	bf00      	nop
 80005d8:	e000      	b.n	80005dc <parse_rtcm_v3_message+0x19c>
                break;
 80005da:	bf00      	nop
    for (int i = 0; i < data_length; i++) {
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	3301      	adds	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	f6ff af32 	blt.w	8000450 <parse_rtcm_v3_message+0x10>
            }
        }
    }
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20002a62 	.word	0x20002a62
 80005fc:	20002a64 	.word	0x20002a64
 8000600:	20002a66 	.word	0x20002a66
 8000604:	20002a68 	.word	0x20002a68
 8000608:	20002a6c 	.word	0x20002a6c
 800060c:	20002565 	.word	0x20002565
 8000610:	20000028 	.word	0x20000028

08000614 <UartDmaInit>:




void UartDmaInit(UART_HandleTypeDef *pUart, DMA_HandleTypeDef *pDmaUartRx, Dma_t *pDma_st)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
    pDma_st->pUart = pUart;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	601a      	str	r2, [r3, #0]
    pDma_st->pDmaUartRx = pDmaUartRx;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	605a      	str	r2, [r3, #4]

    HAL_UART_Transmit_DMA(pUart, pDma_st->txBuffer_u8a, TX_BUFFER_BOYUT);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3308      	adds	r3, #8
 8000630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000634:	4619      	mov	r1, r3
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f002 f81e 	bl	8002678 <HAL_UART_Transmit_DMA>

    HAL_UARTEx_ReceiveToIdle_DMA(pUart, pDma_st->rxBuffer_u8a, RX_BUFFER_BOYUT);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8000642:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000646:	4619      	mov	r1, r3
 8000648:	68f8      	ldr	r0, [r7, #12]
 800064a:	f002 f885 	bl	8002758 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(pDmaUartRx, DMA_IT_HT);
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f022 0204 	bic.w	r2, r2, #4
 800065c:	601a      	str	r2, [r3, #0]
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <RingBufferdanVeriOku>:


uint8_t RingBufferdanVeriOku(Dma_t *pDma_st)
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
    uint8_t veri = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]

    // Eğer okunan veri sayısı sıfırdan büyükse işlem yap
    if (pDma_st->okunanVeriSayisi_u16 > 0)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	@ 0xc0c
 8000678:	2b00      	cmp	r3, #0
 800067a:	d01b      	beq.n	80006b4 <RingBufferdanVeriOku+0x4e>
    {
        // Ring buffer'dan bir bayt veri oku
        veri = pDma_st->ringBuffer_u8a[pDma_st->eskiPoz_u16];
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 8000682:	461a      	mov	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4413      	add	r3, r2
 8000688:	f893 3808 	ldrb.w	r3, [r3, #2056]	@ 0x808
 800068c:	73fb      	strb	r3, [r7, #15]

        // Eski pozisyonu güncelle ve wrap-around kontrolü yap
        pDma_st->eskiPoz_u16 = (pDma_st->eskiPoz_u16 + 1) % RING_BUFFER_BOYUT;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 8000694:	3301      	adds	r3, #1
 8000696:	b29b      	uxth	r3, r3
 8000698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800069c:	b29a      	uxth	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f8a3 2c0a 	strh.w	r2, [r3, #3082]	@ 0xc0a

        // Okunan veri sayısını bir azalt
        pDma_st->okunanVeriSayisi_u16--;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	@ 0xc0c
 80006aa:	3b01      	subs	r3, #1
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	@ 0xc0c
    }
    return veri;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <RingBufferYaz>:


void RingBufferYaz(Dma_t *pDma_st, uint16_t boyut_u16)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
    uint16_t eskiPozTemp = pDma_st->yeniPoz_u16; // Mevcut pozisyonu geçici bir değişkene kaydet
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 80006d2:	81fb      	strh	r3, [r7, #14]

    if((eskiPozTemp + boyut_u16) > RING_BUFFER_BOYUT)
 80006d4:	89fa      	ldrh	r2, [r7, #14]
 80006d6:	887b      	ldrh	r3, [r7, #2]
 80006d8:	4413      	add	r3, r2
 80006da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006de:	d927      	bls.n	8000730 <RingBufferYaz+0x70>
    {
        uint16_t kalan_u16 = RING_BUFFER_BOYUT - eskiPozTemp;
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80006e6:	81bb      	strh	r3, [r7, #12]
        memcpy((uint8_t *)pDma_st->ringBuffer_u8a + eskiPozTemp, pDma_st->rxBuffer_u8a, kalan_u16);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f603 0208 	addw	r2, r3, #2056	@ 0x808
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	18d0      	adds	r0, r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80006f8:	89ba      	ldrh	r2, [r7, #12]
 80006fa:	4619      	mov	r1, r3
 80006fc:	f002 ffb0 	bl	8003660 <memcpy>

        eskiPozTemp = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	81fb      	strh	r3, [r7, #14]
        memcpy((uint8_t *)pDma_st->ringBuffer_u8a, (uint8_t *)pDma_st->rxBuffer_u8a + kalan_u16, (boyut_u16 - kalan_u16));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f603 0008 	addw	r0, r3, #2056	@ 0x808
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f503 6281 	add.w	r2, r3, #1032	@ 0x408
 8000710:	89bb      	ldrh	r3, [r7, #12]
 8000712:	18d1      	adds	r1, r2, r3
 8000714:	887a      	ldrh	r2, [r7, #2]
 8000716:	89bb      	ldrh	r3, [r7, #12]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	461a      	mov	r2, r3
 800071c:	f002 ffa0 	bl	8003660 <memcpy>
        pDma_st->yeniPoz_u16 = (boyut_u16 - kalan_u16);
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	89bb      	ldrh	r3, [r7, #12]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	b29a      	uxth	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f8a3 2c08 	strh.w	r2, [r3, #3080]	@ 0xc08
 800072e:	e015      	b.n	800075c <RingBufferYaz+0x9c>
    }
    else
    {
        memcpy((uint8_t *)pDma_st->ringBuffer_u8a + eskiPozTemp, pDma_st->rxBuffer_u8a, boyut_u16);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f603 0208 	addw	r2, r3, #2056	@ 0x808
 8000736:	89fb      	ldrh	r3, [r7, #14]
 8000738:	18d0      	adds	r0, r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8000740:	887a      	ldrh	r2, [r7, #2]
 8000742:	4619      	mov	r1, r3
 8000744:	f002 ff8c 	bl	8003660 <memcpy>
        pDma_st->yeniPoz_u16 = (eskiPozTemp + boyut_u16) % RING_BUFFER_BOYUT;
 8000748:	89fa      	ldrh	r2, [r7, #14]
 800074a:	887b      	ldrh	r3, [r7, #2]
 800074c:	4413      	add	r3, r2
 800074e:	b29b      	uxth	r3, r3
 8000750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000754:	b29a      	uxth	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f8a3 2c08 	strh.w	r2, [r3, #3080]	@ 0xc08
    }

    pDma_st->okunanVeriSayisi_u16 += boyut_u16;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8b3 2c0c 	ldrh.w	r2, [r3, #3084]	@ 0xc0c
 8000762:	887b      	ldrh	r3, [r7, #2]
 8000764:	4413      	add	r3, r2
 8000766:	b29a      	uxth	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	@ 0xc0c
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <DmaRxKesme>:


void DmaRxKesme(Dma_t *pDma_st, uint16_t boyut_u16)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	460b      	mov	r3, r1
 8000780:	807b      	strh	r3, [r7, #2]
    // Ring buffer'a veri yaz
    RingBufferYaz(pDma_st, boyut_u16);
 8000782:	887b      	ldrh	r3, [r7, #2]
 8000784:	4619      	mov	r1, r3
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff9a 	bl	80006c0 <RingBufferYaz>


    // UART DMA alımını yeniden başlat
    if (HAL_UARTEx_ReceiveToIdle_DMA(pDma_st->pUart, pDma_st->rxBuffer_u8a, RX_BUFFER_BOYUT) != HAL_OK)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8000796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800079a:	4619      	mov	r1, r3
 800079c:	f001 ffdc 	bl	8002758 <HAL_UARTEx_ReceiveToIdle_DMA>
    {

    }

    // Half Transfer Interrupt'ı devre dışı bırak
    __HAL_DMA_DISABLE_IT(pDma_st->pDmaUartRx, DMA_IT_HT);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f022 0204 	bic.w	r2, r2, #4
 80007b2:	601a      	str	r2, [r3, #0]
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0f      	ldr	r2, [pc, #60]	@ (800080c <HAL_UARTEx_RxEventCallback+0x50>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d104      	bne.n	80007dc <HAL_UARTEx_RxEventCallback+0x20>
	{
		DmaRxKesme(&Glo_st.usartDma1_st, Size);
 80007d2:	887b      	ldrh	r3, [r7, #2]
 80007d4:	4619      	mov	r1, r3
 80007d6:	480e      	ldr	r0, [pc, #56]	@ (8000810 <HAL_UARTEx_RxEventCallback+0x54>)
 80007d8:	f7ff ffcd 	bl	8000776 <DmaRxKesme>
	}
	if (huart->Instance == USART2)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <HAL_UARTEx_RxEventCallback+0x58>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d104      	bne.n	80007f0 <HAL_UARTEx_RxEventCallback+0x34>
	{
		DmaRxKesme(&Glo_st.usartDma2_st, Size);
 80007e6:	887b      	ldrh	r3, [r7, #2]
 80007e8:	4619      	mov	r1, r3
 80007ea:	480b      	ldr	r0, [pc, #44]	@ (8000818 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007ec:	f7ff ffc3 	bl	8000776 <DmaRxKesme>
	}
	if (huart->Instance == USART3)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a09      	ldr	r2, [pc, #36]	@ (800081c <HAL_UARTEx_RxEventCallback+0x60>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d104      	bne.n	8000804 <HAL_UARTEx_RxEventCallback+0x48>
	{
		DmaRxKesme(&Glo_st.usartDma3_st, Size);
 80007fa:	887b      	ldrh	r3, [r7, #2]
 80007fc:	4619      	mov	r1, r3
 80007fe:	4808      	ldr	r0, [pc, #32]	@ (8000820 <HAL_UARTEx_RxEventCallback+0x64>)
 8000800:	f7ff ffb9 	bl	8000776 <DmaRxKesme>
	}
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40013800 	.word	0x40013800
 8000810:	20000034 	.word	0x20000034
 8000814:	40004400 	.word	0x40004400
 8000818:	20000c44 	.word	0x20000c44
 800081c:	40004800 	.word	0x40004800
 8000820:	20001854 	.word	0x20001854

08000824 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <HAL_UART_TxCpltCallback+0x50>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d103      	bne.n	800083e <HAL_UART_TxCpltCallback+0x1a>
	{
		Glo_st.usartDma1_st.txCallBackFlag_u8 = 1;
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <HAL_UART_TxCpltCallback+0x54>)
 8000838:	2201      	movs	r2, #1
 800083a:	f883 2c1a 	strb.w	r2, [r3, #3098]	@ 0xc1a
	}
	if (huart->Instance == USART2)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a0e      	ldr	r2, [pc, #56]	@ (800087c <HAL_UART_TxCpltCallback+0x58>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d105      	bne.n	8000854 <HAL_UART_TxCpltCallback+0x30>
	{
		Glo_st.usartDma2_st.txCallBackFlag_u8 = 1;
 8000848:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <HAL_UART_TxCpltCallback+0x54>)
 800084a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800084e:	2201      	movs	r2, #1
 8000850:	f883 282a 	strb.w	r2, [r3, #2090]	@ 0x82a
	}
	if (huart->Instance == USART3)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a09      	ldr	r2, [pc, #36]	@ (8000880 <HAL_UART_TxCpltCallback+0x5c>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d105      	bne.n	800086a <HAL_UART_TxCpltCallback+0x46>
	{
		Glo_st.usartDma3_st.txCallBackFlag_u8 = 1;
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_UART_TxCpltCallback+0x54>)
 8000860:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000864:	2201      	movs	r2, #1
 8000866:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a
	}

}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	40013800 	.word	0x40013800
 8000878:	20000028 	.word	0x20000028
 800087c:	40004400 	.word	0x40004400
 8000880:	40004800 	.word	0x40004800

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f000 fce8 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088c:	f000 f80e 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f000 f916 	bl	8000ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000894:	f000 f8ce 	bl	8000a34 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000898:	f000 f84e 	bl	8000938 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800089c:	f000 f876 	bl	800098c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80008a0:	f000 f89e 	bl	80009e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  loraGnssMain();
 80008a4:	f7ff fc52 	bl	800014c <loraGnssMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <main+0x24>

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b090      	sub	sp, #64	@ 0x40
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	2228      	movs	r2, #40	@ 0x28
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 fea4 	bl	8003608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80008d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008de:	2301      	movs	r3, #1
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80008ec:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 80008f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fa5e 	bl	8001db8 <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000902:	f000 f959 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2302      	movs	r3, #2
 800090c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2102      	movs	r1, #2
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fccb 	bl	80022bc <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800092c:	f000 f944 	bl	8000bb8 <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3740      	adds	r7, #64	@ 0x40
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800093c:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	@ (8000988 <MX_USART1_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 8000970:	f001 fe32 	bl	80025d8 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800097a:	f000 f91d 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20002e6c 	.word	0x20002e6c
 8000988:	40013800 	.word	0x40013800

0800098c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <MX_USART2_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009c4:	f001 fe08 	bl	80025d8 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ce:	f000 f8f3 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20002eb4 	.word	0x20002eb4
 80009dc:	40004400 	.word	0x40004400

080009e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <MX_USART3_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a18:	f001 fdde 	bl	80025d8 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a22:	f000 f8c9 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20002efc 	.word	0x20002efc
 8000a30:	40004800 	.word	0x40004800

08000a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3a:	4b20      	ldr	r3, [pc, #128]	@ (8000abc <MX_DMA_Init+0x88>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000abc <MX_DMA_Init+0x88>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6153      	str	r3, [r2, #20]
 8000a46:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <MX_DMA_Init+0x88>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	200c      	movs	r0, #12
 8000a58:	f000 fd39 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a5c:	200c      	movs	r0, #12
 8000a5e:	f000 fd52 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	200d      	movs	r0, #13
 8000a68:	f000 fd31 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a6c:	200d      	movs	r0, #13
 8000a6e:	f000 fd4a 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	200e      	movs	r0, #14
 8000a78:	f000 fd29 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000a7c:	200e      	movs	r0, #14
 8000a7e:	f000 fd42 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 fd21 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000a8c:	200f      	movs	r0, #15
 8000a8e:	f000 fd3a 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2010      	movs	r0, #16
 8000a98:	f000 fd19 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000a9c:	2010      	movs	r0, #16
 8000a9e:	f000 fd32 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2011      	movs	r0, #17
 8000aa8:	f000 fd11 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000aac:	2011      	movs	r0, #17
 8000aae:	f000 fd2a 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad4:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a34      	ldr	r2, [pc, #208]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a2e      	ldr	r2, [pc, #184]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000af2:	f043 0320 	orr.w	r3, r3, #32
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0320 	and.w	r3, r3, #32
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a28      	ldr	r2, [pc, #160]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a22      	ldr	r2, [pc, #136]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_GPIO_Init+0xec>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0308 	and.w	r3, r3, #8
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b3a:	481d      	ldr	r0, [pc, #116]	@ (8000bb0 <MX_GPIO_Init+0xf0>)
 8000b3c:	f001 f924 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin_Pin|M0_Pin_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000b46:	481b      	ldr	r0, [pc, #108]	@ (8000bb4 <MX_GPIO_Init+0xf4>)
 8000b48:	f001 f91e 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	4619      	mov	r1, r3
 8000b64:	4812      	ldr	r0, [pc, #72]	@ (8000bb0 <MX_GPIO_Init+0xf0>)
 8000b66:	f000 ff8b 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin_Pin M0_Pin_Pin */
  GPIO_InitStruct.Pin = M1_Pin_Pin|M0_Pin_Pin;
 8000b6a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <MX_GPIO_Init+0xf4>)
 8000b84:	f000 ff7c 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Aux_pin_Pin */
  GPIO_InitStruct.Pin = Aux_pin_Pin;
 8000b88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Aux_pin_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_GPIO_Init+0xf4>)
 8000b9e:	f000 ff6f 	bl	8001a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3720      	adds	r7, #32
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40011000 	.word	0x40011000
 8000bb4:	40010c00 	.word	0x40010c00

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <Error_Handler+0x8>

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <HAL_MspInit+0x5c>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <HAL_MspInit+0x5c>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6193      	str	r3, [r2, #24]
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_MspInit+0x5c>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <HAL_MspInit+0x5c>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c20 <HAL_MspInit+0x5c>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bec:	61d3      	str	r3, [r2, #28]
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <HAL_MspInit+0x5c>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <HAL_MspInit+0x60>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <HAL_MspInit+0x60>)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40010000 	.word	0x40010000

08000c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	@ 0x30
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a8c      	ldr	r2, [pc, #560]	@ (8000e74 <HAL_UART_MspInit+0x24c>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	f040 8088 	bne.w	8000d5a <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a8a      	ldr	r2, [pc, #552]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b88      	ldr	r3, [pc, #544]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c5e:	61fb      	str	r3, [r7, #28]
 8000c60:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b85      	ldr	r3, [pc, #532]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4a84      	ldr	r2, [pc, #528]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6193      	str	r3, [r2, #24]
 8000c6e:	4b82      	ldr	r3, [pc, #520]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0320 	add.w	r3, r7, #32
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	487b      	ldr	r0, [pc, #492]	@ (8000e7c <HAL_UART_MspInit+0x254>)
 8000c90:	f000 fef6 	bl	8001a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4874      	ldr	r0, [pc, #464]	@ (8000e7c <HAL_UART_MspInit+0x254>)
 8000caa:	f000 fee9 	bl	8001a80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000cae:	4b74      	ldr	r3, [pc, #464]	@ (8000e80 <HAL_UART_MspInit+0x258>)
 8000cb0:	4a74      	ldr	r2, [pc, #464]	@ (8000e84 <HAL_UART_MspInit+0x25c>)
 8000cb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cb4:	4b72      	ldr	r3, [pc, #456]	@ (8000e80 <HAL_UART_MspInit+0x258>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cba:	4b71      	ldr	r3, [pc, #452]	@ (8000e80 <HAL_UART_MspInit+0x258>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8000e80 <HAL_UART_MspInit+0x258>)
 8000cc2:	2280      	movs	r2, #128	@ 0x80
 8000cc4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc6:	4b6e      	ldr	r3, [pc, #440]	@ (8000e80 <HAL_UART_MspInit+0x258>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ccc:	4b6c      	ldr	r3, [pc, #432]	@ (8000e80 <HAL_UART_MspInit+0x258>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cd2:	4b6b      	ldr	r3, [pc, #428]	@ (8000e80 <HAL_UART_MspInit+0x258>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000cd8:	4b69      	ldr	r3, [pc, #420]	@ (8000e80 <HAL_UART_MspInit+0x258>)
 8000cda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cde:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ce0:	4867      	ldr	r0, [pc, #412]	@ (8000e80 <HAL_UART_MspInit+0x258>)
 8000ce2:	f000 fc2b 	bl	800153c <HAL_DMA_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000cec:	f7ff ff64 	bl	8000bb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a63      	ldr	r2, [pc, #396]	@ (8000e80 <HAL_UART_MspInit+0x258>)
 8000cf4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cf6:	4a62      	ldr	r2, [pc, #392]	@ (8000e80 <HAL_UART_MspInit+0x258>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000cfc:	4b62      	ldr	r3, [pc, #392]	@ (8000e88 <HAL_UART_MspInit+0x260>)
 8000cfe:	4a63      	ldr	r2, [pc, #396]	@ (8000e8c <HAL_UART_MspInit+0x264>)
 8000d00:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d02:	4b61      	ldr	r3, [pc, #388]	@ (8000e88 <HAL_UART_MspInit+0x260>)
 8000d04:	2210      	movs	r2, #16
 8000d06:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d08:	4b5f      	ldr	r3, [pc, #380]	@ (8000e88 <HAL_UART_MspInit+0x260>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0e:	4b5e      	ldr	r3, [pc, #376]	@ (8000e88 <HAL_UART_MspInit+0x260>)
 8000d10:	2280      	movs	r2, #128	@ 0x80
 8000d12:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d14:	4b5c      	ldr	r3, [pc, #368]	@ (8000e88 <HAL_UART_MspInit+0x260>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8000e88 <HAL_UART_MspInit+0x260>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d20:	4b59      	ldr	r3, [pc, #356]	@ (8000e88 <HAL_UART_MspInit+0x260>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d26:	4b58      	ldr	r3, [pc, #352]	@ (8000e88 <HAL_UART_MspInit+0x260>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d2c:	4856      	ldr	r0, [pc, #344]	@ (8000e88 <HAL_UART_MspInit+0x260>)
 8000d2e:	f000 fc05 	bl	800153c <HAL_DMA_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8000d38:	f7ff ff3e 	bl	8000bb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a52      	ldr	r2, [pc, #328]	@ (8000e88 <HAL_UART_MspInit+0x260>)
 8000d40:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d42:	4a51      	ldr	r2, [pc, #324]	@ (8000e88 <HAL_UART_MspInit+0x260>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2025      	movs	r0, #37	@ 0x25
 8000d4e:	f000 fbbe 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d52:	2025      	movs	r0, #37	@ 0x25
 8000d54:	f000 fbd7 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d58:	e131      	b.n	8000fbe <HAL_UART_MspInit+0x396>
  else if(huart->Instance==USART2)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8000e90 <HAL_UART_MspInit+0x268>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	f040 809f 	bne.w	8000ea4 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	4b44      	ldr	r3, [pc, #272]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a43      	ldr	r2, [pc, #268]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b41      	ldr	r3, [pc, #260]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a3d      	ldr	r2, [pc, #244]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e78 <HAL_UART_MspInit+0x250>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d96:	2304      	movs	r3, #4
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	4619      	mov	r1, r3
 8000da8:	4834      	ldr	r0, [pc, #208]	@ (8000e7c <HAL_UART_MspInit+0x254>)
 8000daa:	f000 fe69 	bl	8001a80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dae:	2308      	movs	r3, #8
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	482e      	ldr	r0, [pc, #184]	@ (8000e7c <HAL_UART_MspInit+0x254>)
 8000dc2:	f000 fe5d 	bl	8001a80 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000dc6:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <HAL_UART_MspInit+0x26c>)
 8000dc8:	4a33      	ldr	r2, [pc, #204]	@ (8000e98 <HAL_UART_MspInit+0x270>)
 8000dca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dcc:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <HAL_UART_MspInit+0x26c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd2:	4b30      	ldr	r3, [pc, #192]	@ (8000e94 <HAL_UART_MspInit+0x26c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e94 <HAL_UART_MspInit+0x26c>)
 8000dda:	2280      	movs	r2, #128	@ 0x80
 8000ddc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dde:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <HAL_UART_MspInit+0x26c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <HAL_UART_MspInit+0x26c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <HAL_UART_MspInit+0x26c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000df0:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <HAL_UART_MspInit+0x26c>)
 8000df2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000df6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000df8:	4826      	ldr	r0, [pc, #152]	@ (8000e94 <HAL_UART_MspInit+0x26c>)
 8000dfa:	f000 fb9f 	bl	800153c <HAL_DMA_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8000e04:	f7ff fed8 	bl	8000bb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a22      	ldr	r2, [pc, #136]	@ (8000e94 <HAL_UART_MspInit+0x26c>)
 8000e0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e0e:	4a21      	ldr	r2, [pc, #132]	@ (8000e94 <HAL_UART_MspInit+0x26c>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000e14:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <HAL_UART_MspInit+0x274>)
 8000e16:	4a22      	ldr	r2, [pc, #136]	@ (8000ea0 <HAL_UART_MspInit+0x278>)
 8000e18:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e1a:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <HAL_UART_MspInit+0x274>)
 8000e1c:	2210      	movs	r2, #16
 8000e1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <HAL_UART_MspInit+0x274>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <HAL_UART_MspInit+0x274>)
 8000e28:	2280      	movs	r2, #128	@ 0x80
 8000e2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e9c <HAL_UART_MspInit+0x274>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <HAL_UART_MspInit+0x274>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e38:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_UART_MspInit+0x274>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <HAL_UART_MspInit+0x274>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e44:	4815      	ldr	r0, [pc, #84]	@ (8000e9c <HAL_UART_MspInit+0x274>)
 8000e46:	f000 fb79 	bl	800153c <HAL_DMA_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8000e50:	f7ff feb2 	bl	8000bb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a11      	ldr	r2, [pc, #68]	@ (8000e9c <HAL_UART_MspInit+0x274>)
 8000e58:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e5a:	4a10      	ldr	r2, [pc, #64]	@ (8000e9c <HAL_UART_MspInit+0x274>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2026      	movs	r0, #38	@ 0x26
 8000e66:	f000 fb32 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e6a:	2026      	movs	r0, #38	@ 0x26
 8000e6c:	f000 fb4b 	bl	8001506 <HAL_NVIC_EnableIRQ>
}
 8000e70:	e0a5      	b.n	8000fbe <HAL_UART_MspInit+0x396>
 8000e72:	bf00      	nop
 8000e74:	40013800 	.word	0x40013800
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	20002f44 	.word	0x20002f44
 8000e84:	40020058 	.word	0x40020058
 8000e88:	20002f88 	.word	0x20002f88
 8000e8c:	40020044 	.word	0x40020044
 8000e90:	40004400 	.word	0x40004400
 8000e94:	20002fcc 	.word	0x20002fcc
 8000e98:	4002006c 	.word	0x4002006c
 8000e9c:	20003010 	.word	0x20003010
 8000ea0:	40020080 	.word	0x40020080
  else if(huart->Instance==USART3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a47      	ldr	r2, [pc, #284]	@ (8000fc8 <HAL_UART_MspInit+0x3a0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	f040 8087 	bne.w	8000fbe <HAL_UART_MspInit+0x396>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb0:	4b46      	ldr	r3, [pc, #280]	@ (8000fcc <HAL_UART_MspInit+0x3a4>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	4a45      	ldr	r2, [pc, #276]	@ (8000fcc <HAL_UART_MspInit+0x3a4>)
 8000eb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eba:	61d3      	str	r3, [r2, #28]
 8000ebc:	4b43      	ldr	r3, [pc, #268]	@ (8000fcc <HAL_UART_MspInit+0x3a4>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b40      	ldr	r3, [pc, #256]	@ (8000fcc <HAL_UART_MspInit+0x3a4>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8000fcc <HAL_UART_MspInit+0x3a4>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b3d      	ldr	r3, [pc, #244]	@ (8000fcc <HAL_UART_MspInit+0x3a4>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ee0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4836      	ldr	r0, [pc, #216]	@ (8000fd0 <HAL_UART_MspInit+0x3a8>)
 8000ef6:	f000 fdc3 	bl	8001a80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000efa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 0320 	add.w	r3, r7, #32
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4830      	ldr	r0, [pc, #192]	@ (8000fd0 <HAL_UART_MspInit+0x3a8>)
 8000f10:	f000 fdb6 	bl	8001a80 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000f14:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <HAL_UART_MspInit+0x3ac>)
 8000f16:	4a30      	ldr	r2, [pc, #192]	@ (8000fd8 <HAL_UART_MspInit+0x3b0>)
 8000f18:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd4 <HAL_UART_MspInit+0x3ac>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f20:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd4 <HAL_UART_MspInit+0x3ac>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f26:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd4 <HAL_UART_MspInit+0x3ac>)
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f2c:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <HAL_UART_MspInit+0x3ac>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f32:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <HAL_UART_MspInit+0x3ac>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000f38:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <HAL_UART_MspInit+0x3ac>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <HAL_UART_MspInit+0x3ac>)
 8000f40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f46:	4823      	ldr	r0, [pc, #140]	@ (8000fd4 <HAL_UART_MspInit+0x3ac>)
 8000f48:	f000 faf8 	bl	800153c <HAL_DMA_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_UART_MspInit+0x32e>
      Error_Handler();
 8000f52:	f7ff fe31 	bl	8000bb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd4 <HAL_UART_MspInit+0x3ac>)
 8000f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <HAL_UART_MspInit+0x3ac>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <HAL_UART_MspInit+0x3b4>)
 8000f64:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe0 <HAL_UART_MspInit+0x3b8>)
 8000f66:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <HAL_UART_MspInit+0x3b4>)
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <HAL_UART_MspInit+0x3b4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <HAL_UART_MspInit+0x3b4>)
 8000f76:	2280      	movs	r2, #128	@ 0x80
 8000f78:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_UART_MspInit+0x3b4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <HAL_UART_MspInit+0x3b4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <HAL_UART_MspInit+0x3b4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <HAL_UART_MspInit+0x3b4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000f92:	4812      	ldr	r0, [pc, #72]	@ (8000fdc <HAL_UART_MspInit+0x3b4>)
 8000f94:	f000 fad2 	bl	800153c <HAL_DMA_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_UART_MspInit+0x37a>
      Error_Handler();
 8000f9e:	f7ff fe0b 	bl	8000bb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <HAL_UART_MspInit+0x3b4>)
 8000fa6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <HAL_UART_MspInit+0x3b4>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2027      	movs	r0, #39	@ 0x27
 8000fb4:	f000 fa8b 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fb8:	2027      	movs	r0, #39	@ 0x27
 8000fba:	f000 faa4 	bl	8001506 <HAL_NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3730      	adds	r7, #48	@ 0x30
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40004800 	.word	0x40004800
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	20003054 	.word	0x20003054
 8000fd8:	40020030 	.word	0x40020030
 8000fdc:	20003098 	.word	0x20003098
 8000fe0:	4002001c 	.word	0x4002001c

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <NMI_Handler+0x4>

08000fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <UsageFault_Handler+0x4>

0800100c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 f958 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Glo_st.sayac_u32++;
 8001038:	4b41      	ldr	r3, [pc, #260]	@ (8001140 <SysTick_Handler+0x110>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a40      	ldr	r2, [pc, #256]	@ (8001140 <SysTick_Handler+0x110>)
 8001040:	6013      	str	r3, [r2, #0]

	if( (Glo_st.sayac_u32 % 1000U) == 0 )
 8001042:	4b3f      	ldr	r3, [pc, #252]	@ (8001140 <SysTick_Handler+0x110>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b3f      	ldr	r3, [pc, #252]	@ (8001144 <SysTick_Handler+0x114>)
 8001048:	fba3 1302 	umull	r1, r3, r3, r2
 800104c:	099b      	lsrs	r3, r3, #6
 800104e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001052:	fb01 f303 	mul.w	r3, r1, r3
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <SysTick_Handler+0x32>
	{
		Glo_st._1HzFlag_u8 = 1;
 800105c:	4b38      	ldr	r3, [pc, #224]	@ (8001140 <SysTick_Handler+0x110>)
 800105e:	2201      	movs	r2, #1
 8001060:	711a      	strb	r2, [r3, #4]
	}
	if( (Glo_st.sayac_u32 % 500U) == 0 )
 8001062:	4b37      	ldr	r3, [pc, #220]	@ (8001140 <SysTick_Handler+0x110>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4b37      	ldr	r3, [pc, #220]	@ (8001144 <SysTick_Handler+0x114>)
 8001068:	fba3 1302 	umull	r1, r3, r3, r2
 800106c:	095b      	lsrs	r3, r3, #5
 800106e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001072:	fb01 f303 	mul.w	r3, r1, r3
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <SysTick_Handler+0x52>
	{
		Glo_st._2HzFlag_u8 = 1;
 800107c:	4b30      	ldr	r3, [pc, #192]	@ (8001140 <SysTick_Handler+0x110>)
 800107e:	2201      	movs	r2, #1
 8001080:	715a      	strb	r2, [r3, #5]
	}
	if( (Glo_st.sayac_u32 % 200U) == 0 )
 8001082:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <SysTick_Handler+0x110>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b30      	ldr	r3, [pc, #192]	@ (8001148 <SysTick_Handler+0x118>)
 8001088:	fba3 1302 	umull	r1, r3, r3, r2
 800108c:	099b      	lsrs	r3, r3, #6
 800108e:	21c8      	movs	r1, #200	@ 0xc8
 8001090:	fb01 f303 	mul.w	r3, r1, r3
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <SysTick_Handler+0x70>
	{
		Glo_st._5HzFlag_u8 = 1;
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <SysTick_Handler+0x110>)
 800109c:	2201      	movs	r2, #1
 800109e:	719a      	strb	r2, [r3, #6]
	}
	if( (Glo_st.sayac_u32 % 100U) == 0 )
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <SysTick_Handler+0x110>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <SysTick_Handler+0x118>)
 80010a6:	fba3 1302 	umull	r1, r3, r3, r2
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2164      	movs	r1, #100	@ 0x64
 80010ae:	fb01 f303 	mul.w	r3, r1, r3
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <SysTick_Handler+0x8e>
	{
		Glo_st._10HzFlag_u8 = 1;
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <SysTick_Handler+0x110>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	71da      	strb	r2, [r3, #7]
	}
	if( (Glo_st.sayac_u32 % 50U) == 0 )
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <SysTick_Handler+0x110>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <SysTick_Handler+0x118>)
 80010c4:	fba3 1302 	umull	r1, r3, r3, r2
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	2132      	movs	r1, #50	@ 0x32
 80010cc:	fb01 f303 	mul.w	r3, r1, r3
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <SysTick_Handler+0xac>
	{
		Glo_st._20HzFlag_u8 = 1;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <SysTick_Handler+0x110>)
 80010d8:	2201      	movs	r2, #1
 80010da:	721a      	strb	r2, [r3, #8]
	}
	if( (Glo_st.sayac_u32 % 20U) == 0 )
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <SysTick_Handler+0x110>)
 80010de:	6819      	ldr	r1, [r3, #0]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <SysTick_Handler+0x11c>)
 80010e2:	fba3 2301 	umull	r2, r3, r3, r1
 80010e6:	091a      	lsrs	r2, r3, #4
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	1aca      	subs	r2, r1, r3
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	d102      	bne.n	80010fc <SysTick_Handler+0xcc>
	{
		Glo_st._50HzFlag_u8 = 1;
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <SysTick_Handler+0x110>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	725a      	strb	r2, [r3, #9]
	}
	if( (Glo_st.sayac_u32 % 10U) == 0 )
 80010fc:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <SysTick_Handler+0x110>)
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <SysTick_Handler+0x11c>)
 8001102:	fba3 2301 	umull	r2, r3, r3, r1
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	1aca      	subs	r2, r1, r3
 8001112:	2a00      	cmp	r2, #0
 8001114:	d102      	bne.n	800111c <SysTick_Handler+0xec>
	{
		Glo_st._100HzFlag_u8 = 1;
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <SysTick_Handler+0x110>)
 8001118:	2201      	movs	r2, #1
 800111a:	729a      	strb	r2, [r3, #10]
	}
	if( (Glo_st.sayac_u32 % 5U) == 0 )
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <SysTick_Handler+0x110>)
 800111e:	6819      	ldr	r1, [r3, #0]
 8001120:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <SysTick_Handler+0x11c>)
 8001122:	fba3 2301 	umull	r2, r3, r3, r1
 8001126:	089a      	lsrs	r2, r3, #2
 8001128:	4613      	mov	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	1aca      	subs	r2, r1, r3
 8001130:	2a00      	cmp	r2, #0
 8001132:	d102      	bne.n	800113a <SysTick_Handler+0x10a>
	{
		Glo_st._200HzFlag_u8 = 1;
 8001134:	4b02      	ldr	r3, [pc, #8]	@ (8001140 <SysTick_Handler+0x110>)
 8001136:	2201      	movs	r2, #1
 8001138:	72da      	strb	r2, [r3, #11]
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000028 	.word	0x20000028
 8001144:	10624dd3 	.word	0x10624dd3
 8001148:	51eb851f 	.word	0x51eb851f
 800114c:	cccccccd 	.word	0xcccccccd

08001150 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <DMA1_Channel2_IRQHandler+0x10>)
 8001156:	f000 fb5f 	bl	8001818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20003098 	.word	0x20003098

08001164 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <DMA1_Channel3_IRQHandler+0x10>)
 800116a:	f000 fb55 	bl	8001818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20003054 	.word	0x20003054

08001178 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800117c:	4802      	ldr	r0, [pc, #8]	@ (8001188 <DMA1_Channel4_IRQHandler+0x10>)
 800117e:	f000 fb4b 	bl	8001818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20002f88 	.word	0x20002f88

0800118c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <DMA1_Channel5_IRQHandler+0x10>)
 8001192:	f000 fb41 	bl	8001818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20002f44 	.word	0x20002f44

080011a0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <DMA1_Channel6_IRQHandler+0x10>)
 80011a6:	f000 fb37 	bl	8001818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20002fcc 	.word	0x20002fcc

080011b4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <DMA1_Channel7_IRQHandler+0x10>)
 80011ba:	f000 fb2d 	bl	8001818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20003010 	.word	0x20003010

080011c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <USART1_IRQHandler+0x10>)
 80011ce:	f001 fb21 	bl	8002814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20002e6c 	.word	0x20002e6c

080011dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <USART2_IRQHandler+0x10>)
 80011e2:	f001 fb17 	bl	8002814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20002eb4 	.word	0x20002eb4

080011f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <USART3_IRQHandler+0x10>)
 80011f6:	f001 fb0d 	bl	8002814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20002efc 	.word	0x20002efc

08001204 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001210:	f7ff fff8 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480b      	ldr	r0, [pc, #44]	@ (8001244 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001216:	490c      	ldr	r1, [pc, #48]	@ (8001248 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001218:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <LoopFillZerobss+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800122c:	4c09      	ldr	r4, [pc, #36]	@ (8001254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123a:	f002 f9ed 	bl	8003618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123e:	f7ff fb21 	bl	8000884 <main>
  bx lr
 8001242:	4770      	bx	lr
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800124c:	080038c8 	.word	0x080038c8
  ldr r2, =_sbss
 8001250:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001254:	200030e0 	.word	0x200030e0

08001258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_2_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <HAL_Init+0x28>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <HAL_Init+0x28>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 f923 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001272:	200f      	movs	r0, #15
 8001274:	f000 f808 	bl	8001288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001278:	f7ff fca4 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40022000 	.word	0x40022000

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <HAL_InitTick+0x54>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_InitTick+0x58>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f93b 	bl	8001522 <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f000 f903 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	@ (80012e4 <HAL_InitTick+0x5c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000004 	.word	0x20000004

080012e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <HAL_IncTick+0x1c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <HAL_IncTick+0x20>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a03      	ldr	r2, [pc, #12]	@ (8001308 <HAL_IncTick+0x20>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	20000008 	.word	0x20000008
 8001308:	200030dc 	.word	0x200030dc

0800130c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b02      	ldr	r3, [pc, #8]	@ (800131c <HAL_GetTick+0x10>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	200030dc 	.word	0x200030dc

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4906      	ldr	r1, [pc, #24]	@ (80013b8 <__NVIC_EnableIRQ+0x34>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	@ (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff90 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff2d 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff42 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5f 	bl	80013bc <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff35 	bl	8001384 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e043      	b.n	80015da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <HAL_DMA_Init+0xa8>)
 800155a:	4413      	add	r3, r2
 800155c:	4a22      	ldr	r2, [pc, #136]	@ (80015e8 <HAL_DMA_Init+0xac>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	009a      	lsls	r2, r3, #2
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1f      	ldr	r2, [pc, #124]	@ (80015ec <HAL_DMA_Init+0xb0>)
 800156e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001586:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800158a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	bffdfff8 	.word	0xbffdfff8
 80015e8:	cccccccd 	.word	0xcccccccd
 80015ec:	40020000 	.word	0x40020000

080015f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_DMA_Start_IT+0x20>
 800160c:	2302      	movs	r3, #2
 800160e:	e04b      	b.n	80016a8 <HAL_DMA_Start_IT+0xb8>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d13a      	bne.n	800169a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 f9eb 	bl	8001a24 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001652:	2b00      	cmp	r3, #0
 8001654:	d008      	beq.n	8001668 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 020e 	orr.w	r2, r2, #14
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e00f      	b.n	8001688 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0204 	bic.w	r2, r2, #4
 8001676:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 020a 	orr.w	r2, r2, #10
 8001686:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e005      	b.n	80016a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016a2:	2302      	movs	r3, #2
 80016a4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d008      	beq.n	80016da <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2204      	movs	r2, #4
 80016cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e020      	b.n	800171c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 020e 	bic.w	r2, r2, #14
 80016e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001702:	2101      	movs	r1, #1
 8001704:	fa01 f202 	lsl.w	r2, r1, r2
 8001708:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
	...

08001728 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d005      	beq.n	800174c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2204      	movs	r2, #4
 8001744:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e051      	b.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 020e 	bic.w	r2, r2, #14
 800175a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0201 	bic.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a22      	ldr	r2, [pc, #136]	@ (80017fc <HAL_DMA_Abort_IT+0xd4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d029      	beq.n	80017ca <HAL_DMA_Abort_IT+0xa2>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a21      	ldr	r2, [pc, #132]	@ (8001800 <HAL_DMA_Abort_IT+0xd8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d022      	beq.n	80017c6 <HAL_DMA_Abort_IT+0x9e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1f      	ldr	r2, [pc, #124]	@ (8001804 <HAL_DMA_Abort_IT+0xdc>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01a      	beq.n	80017c0 <HAL_DMA_Abort_IT+0x98>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1e      	ldr	r2, [pc, #120]	@ (8001808 <HAL_DMA_Abort_IT+0xe0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d012      	beq.n	80017ba <HAL_DMA_Abort_IT+0x92>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1c      	ldr	r2, [pc, #112]	@ (800180c <HAL_DMA_Abort_IT+0xe4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00a      	beq.n	80017b4 <HAL_DMA_Abort_IT+0x8c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001810 <HAL_DMA_Abort_IT+0xe8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d102      	bne.n	80017ae <HAL_DMA_Abort_IT+0x86>
 80017a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80017ac:	e00e      	b.n	80017cc <HAL_DMA_Abort_IT+0xa4>
 80017ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017b2:	e00b      	b.n	80017cc <HAL_DMA_Abort_IT+0xa4>
 80017b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017b8:	e008      	b.n	80017cc <HAL_DMA_Abort_IT+0xa4>
 80017ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017be:	e005      	b.n	80017cc <HAL_DMA_Abort_IT+0xa4>
 80017c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017c4:	e002      	b.n	80017cc <HAL_DMA_Abort_IT+0xa4>
 80017c6:	2310      	movs	r3, #16
 80017c8:	e000      	b.n	80017cc <HAL_DMA_Abort_IT+0xa4>
 80017ca:	2301      	movs	r3, #1
 80017cc:	4a11      	ldr	r2, [pc, #68]	@ (8001814 <HAL_DMA_Abort_IT+0xec>)
 80017ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	4798      	blx	r3
    } 
  }
  return status;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40020008 	.word	0x40020008
 8001800:	4002001c 	.word	0x4002001c
 8001804:	40020030 	.word	0x40020030
 8001808:	40020044 	.word	0x40020044
 800180c:	40020058 	.word	0x40020058
 8001810:	4002006c 	.word	0x4002006c
 8001814:	40020000 	.word	0x40020000

08001818 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	2204      	movs	r2, #4
 8001836:	409a      	lsls	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d04f      	beq.n	80018e0 <HAL_DMA_IRQHandler+0xc8>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d04a      	beq.n	80018e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	2b00      	cmp	r3, #0
 8001856:	d107      	bne.n	8001868 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0204 	bic.w	r2, r2, #4
 8001866:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a66      	ldr	r2, [pc, #408]	@ (8001a08 <HAL_DMA_IRQHandler+0x1f0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d029      	beq.n	80018c6 <HAL_DMA_IRQHandler+0xae>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a65      	ldr	r2, [pc, #404]	@ (8001a0c <HAL_DMA_IRQHandler+0x1f4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d022      	beq.n	80018c2 <HAL_DMA_IRQHandler+0xaa>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a63      	ldr	r2, [pc, #396]	@ (8001a10 <HAL_DMA_IRQHandler+0x1f8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d01a      	beq.n	80018bc <HAL_DMA_IRQHandler+0xa4>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a62      	ldr	r2, [pc, #392]	@ (8001a14 <HAL_DMA_IRQHandler+0x1fc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d012      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x9e>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a60      	ldr	r2, [pc, #384]	@ (8001a18 <HAL_DMA_IRQHandler+0x200>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00a      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x98>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a5f      	ldr	r2, [pc, #380]	@ (8001a1c <HAL_DMA_IRQHandler+0x204>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d102      	bne.n	80018aa <HAL_DMA_IRQHandler+0x92>
 80018a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018a8:	e00e      	b.n	80018c8 <HAL_DMA_IRQHandler+0xb0>
 80018aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018ae:	e00b      	b.n	80018c8 <HAL_DMA_IRQHandler+0xb0>
 80018b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018b4:	e008      	b.n	80018c8 <HAL_DMA_IRQHandler+0xb0>
 80018b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018ba:	e005      	b.n	80018c8 <HAL_DMA_IRQHandler+0xb0>
 80018bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c0:	e002      	b.n	80018c8 <HAL_DMA_IRQHandler+0xb0>
 80018c2:	2340      	movs	r3, #64	@ 0x40
 80018c4:	e000      	b.n	80018c8 <HAL_DMA_IRQHandler+0xb0>
 80018c6:	2304      	movs	r3, #4
 80018c8:	4a55      	ldr	r2, [pc, #340]	@ (8001a20 <HAL_DMA_IRQHandler+0x208>)
 80018ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 8094 	beq.w	80019fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018de:	e08e      	b.n	80019fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	2202      	movs	r2, #2
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d056      	beq.n	800199e <HAL_DMA_IRQHandler+0x186>
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d051      	beq.n	800199e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10b      	bne.n	8001920 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 020a 	bic.w	r2, r2, #10
 8001916:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a38      	ldr	r2, [pc, #224]	@ (8001a08 <HAL_DMA_IRQHandler+0x1f0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d029      	beq.n	800197e <HAL_DMA_IRQHandler+0x166>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a37      	ldr	r2, [pc, #220]	@ (8001a0c <HAL_DMA_IRQHandler+0x1f4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d022      	beq.n	800197a <HAL_DMA_IRQHandler+0x162>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a35      	ldr	r2, [pc, #212]	@ (8001a10 <HAL_DMA_IRQHandler+0x1f8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01a      	beq.n	8001974 <HAL_DMA_IRQHandler+0x15c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a34      	ldr	r2, [pc, #208]	@ (8001a14 <HAL_DMA_IRQHandler+0x1fc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d012      	beq.n	800196e <HAL_DMA_IRQHandler+0x156>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a32      	ldr	r2, [pc, #200]	@ (8001a18 <HAL_DMA_IRQHandler+0x200>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00a      	beq.n	8001968 <HAL_DMA_IRQHandler+0x150>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a31      	ldr	r2, [pc, #196]	@ (8001a1c <HAL_DMA_IRQHandler+0x204>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d102      	bne.n	8001962 <HAL_DMA_IRQHandler+0x14a>
 800195c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001960:	e00e      	b.n	8001980 <HAL_DMA_IRQHandler+0x168>
 8001962:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001966:	e00b      	b.n	8001980 <HAL_DMA_IRQHandler+0x168>
 8001968:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800196c:	e008      	b.n	8001980 <HAL_DMA_IRQHandler+0x168>
 800196e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001972:	e005      	b.n	8001980 <HAL_DMA_IRQHandler+0x168>
 8001974:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001978:	e002      	b.n	8001980 <HAL_DMA_IRQHandler+0x168>
 800197a:	2320      	movs	r3, #32
 800197c:	e000      	b.n	8001980 <HAL_DMA_IRQHandler+0x168>
 800197e:	2302      	movs	r3, #2
 8001980:	4a27      	ldr	r2, [pc, #156]	@ (8001a20 <HAL_DMA_IRQHandler+0x208>)
 8001982:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	d034      	beq.n	80019fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800199c:	e02f      	b.n	80019fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	2208      	movs	r2, #8
 80019a4:	409a      	lsls	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d028      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x1e8>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d023      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 020e 	bic.w	r2, r2, #14
 80019c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d0:	2101      	movs	r1, #1
 80019d2:	fa01 f202 	lsl.w	r2, r1, r2
 80019d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
    }
  }
  return;
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
}
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40020008 	.word	0x40020008
 8001a0c:	4002001c 	.word	0x4002001c
 8001a10:	40020030 	.word	0x40020030
 8001a14:	40020044 	.word	0x40020044
 8001a18:	40020058 	.word	0x40020058
 8001a1c:	4002006c 	.word	0x4002006c
 8001a20:	40020000 	.word	0x40020000

08001a24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d108      	bne.n	8001a64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a62:	e007      	b.n	8001a74 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	60da      	str	r2, [r3, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b08b      	sub	sp, #44	@ 0x2c
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	e169      	b.n	8001d68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a94:	2201      	movs	r2, #1
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8158 	bne.w	8001d62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4a9a      	ldr	r2, [pc, #616]	@ (8001d20 <HAL_GPIO_Init+0x2a0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d05e      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001abc:	4a98      	ldr	r2, [pc, #608]	@ (8001d20 <HAL_GPIO_Init+0x2a0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d875      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ac2:	4a98      	ldr	r2, [pc, #608]	@ (8001d24 <HAL_GPIO_Init+0x2a4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d058      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ac8:	4a96      	ldr	r2, [pc, #600]	@ (8001d24 <HAL_GPIO_Init+0x2a4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d86f      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ace:	4a96      	ldr	r2, [pc, #600]	@ (8001d28 <HAL_GPIO_Init+0x2a8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d052      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ad4:	4a94      	ldr	r2, [pc, #592]	@ (8001d28 <HAL_GPIO_Init+0x2a8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d869      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ada:	4a94      	ldr	r2, [pc, #592]	@ (8001d2c <HAL_GPIO_Init+0x2ac>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d04c      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ae0:	4a92      	ldr	r2, [pc, #584]	@ (8001d2c <HAL_GPIO_Init+0x2ac>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d863      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ae6:	4a92      	ldr	r2, [pc, #584]	@ (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d046      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001aec:	4a90      	ldr	r2, [pc, #576]	@ (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d85d      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001af2:	2b12      	cmp	r3, #18
 8001af4:	d82a      	bhi.n	8001b4c <HAL_GPIO_Init+0xcc>
 8001af6:	2b12      	cmp	r3, #18
 8001af8:	d859      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001afa:	a201      	add	r2, pc, #4	@ (adr r2, 8001b00 <HAL_GPIO_Init+0x80>)
 8001afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b00:	08001b7b 	.word	0x08001b7b
 8001b04:	08001b55 	.word	0x08001b55
 8001b08:	08001b67 	.word	0x08001b67
 8001b0c:	08001ba9 	.word	0x08001ba9
 8001b10:	08001baf 	.word	0x08001baf
 8001b14:	08001baf 	.word	0x08001baf
 8001b18:	08001baf 	.word	0x08001baf
 8001b1c:	08001baf 	.word	0x08001baf
 8001b20:	08001baf 	.word	0x08001baf
 8001b24:	08001baf 	.word	0x08001baf
 8001b28:	08001baf 	.word	0x08001baf
 8001b2c:	08001baf 	.word	0x08001baf
 8001b30:	08001baf 	.word	0x08001baf
 8001b34:	08001baf 	.word	0x08001baf
 8001b38:	08001baf 	.word	0x08001baf
 8001b3c:	08001baf 	.word	0x08001baf
 8001b40:	08001baf 	.word	0x08001baf
 8001b44:	08001b5d 	.word	0x08001b5d
 8001b48:	08001b71 	.word	0x08001b71
 8001b4c:	4a79      	ldr	r2, [pc, #484]	@ (8001d34 <HAL_GPIO_Init+0x2b4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b52:	e02c      	b.n	8001bae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e029      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	3304      	adds	r3, #4
 8001b62:	623b      	str	r3, [r7, #32]
          break;
 8001b64:	e024      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e01f      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	330c      	adds	r3, #12
 8001b76:	623b      	str	r3, [r7, #32]
          break;
 8001b78:	e01a      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b82:	2304      	movs	r3, #4
 8001b84:	623b      	str	r3, [r7, #32]
          break;
 8001b86:	e013      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b90:	2308      	movs	r3, #8
 8001b92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	611a      	str	r2, [r3, #16]
          break;
 8001b9a:	e009      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	615a      	str	r2, [r3, #20]
          break;
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	e000      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          break;
 8001bae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2bff      	cmp	r3, #255	@ 0xff
 8001bb4:	d801      	bhi.n	8001bba <HAL_GPIO_Init+0x13a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	e001      	b.n	8001bbe <HAL_GPIO_Init+0x13e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2bff      	cmp	r3, #255	@ 0xff
 8001bc4:	d802      	bhi.n	8001bcc <HAL_GPIO_Init+0x14c>
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	e002      	b.n	8001bd2 <HAL_GPIO_Init+0x152>
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	3b08      	subs	r3, #8
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	210f      	movs	r1, #15
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	401a      	ands	r2, r3
 8001be4:	6a39      	ldr	r1, [r7, #32]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	431a      	orrs	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80b1 	beq.w	8001d62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c00:	4b4d      	ldr	r3, [pc, #308]	@ (8001d38 <HAL_GPIO_Init+0x2b8>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a4c      	ldr	r2, [pc, #304]	@ (8001d38 <HAL_GPIO_Init+0x2b8>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d38 <HAL_GPIO_Init+0x2b8>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c18:	4a48      	ldr	r2, [pc, #288]	@ (8001d3c <HAL_GPIO_Init+0x2bc>)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a40      	ldr	r2, [pc, #256]	@ (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <HAL_GPIO_Init+0x1ec>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a3f      	ldr	r2, [pc, #252]	@ (8001d44 <HAL_GPIO_Init+0x2c4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00d      	beq.n	8001c68 <HAL_GPIO_Init+0x1e8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d48 <HAL_GPIO_Init+0x2c8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <HAL_GPIO_Init+0x1e4>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a3d      	ldr	r2, [pc, #244]	@ (8001d4c <HAL_GPIO_Init+0x2cc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_GPIO_Init+0x1e0>
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e006      	b.n	8001c6e <HAL_GPIO_Init+0x1ee>
 8001c60:	2304      	movs	r3, #4
 8001c62:	e004      	b.n	8001c6e <HAL_GPIO_Init+0x1ee>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e002      	b.n	8001c6e <HAL_GPIO_Init+0x1ee>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_GPIO_Init+0x1ee>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c70:	f002 0203 	and.w	r2, r2, #3
 8001c74:	0092      	lsls	r2, r2, #2
 8001c76:	4093      	lsls	r3, r2
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c7e:	492f      	ldr	r1, [pc, #188]	@ (8001d3c <HAL_GPIO_Init+0x2bc>)
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	3302      	adds	r3, #2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c98:	4b2d      	ldr	r3, [pc, #180]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	492c      	ldr	r1, [pc, #176]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4928      	ldr	r1, [pc, #160]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cc0:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	4922      	ldr	r1, [pc, #136]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60cb      	str	r3, [r1, #12]
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cce:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	491e      	ldr	r1, [pc, #120]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4918      	ldr	r1, [pc, #96]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cf6:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	4914      	ldr	r1, [pc, #80]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d021      	beq.n	8001d54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	490e      	ldr	r1, [pc, #56]	@ (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
 8001d1c:	e021      	b.n	8001d62 <HAL_GPIO_Init+0x2e2>
 8001d1e:	bf00      	nop
 8001d20:	10320000 	.word	0x10320000
 8001d24:	10310000 	.word	0x10310000
 8001d28:	10220000 	.word	0x10220000
 8001d2c:	10210000 	.word	0x10210000
 8001d30:	10120000 	.word	0x10120000
 8001d34:	10110000 	.word	0x10110000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40010800 	.word	0x40010800
 8001d44:	40010c00 	.word	0x40010c00
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	40011400 	.word	0x40011400
 8001d50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_GPIO_Init+0x304>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	4909      	ldr	r1, [pc, #36]	@ (8001d84 <HAL_GPIO_Init+0x304>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	3301      	adds	r3, #1
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f47f ae8e 	bne.w	8001a94 <HAL_GPIO_Init+0x14>
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	372c      	adds	r7, #44	@ 0x2c
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	40010400 	.word	0x40010400

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001da4:	e003      	b.n	8001dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	041a      	lsls	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	611a      	str	r2, [r3, #16]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e272      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8087 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd8:	4b92      	ldr	r3, [pc, #584]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d00c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de4:	4b8f      	ldr	r3, [pc, #572]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d112      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5e>
 8001df0:	4b8c      	ldr	r3, [pc, #560]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dfc:	d10b      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfe:	4b89      	ldr	r3, [pc, #548]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d06c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x12c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d168      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e24c      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x76>
 8001e20:	4b80      	ldr	r3, [pc, #512]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a7f      	ldr	r2, [pc, #508]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	e02e      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x98>
 8001e36:	4b7b      	ldr	r3, [pc, #492]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7a      	ldr	r2, [pc, #488]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b78      	ldr	r3, [pc, #480]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a77      	ldr	r2, [pc, #476]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e01d      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0xbc>
 8001e5a:	4b72      	ldr	r3, [pc, #456]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a71      	ldr	r2, [pc, #452]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b6f      	ldr	r3, [pc, #444]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e74:	4b6b      	ldr	r3, [pc, #428]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a6a      	ldr	r2, [pc, #424]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b68      	ldr	r3, [pc, #416]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a67      	ldr	r2, [pc, #412]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fa3a 	bl	800130c <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff fa36 	bl	800130c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	@ 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e200      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b5d      	ldr	r3, [pc, #372]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0xe4>
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fa26 	bl	800130c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fa22 	bl	800130c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	@ 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1ec      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	4b53      	ldr	r3, [pc, #332]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x10c>
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d063      	beq.n	8001fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001efe:	4b49      	ldr	r3, [pc, #292]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d11c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x18c>
 8001f0a:	4b46      	ldr	r3, [pc, #280]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d116      	bne.n	8001f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	4b43      	ldr	r3, [pc, #268]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_RCC_OscConfig+0x176>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e1c0      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4939      	ldr	r1, [pc, #228]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	e03a      	b.n	8001fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d020      	beq.n	8001f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f4c:	4b36      	ldr	r3, [pc, #216]	@ (8002028 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff f9db 	bl	800130c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5a:	f7ff f9d7 	bl	800130c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1a1      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4927      	ldr	r1, [pc, #156]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	e015      	b.n	8001fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8e:	4b26      	ldr	r3, [pc, #152]	@ (8002028 <HAL_RCC_OscConfig+0x270>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff f9ba 	bl	800130c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7ff f9b6 	bl	800130c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e180      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d03a      	beq.n	800203c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d019      	beq.n	8002002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fce:	4b17      	ldr	r3, [pc, #92]	@ (800202c <HAL_RCC_OscConfig+0x274>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f99a 	bl	800130c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fdc:	f7ff f996 	bl	800130c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e160      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f000 face 	bl	800259c <RCC_Delay>
 8002000:	e01c      	b.n	800203c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_RCC_OscConfig+0x274>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002008:	f7ff f980 	bl	800130c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7ff f97c 	bl	800130c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d908      	bls.n	8002030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e146      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	42420000 	.word	0x42420000
 800202c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	4b92      	ldr	r3, [pc, #584]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e9      	bne.n	8002010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80a6 	beq.w	8002196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b8b      	ldr	r3, [pc, #556]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b88      	ldr	r3, [pc, #544]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a87      	ldr	r2, [pc, #540]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002064:	61d3      	str	r3, [r2, #28]
 8002066:	4b85      	ldr	r3, [pc, #532]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002072:	2301      	movs	r3, #1
 8002074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	4b82      	ldr	r3, [pc, #520]	@ (8002280 <HAL_RCC_OscConfig+0x4c8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002082:	4b7f      	ldr	r3, [pc, #508]	@ (8002280 <HAL_RCC_OscConfig+0x4c8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7e      	ldr	r2, [pc, #504]	@ (8002280 <HAL_RCC_OscConfig+0x4c8>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208e:	f7ff f93d 	bl	800130c <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7ff f939 	bl	800130c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b64      	cmp	r3, #100	@ 0x64
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e103      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b75      	ldr	r3, [pc, #468]	@ (8002280 <HAL_RCC_OscConfig+0x4c8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x312>
 80020bc:	4b6f      	ldr	r3, [pc, #444]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a6e      	ldr	r2, [pc, #440]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6213      	str	r3, [r2, #32]
 80020c8:	e02d      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x334>
 80020d2:	4b6a      	ldr	r3, [pc, #424]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a69      	ldr	r2, [pc, #420]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	4b67      	ldr	r3, [pc, #412]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a66      	ldr	r2, [pc, #408]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	e01c      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d10c      	bne.n	800210e <HAL_RCC_OscConfig+0x356>
 80020f4:	4b61      	ldr	r3, [pc, #388]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a60      	ldr	r2, [pc, #384]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6213      	str	r3, [r2, #32]
 8002100:	4b5e      	ldr	r3, [pc, #376]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a5d      	ldr	r2, [pc, #372]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	e00b      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 800210e:	4b5b      	ldr	r3, [pc, #364]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a5a      	ldr	r2, [pc, #360]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	4b58      	ldr	r3, [pc, #352]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a57      	ldr	r2, [pc, #348]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d015      	beq.n	800215a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7ff f8ed 	bl	800130c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff f8e9 	bl	800130c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0b1      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	4b4b      	ldr	r3, [pc, #300]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ee      	beq.n	8002136 <HAL_RCC_OscConfig+0x37e>
 8002158:	e014      	b.n	8002184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7ff f8d7 	bl	800130c <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7ff f8d3 	bl	800130c <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e09b      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	4b40      	ldr	r3, [pc, #256]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ee      	bne.n	8002162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b3c      	ldr	r3, [pc, #240]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a3b      	ldr	r2, [pc, #236]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8087 	beq.w	80022ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a0:	4b36      	ldr	r3, [pc, #216]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d061      	beq.n	8002270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d146      	bne.n	8002242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b4:	4b33      	ldr	r3, [pc, #204]	@ (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7ff f8a7 	bl	800130c <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7ff f8a3 	bl	800130c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e06d      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d4:	4b29      	ldr	r3, [pc, #164]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e8:	d108      	bne.n	80021fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ea:	4b24      	ldr	r3, [pc, #144]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	4921      	ldr	r1, [pc, #132]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fc:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a19      	ldr	r1, [r3, #32]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	430b      	orrs	r3, r1
 800220e:	491b      	ldr	r1, [pc, #108]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff f877 	bl	800130c <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f873 	bl	800130c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e03d      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x46a>
 8002240:	e035      	b.n	80022ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff f860 	bl	800130c <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7ff f85c 	bl	800130c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e026      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x498>
 800226e:	e01e      	b.n	80022ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e019      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
 8002284:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_RCC_OscConfig+0x500>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	429a      	cmp	r2, r3
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000

080022bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0d0      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d0:	4b6a      	ldr	r3, [pc, #424]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d910      	bls.n	8002300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b67      	ldr	r3, [pc, #412]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 0207 	bic.w	r2, r3, #7
 80022e6:	4965      	ldr	r1, [pc, #404]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b63      	ldr	r3, [pc, #396]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0b8      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002318:	4b59      	ldr	r3, [pc, #356]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a58      	ldr	r2, [pc, #352]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002330:	4b53      	ldr	r3, [pc, #332]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a52      	ldr	r2, [pc, #328]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800233a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b50      	ldr	r3, [pc, #320]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	494d      	ldr	r1, [pc, #308]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d040      	beq.n	80023dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b47      	ldr	r3, [pc, #284]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d115      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e07f      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b41      	ldr	r3, [pc, #260]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e073      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e06b      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b39      	ldr	r3, [pc, #228]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4936      	ldr	r1, [pc, #216]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ac:	f7fe ffae 	bl	800130c <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7fe ffaa 	bl	800130c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e053      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b27      	ldr	r3, [pc, #156]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d210      	bcs.n	800240c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b24      	ldr	r3, [pc, #144]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 0207 	bic.w	r2, r3, #7
 80023f2:	4922      	ldr	r1, [pc, #136]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b20      	ldr	r3, [pc, #128]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e032      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002418:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4916      	ldr	r1, [pc, #88]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002436:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	490e      	ldr	r1, [pc, #56]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800244a:	f000 f821 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 800244e:	4602      	mov	r2, r0
 8002450:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	490a      	ldr	r1, [pc, #40]	@ (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	5ccb      	ldrb	r3, [r1, r3]
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	4a09      	ldr	r2, [pc, #36]	@ (8002488 <HAL_RCC_ClockConfig+0x1cc>)
 8002464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002466:	4b09      	ldr	r3, [pc, #36]	@ (800248c <HAL_RCC_ClockConfig+0x1d0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe ff0c 	bl	8001288 <HAL_InitTick>

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40022000 	.word	0x40022000
 8002480:	40021000 	.word	0x40021000
 8002484:	08003894 	.word	0x08003894
 8002488:	20000000 	.word	0x20000000
 800248c:	20000004 	.word	0x20000004

08002490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x94>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d002      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x30>
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x36>
 80024be:	e027      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c0:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x98>)
 80024c2:	613b      	str	r3, [r7, #16]
      break;
 80024c4:	e027      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	0c9b      	lsrs	r3, r3, #18
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	4a17      	ldr	r2, [pc, #92]	@ (800252c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d010      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024de:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x94>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0c5b      	lsrs	r3, r3, #17
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	4a11      	ldr	r2, [pc, #68]	@ (8002530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x98>)
 80024f2:	fb03 f202 	mul.w	r2, r3, r2
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e004      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a0c      	ldr	r2, [pc, #48]	@ (8002534 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	613b      	str	r3, [r7, #16]
      break;
 800250e:	e002      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x98>)
 8002512:	613b      	str	r3, [r7, #16]
      break;
 8002514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002516:	693b      	ldr	r3, [r7, #16]
}
 8002518:	4618      	mov	r0, r3
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	007a1200 	.word	0x007a1200
 800252c:	080038ac 	.word	0x080038ac
 8002530:	080038bc 	.word	0x080038bc
 8002534:	003d0900 	.word	0x003d0900

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b02      	ldr	r3, [pc, #8]	@ (8002548 <HAL_RCC_GetHCLKFreq+0x10>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	20000000 	.word	0x20000000

0800254c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002550:	f7ff fff2 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b05      	ldr	r3, [pc, #20]	@ (800256c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4903      	ldr	r1, [pc, #12]	@ (8002570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	080038a4 	.word	0x080038a4

08002574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002578:	f7ff ffde 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	0adb      	lsrs	r3, r3, #11
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4903      	ldr	r1, [pc, #12]	@ (8002598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	080038a4 	.word	0x080038a4

0800259c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a4:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <RCC_Delay+0x34>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <RCC_Delay+0x38>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0a5b      	lsrs	r3, r3, #9
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b8:	bf00      	nop
  }
  while (Delay --);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1e5a      	subs	r2, r3, #1
 80025be:	60fa      	str	r2, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f9      	bne.n	80025b8 <RCC_Delay+0x1c>
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	20000000 	.word	0x20000000
 80025d4:	10624dd3 	.word	0x10624dd3

080025d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e042      	b.n	8002670 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe fb12 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2224      	movs	r2, #36	@ 0x24
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800261a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 ff65 	bl	80034ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	@ 0x30
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	4613      	mov	r3, r2
 8002684:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	d156      	bne.n	8002740 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_UART_Transmit_DMA+0x26>
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e04f      	b.n	8002742 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	88fa      	ldrh	r2, [r7, #6]
 80026b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2221      	movs	r2, #33	@ 0x21
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c6:	4a21      	ldr	r2, [pc, #132]	@ (800274c <HAL_UART_Transmit_DMA+0xd4>)
 80026c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ce:	4a20      	ldr	r2, [pc, #128]	@ (8002750 <HAL_UART_Transmit_DMA+0xd8>)
 80026d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <HAL_UART_Transmit_DMA+0xdc>)
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026de:	2200      	movs	r2, #0
 80026e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80026e2:	f107 0308 	add.w	r3, r7, #8
 80026e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3304      	adds	r3, #4
 80026f6:	461a      	mov	r2, r3
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	f7fe ff79 	bl	80015f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002706:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3314      	adds	r3, #20
 800270e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	e853 3f00 	ldrex	r3, [r3]
 8002716:	617b      	str	r3, [r7, #20]
   return(result);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800271e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3314      	adds	r3, #20
 8002726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002728:	627a      	str	r2, [r7, #36]	@ 0x24
 800272a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272c:	6a39      	ldr	r1, [r7, #32]
 800272e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002730:	e841 2300 	strex	r3, r2, [r1]
 8002734:	61fb      	str	r3, [r7, #28]
   return(result);
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e5      	bne.n	8002708 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e000      	b.n	8002742 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002740:	2302      	movs	r3, #2
  }
}
 8002742:	4618      	mov	r0, r3
 8002744:	3730      	adds	r7, #48	@ 0x30
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	08002d81 	.word	0x08002d81
 8002750:	08002e1b 	.word	0x08002e1b
 8002754:	08002f9f 	.word	0x08002f9f

08002758 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08c      	sub	sp, #48	@ 0x30
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	d14a      	bne.n	8002808 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e043      	b.n	800280a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	461a      	mov	r2, r3
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fc4d 	bl	8003034 <UART_Start_Receive_DMA>
 800279a:	4603      	mov	r3, r0
 800279c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80027a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d12c      	bne.n	8002802 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d125      	bne.n	80027fc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	e853 3f00 	ldrex	r3, [r3]
 80027d4:	617b      	str	r3, [r7, #20]
   return(result);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f043 0310 	orr.w	r3, r3, #16
 80027dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	330c      	adds	r3, #12
 80027e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80027e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	6a39      	ldr	r1, [r7, #32]
 80027ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1e5      	bne.n	80027c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80027fa:	e002      	b.n	8002802 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002806:	e000      	b.n	800280a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
  }
}
 800280a:	4618      	mov	r0, r3
 800280c:	3730      	adds	r7, #48	@ 0x30
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b0ba      	sub	sp, #232	@ 0xe8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10f      	bne.n	800287a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800285a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_UART_IRQHandler+0x66>
 8002866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fd7c 	bl	8003370 <UART_Receive_IT>
      return;
 8002878:	e25b      	b.n	8002d32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800287a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80de 	beq.w	8002a40 <HAL_UART_IRQHandler+0x22c>
 8002884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d106      	bne.n	800289e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002894:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80d1 	beq.w	8002a40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800289e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <HAL_UART_IRQHandler+0xae>
 80028aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <HAL_UART_IRQHandler+0xd2>
 80028ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028de:	f043 0202 	orr.w	r2, r3, #2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_UART_IRQHandler+0xf6>
 80028f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f043 0204 	orr.w	r2, r3, #4
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800290a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d011      	beq.n	800293a <HAL_UART_IRQHandler+0x126>
 8002916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	d105      	bne.n	800292e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f043 0208 	orr.w	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81f2 	beq.w	8002d28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_UART_IRQHandler+0x14e>
 8002950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fd07 	bl	8003370 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d103      	bne.n	800298e <HAL_UART_IRQHandler+0x17a>
 8002986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d04f      	beq.n	8002a2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fc11 	bl	80031b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d041      	beq.n	8002a26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3314      	adds	r3, #20
 80029a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029b0:	e853 3f00 	ldrex	r3, [r3]
 80029b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80029b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3314      	adds	r3, #20
 80029ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80029ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80029d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80029da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029de:	e841 2300 	strex	r3, r2, [r1]
 80029e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1d9      	bne.n	80029a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d013      	beq.n	8002a1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fa:	4a7e      	ldr	r2, [pc, #504]	@ (8002bf4 <HAL_UART_IRQHandler+0x3e0>)
 80029fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fe90 	bl	8001728 <HAL_DMA_Abort_IT>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d016      	beq.n	8002a3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	e00e      	b.n	8002a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f9a5 	bl	8002d6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a24:	e00a      	b.n	8002a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f9a1 	bl	8002d6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	e006      	b.n	8002a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f99d 	bl	8002d6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002a3a:	e175      	b.n	8002d28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	bf00      	nop
    return;
 8002a3e:	e173      	b.n	8002d28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	f040 814f 	bne.w	8002ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8148 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8141 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80b6 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8145 	beq.w	8002d2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	f080 813e 	bcs.w	8002d2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ab6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	f000 8088 	beq.w	8002bd4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	330c      	adds	r3, #12
 8002aca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ad2:	e853 3f00 	ldrex	r3, [r3]
 8002ad6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ada:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ade:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002af0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002af4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002afc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b00:	e841 2300 	strex	r3, r2, [r1]
 8002b04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1d9      	bne.n	8002ac4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3314      	adds	r3, #20
 8002b16:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b1a:	e853 3f00 	ldrex	r3, [r3]
 8002b1e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3314      	adds	r3, #20
 8002b30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b34:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b40:	e841 2300 	strex	r3, r2, [r1]
 8002b44:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e1      	bne.n	8002b10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3314      	adds	r3, #20
 8002b52:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b56:	e853 3f00 	ldrex	r3, [r3]
 8002b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b74:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b78:	e841 2300 	strex	r3, r2, [r1]
 8002b7c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e3      	bne.n	8002b4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ba4:	f023 0310 	bic.w	r3, r3, #16
 8002ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	330c      	adds	r3, #12
 8002bb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002bb6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002bb8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bbe:	e841 2300 	strex	r3, r2, [r1]
 8002bc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e3      	bne.n	8002b92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fd6e 	bl	80016b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fd fde6 	bl	80007bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bf0:	e09c      	b.n	8002d2c <HAL_UART_IRQHandler+0x518>
 8002bf2:	bf00      	nop
 8002bf4:	0800327b 	.word	0x0800327b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 808e 	beq.w	8002d30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8089 	beq.w	8002d30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002c42:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e3      	bne.n	8002c1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	623b      	str	r3, [r7, #32]
   return(result);
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3314      	adds	r3, #20
 8002c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c82:	e841 2300 	strex	r3, r2, [r1]
 8002c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e3      	bne.n	8002c56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	e853 3f00 	ldrex	r3, [r3]
 8002caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0310 	bic.w	r3, r3, #16
 8002cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	330c      	adds	r3, #12
 8002cbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002cc0:	61fa      	str	r2, [r7, #28]
 8002cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	69b9      	ldr	r1, [r7, #24]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e3      	bne.n	8002c9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7fd fd6b 	bl	80007bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ce6:	e023      	b.n	8002d30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <HAL_UART_IRQHandler+0x4f4>
 8002cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 face 	bl	80032a2 <UART_Transmit_IT>
    return;
 8002d06:	e014      	b.n	8002d32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <HAL_UART_IRQHandler+0x51e>
 8002d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fb0d 	bl	8003340 <UART_EndTransmit_IT>
    return;
 8002d26:	e004      	b.n	8002d32 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d28:	bf00      	nop
 8002d2a:	e002      	b.n	8002d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d2c:	bf00      	nop
 8002d2e:	e000      	b.n	8002d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d30:	bf00      	nop
  }
}
 8002d32:	37e8      	adds	r7, #232	@ 0xe8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b090      	sub	sp, #64	@ 0x40
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d137      	bne.n	8002e0c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d9e:	2200      	movs	r2, #0
 8002da0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3314      	adds	r3, #20
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	623b      	str	r3, [r7, #32]
   return(result);
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002db8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3314      	adds	r3, #20
 8002dc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002dc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e5      	bne.n	8002da2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	330c      	adds	r3, #12
 8002ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002df6:	61fa      	str	r2, [r7, #28]
 8002df8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	69b9      	ldr	r1, [r7, #24]
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	617b      	str	r3, [r7, #20]
   return(result);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e5      	bne.n	8002dd6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e0a:	e002      	b.n	8002e12 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002e0c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e0e:	f7fd fd09 	bl	8000824 <HAL_UART_TxCpltCallback>
}
 8002e12:	bf00      	nop
 8002e14:	3740      	adds	r7, #64	@ 0x40
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7ff ff85 	bl	8002d38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b09c      	sub	sp, #112	@ 0x70
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d172      	bne.n	8002f38 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002e52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e54:	2200      	movs	r2, #0
 8002e56:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e62:	e853 3f00 	ldrex	r3, [r3]
 8002e66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e78:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e7a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e5      	bne.n	8002e58 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3314      	adds	r3, #20
 8002e92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002eac:	647a      	str	r2, [r7, #68]	@ 0x44
 8002eae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002eb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	e853 3f00 	ldrex	r3, [r3]
 8002ece:	623b      	str	r3, [r7, #32]
   return(result);
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ed6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3314      	adds	r3, #20
 8002ede:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ee0:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee8:	e841 2300 	strex	r3, r2, [r1]
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e5      	bne.n	8002ec0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d119      	bne.n	8002f38 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	e853 3f00 	ldrex	r3, [r3]
 8002f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0310 	bic.w	r3, r3, #16
 8002f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	330c      	adds	r3, #12
 8002f22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f24:	61fa      	str	r2, [r7, #28]
 8002f26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	69b9      	ldr	r1, [r7, #24]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	e841 2300 	strex	r3, r2, [r1]
 8002f30:	617b      	str	r3, [r7, #20]
   return(result);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e5      	bne.n	8002f04 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d106      	bne.n	8002f54 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002f4e:	f7fd fc35 	bl	80007bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f52:	e002      	b.n	8002f5a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002f54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002f56:	f7ff fef8 	bl	8002d4a <HAL_UART_RxCpltCallback>
}
 8002f5a:	bf00      	nop
 8002f5c:	3770      	adds	r7, #112	@ 0x70
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d108      	bne.n	8002f90 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	4619      	mov	r1, r3
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7fd fc17 	bl	80007bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f8e:	e002      	b.n	8002f96 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff fee3 	bl	8002d5c <HAL_UART_RxHalfCpltCallback>
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b21      	cmp	r3, #33	@ 0x21
 8002fd0:	d108      	bne.n	8002fe4 <UART_DMAError+0x46>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002fde:	68b8      	ldr	r0, [r7, #8]
 8002fe0:	f000 f8c2 	bl	8003168 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b22      	cmp	r3, #34	@ 0x22
 8003004:	d108      	bne.n	8003018 <UART_DMAError+0x7a>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2200      	movs	r2, #0
 8003010:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003012:	68b8      	ldr	r0, [r7, #8]
 8003014:	f000 f8cf 	bl	80031b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003024:	68b8      	ldr	r0, [r7, #8]
 8003026:	f7ff fea2 	bl	8002d6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b098      	sub	sp, #96	@ 0x60
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2222      	movs	r2, #34	@ 0x22
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003060:	4a3e      	ldr	r2, [pc, #248]	@ (800315c <UART_Start_Receive_DMA+0x128>)
 8003062:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	4a3d      	ldr	r2, [pc, #244]	@ (8003160 <UART_Start_Receive_DMA+0x12c>)
 800306a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003070:	4a3c      	ldr	r2, [pc, #240]	@ (8003164 <UART_Start_Receive_DMA+0x130>)
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003078:	2200      	movs	r2, #0
 800307a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800307c:	f107 0308 	add.w	r3, r7, #8
 8003080:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3304      	adds	r3, #4
 800308c:	4619      	mov	r1, r3
 800308e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	f7fe faac 	bl	80015f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d019      	beq.n	80030ea <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	330c      	adds	r3, #12
 80030d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030d6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80030dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030de:	e841 2300 	strex	r3, r2, [r1]
 80030e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80030e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e5      	bne.n	80030b6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3314      	adds	r3, #20
 80030f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	657b      	str	r3, [r7, #84]	@ 0x54
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3314      	adds	r3, #20
 8003108:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800310a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800310c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003110:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003112:	e841 2300 	strex	r3, r2, [r1]
 8003116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1e5      	bne.n	80030ea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	617b      	str	r3, [r7, #20]
   return(result);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003134:	653b      	str	r3, [r7, #80]	@ 0x50
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3314      	adds	r3, #20
 800313c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800313e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6a39      	ldr	r1, [r7, #32]
 8003144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	61fb      	str	r3, [r7, #28]
   return(result);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e5      	bne.n	800311e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3760      	adds	r7, #96	@ 0x60
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	08002e37 	.word	0x08002e37
 8003160:	08002f63 	.word	0x08002f63
 8003164:	08002f9f 	.word	0x08002f9f

08003168 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	@ 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	330c      	adds	r3, #12
 8003176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	e853 3f00 	ldrex	r3, [r3]
 800317e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	330c      	adds	r3, #12
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	61ba      	str	r2, [r7, #24]
 8003192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	6979      	ldr	r1, [r7, #20]
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	613b      	str	r3, [r7, #16]
   return(result);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e5      	bne.n	8003170 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80031ac:	bf00      	nop
 80031ae:	3724      	adds	r7, #36	@ 0x24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b095      	sub	sp, #84	@ 0x54
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	330c      	adds	r3, #12
 80031dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031de:	643a      	str	r2, [r7, #64]	@ 0x40
 80031e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3314      	adds	r3, #20
 80031f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	61fb      	str	r3, [r7, #28]
   return(result);
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3314      	adds	r3, #20
 8003210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e5      	bne.n	80031f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	2b01      	cmp	r3, #1
 800322c:	d119      	bne.n	8003262 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	60bb      	str	r3, [r7, #8]
   return(result);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f023 0310 	bic.w	r3, r3, #16
 8003244:	647b      	str	r3, [r7, #68]	@ 0x44
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800324e:	61ba      	str	r2, [r7, #24]
 8003250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	6979      	ldr	r1, [r7, #20]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	613b      	str	r3, [r7, #16]
   return(result);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1e5      	bne.n	800322e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003270:	bf00      	nop
 8003272:	3754      	adds	r7, #84	@ 0x54
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003286:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7ff fd6a 	bl	8002d6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b21      	cmp	r3, #33	@ 0x21
 80032b4:	d13e      	bne.n	8003334 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032be:	d114      	bne.n	80032ea <UART_Transmit_IT+0x48>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d110      	bne.n	80032ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	1c9a      	adds	r2, r3, #2
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	621a      	str	r2, [r3, #32]
 80032e8:	e008      	b.n	80032fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	1c59      	adds	r1, r3, #1
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6211      	str	r1, [r2, #32]
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29b      	uxth	r3, r3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4619      	mov	r1, r3
 800330a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10f      	bne.n	8003330 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800331e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800332e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003356:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fd fa5f 	bl	8000824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08c      	sub	sp, #48	@ 0x30
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b22      	cmp	r3, #34	@ 0x22
 8003382:	f040 80ae 	bne.w	80034e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800338e:	d117      	bne.n	80033c0 <UART_Receive_IT+0x50>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d113      	bne.n	80033c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	1c9a      	adds	r2, r3, #2
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80033be:	e026      	b.n	800340e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d2:	d007      	beq.n	80033e4 <UART_Receive_IT+0x74>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <UART_Receive_IT+0x82>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e008      	b.n	8003404 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003402:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29b      	uxth	r3, r3
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	4619      	mov	r1, r3
 800341c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800341e:	2b00      	cmp	r3, #0
 8003420:	d15d      	bne.n	80034de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0220 	bic.w	r2, r2, #32
 8003430:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003440:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003464:	2b01      	cmp	r3, #1
 8003466:	d135      	bne.n	80034d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	330c      	adds	r3, #12
 8003474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	613b      	str	r3, [r7, #16]
   return(result);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f023 0310 	bic.w	r3, r3, #16
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348e:	623a      	str	r2, [r7, #32]
 8003490:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	69f9      	ldr	r1, [r7, #28]
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	61bb      	str	r3, [r7, #24]
   return(result);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e5      	bne.n	800346e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d10a      	bne.n	80034c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034ca:	4619      	mov	r1, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd f975 	bl	80007bc <HAL_UARTEx_RxEventCallback>
 80034d2:	e002      	b.n	80034da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff fc38 	bl	8002d4a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e002      	b.n	80034e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e000      	b.n	80034e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3730      	adds	r7, #48	@ 0x30
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003526:	f023 030c 	bic.w	r3, r3, #12
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	430b      	orrs	r3, r1
 8003532:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2c      	ldr	r2, [pc, #176]	@ (8003600 <UART_SetConfig+0x114>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d103      	bne.n	800355c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003554:	f7ff f80e 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	e002      	b.n	8003562 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800355c:	f7fe fff6 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 8003560:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009a      	lsls	r2, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	4a22      	ldr	r2, [pc, #136]	@ (8003604 <UART_SetConfig+0x118>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	0119      	lsls	r1, r3, #4
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009a      	lsls	r2, r3, #2
 800358c:	441a      	add	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	fbb2 f2f3 	udiv	r2, r2, r3
 8003598:	4b1a      	ldr	r3, [pc, #104]	@ (8003604 <UART_SetConfig+0x118>)
 800359a:	fba3 0302 	umull	r0, r3, r3, r2
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2064      	movs	r0, #100	@ 0x64
 80035a2:	fb00 f303 	mul.w	r3, r0, r3
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	3332      	adds	r3, #50	@ 0x32
 80035ac:	4a15      	ldr	r2, [pc, #84]	@ (8003604 <UART_SetConfig+0x118>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b8:	4419      	add	r1, r3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009a      	lsls	r2, r3, #2
 80035c4:	441a      	add	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <UART_SetConfig+0x118>)
 80035d2:	fba3 0302 	umull	r0, r3, r3, r2
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	2064      	movs	r0, #100	@ 0x64
 80035da:	fb00 f303 	mul.w	r3, r0, r3
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	3332      	adds	r3, #50	@ 0x32
 80035e4:	4a07      	ldr	r2, [pc, #28]	@ (8003604 <UART_SetConfig+0x118>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	f003 020f 	and.w	r2, r3, #15
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	440a      	add	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40013800 	.word	0x40013800
 8003604:	51eb851f 	.word	0x51eb851f

08003608 <memset>:
 8003608:	4603      	mov	r3, r0
 800360a:	4402      	add	r2, r0
 800360c:	4293      	cmp	r3, r2
 800360e:	d100      	bne.n	8003612 <memset+0xa>
 8003610:	4770      	bx	lr
 8003612:	f803 1b01 	strb.w	r1, [r3], #1
 8003616:	e7f9      	b.n	800360c <memset+0x4>

08003618 <__libc_init_array>:
 8003618:	b570      	push	{r4, r5, r6, lr}
 800361a:	2600      	movs	r6, #0
 800361c:	4d0c      	ldr	r5, [pc, #48]	@ (8003650 <__libc_init_array+0x38>)
 800361e:	4c0d      	ldr	r4, [pc, #52]	@ (8003654 <__libc_init_array+0x3c>)
 8003620:	1b64      	subs	r4, r4, r5
 8003622:	10a4      	asrs	r4, r4, #2
 8003624:	42a6      	cmp	r6, r4
 8003626:	d109      	bne.n	800363c <__libc_init_array+0x24>
 8003628:	f000 f828 	bl	800367c <_init>
 800362c:	2600      	movs	r6, #0
 800362e:	4d0a      	ldr	r5, [pc, #40]	@ (8003658 <__libc_init_array+0x40>)
 8003630:	4c0a      	ldr	r4, [pc, #40]	@ (800365c <__libc_init_array+0x44>)
 8003632:	1b64      	subs	r4, r4, r5
 8003634:	10a4      	asrs	r4, r4, #2
 8003636:	42a6      	cmp	r6, r4
 8003638:	d105      	bne.n	8003646 <__libc_init_array+0x2e>
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003640:	4798      	blx	r3
 8003642:	3601      	adds	r6, #1
 8003644:	e7ee      	b.n	8003624 <__libc_init_array+0xc>
 8003646:	f855 3b04 	ldr.w	r3, [r5], #4
 800364a:	4798      	blx	r3
 800364c:	3601      	adds	r6, #1
 800364e:	e7f2      	b.n	8003636 <__libc_init_array+0x1e>
 8003650:	080038c0 	.word	0x080038c0
 8003654:	080038c0 	.word	0x080038c0
 8003658:	080038c0 	.word	0x080038c0
 800365c:	080038c4 	.word	0x080038c4

08003660 <memcpy>:
 8003660:	440a      	add	r2, r1
 8003662:	4291      	cmp	r1, r2
 8003664:	f100 33ff 	add.w	r3, r0, #4294967295
 8003668:	d100      	bne.n	800366c <memcpy+0xc>
 800366a:	4770      	bx	lr
 800366c:	b510      	push	{r4, lr}
 800366e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003672:	4291      	cmp	r1, r2
 8003674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003678:	d1f9      	bne.n	800366e <memcpy+0xe>
 800367a:	bd10      	pop	{r4, pc}

0800367c <_init>:
 800367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367e:	bf00      	nop
 8003680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003682:	bc08      	pop	{r3}
 8003684:	469e      	mov	lr, r3
 8003686:	4770      	bx	lr

08003688 <_fini>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	bf00      	nop
 800368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368e:	bc08      	pop	{r3}
 8003690:	469e      	mov	lr, r3
 8003692:	4770      	bx	lr
