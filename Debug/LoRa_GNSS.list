
LoRa_GNSS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000348c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08003598  08003598  00004598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c4  080037c4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080037c4  080037c4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037c4  080037c4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c4  080037c4  000047c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037c8  080037c8  000047c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044d0  2000000c  080037d8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044dc  080037d8  000054dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095a9  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca1  00000000  00000000  0000e5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  00010280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b6  00000000  00000000  00010a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001664a  00000000  00000000  00010fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fbf  00000000  00000000  00027608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081c8e  00000000  00000000  000315c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3255  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c98  00000000  00000000  000b3298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000b4f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003580 	.word	0x08003580

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003580 	.word	0x08003580

0800014c <loraGnssMain>:
#include "main.h"

Global_t Glo_st = {0};

void loraGnssMain()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
//		UartDmaInit(&huart1, &hdma_usart1_rx, &Glo_st.usartDma1_st);
		UartDmaInit(&huart2, &hdma_usart2_rx, &Glo_st.usartDma2_st);
 8000150:	4a11      	ldr	r2, [pc, #68]	@ (8000198 <loraGnssMain+0x4c>)
 8000152:	4912      	ldr	r1, [pc, #72]	@ (800019c <loraGnssMain+0x50>)
 8000154:	4812      	ldr	r0, [pc, #72]	@ (80001a0 <loraGnssMain+0x54>)
 8000156:	f000 f985 	bl	8000464 <UartDmaInit>
		UartDmaInit(&huart3, &hdma_usart3_rx, &Glo_st.usartDma3_st);
 800015a:	4a12      	ldr	r2, [pc, #72]	@ (80001a4 <loraGnssMain+0x58>)
 800015c:	4912      	ldr	r1, [pc, #72]	@ (80001a8 <loraGnssMain+0x5c>)
 800015e:	4813      	ldr	r0, [pc, #76]	@ (80001ac <loraGnssMain+0x60>)
 8000160:	f000 f980 	bl	8000464 <UartDmaInit>

		Glo_st.lora_st.adres_u8 = 0x01;
 8000164:	4b12      	ldr	r3, [pc, #72]	@ (80001b0 <loraGnssMain+0x64>)
 8000166:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800016a:	2201      	movs	r2, #1
 800016c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		Glo_st.lora_st.kanal_u8 = 0x04;
 8000170:	4b0f      	ldr	r3, [pc, #60]	@ (80001b0 <loraGnssMain+0x64>)
 8000172:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000176:	2204      	movs	r2, #4
 8000178:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149

	while(1)
	{
		if(1 == Glo_st._50HzFlag_u8)
 800017c:	4b0c      	ldr	r3, [pc, #48]	@ (80001b0 <loraGnssMain+0x64>)
 800017e:	7a5b      	ldrb	r3, [r3, #9]
 8000180:	2b01      	cmp	r3, #1
 8000182:	d1fb      	bne.n	800017c <loraGnssMain+0x30>
		{
			Lora_veri_gonderme_cevrimi(&Glo_st.usartDma2_st, &Glo_st.veri_pkt_st, &Glo_st.lora_st);
 8000184:	4a0b      	ldr	r2, [pc, #44]	@ (80001b4 <loraGnssMain+0x68>)
 8000186:	490c      	ldr	r1, [pc, #48]	@ (80001b8 <loraGnssMain+0x6c>)
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <loraGnssMain+0x4c>)
 800018a:	f000 f905 	bl	8000398 <Lora_veri_gonderme_cevrimi>
//					Glo_st.lora_st.paket_hazir_u8 = 0;
//					Glo_st.usartDma3_st.txCallBackFlag_u8 = 0;
//				}
//			}

			Glo_st._50HzFlag_u8 = 0;
 800018e:	4b08      	ldr	r3, [pc, #32]	@ (80001b0 <loraGnssMain+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	725a      	strb	r2, [r3, #9]
		if(1 == Glo_st._50HzFlag_u8)
 8000194:	e7f2      	b.n	800017c <loraGnssMain+0x30>
 8000196:	bf00      	nop
 8000198:	20001444 	.word	0x20001444
 800019c:	200043c8 	.word	0x200043c8
 80001a0:	200042b0 	.word	0x200042b0
 80001a4:	20002854 	.word	0x20002854
 80001a8:	20004450 	.word	0x20004450
 80001ac:	200042f8 	.word	0x200042f8
 80001b0:	20000028 	.word	0x20000028
 80001b4:	20004170 	.word	0x20004170
 80001b8:	20003c64 	.word	0x20003c64

080001bc <veri_paketle>:
#include"rtcm_decoder.h"



void veri_paketle( uint8_t *data, uint8_t uzunluk, veri_paketi_t *veri_pkt )
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	460b      	mov	r3, r1
 80001c6:	607a      	str	r2, [r7, #4]
 80001c8:	72fb      	strb	r3, [r7, #11]
	static uint8_t durum_u8 = BASLANGIC_BAYT_1;
	uint16_t indeks_u16   = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	83fb      	strh	r3, [r7, #30]

	for( int i = 1; i < DURUM_SAYISI; i++ )
 80001ce:	2301      	movs	r3, #1
 80001d0:	61bb      	str	r3, [r7, #24]
 80001d2:	e07a      	b.n	80002ca <veri_paketle+0x10e>
	{
		switch( durum_u8 )
 80001d4:	4b41      	ldr	r3, [pc, #260]	@ (80002dc <veri_paketle+0x120>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	2b04      	cmp	r3, #4
 80001da:	d873      	bhi.n	80002c4 <veri_paketle+0x108>
 80001dc:	a201      	add	r2, pc, #4	@ (adr r2, 80001e4 <veri_paketle+0x28>)
 80001de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e2:	bf00      	nop
 80001e4:	080001f9 	.word	0x080001f9
 80001e8:	08000211 	.word	0x08000211
 80001ec:	08000229 	.word	0x08000229
 80001f0:	08000247 	.word	0x08000247
 80001f4:	08000279 	.word	0x08000279
		{
			case BASLANGIC_BAYT_1:
			{
				veri_pkt->data[indeks_u16++] = 0x4D;
 80001f8:	8bfb      	ldrh	r3, [r7, #30]
 80001fa:	1c5a      	adds	r2, r3, #1
 80001fc:	83fa      	strh	r2, [r7, #30]
 80001fe:	461a      	mov	r2, r3
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	224d      	movs	r2, #77	@ 0x4d
 8000206:	709a      	strb	r2, [r3, #2]
				durum_u8 =  BASLANGIC_BAYT_2;
 8000208:	4b34      	ldr	r3, [pc, #208]	@ (80002dc <veri_paketle+0x120>)
 800020a:	2201      	movs	r2, #1
 800020c:	701a      	strb	r2, [r3, #0]
				break;
 800020e:	e059      	b.n	80002c4 <veri_paketle+0x108>
			}
			case BASLANGIC_BAYT_2:
			{
				veri_pkt->data[indeks_u16++] = 0x26;
 8000210:	8bfb      	ldrh	r3, [r7, #30]
 8000212:	1c5a      	adds	r2, r3, #1
 8000214:	83fa      	strh	r2, [r7, #30]
 8000216:	461a      	mov	r2, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4413      	add	r3, r2
 800021c:	2226      	movs	r2, #38	@ 0x26
 800021e:	709a      	strb	r2, [r3, #2]
				durum_u8 =  UZUNLUK;
 8000220:	4b2e      	ldr	r3, [pc, #184]	@ (80002dc <veri_paketle+0x120>)
 8000222:	2202      	movs	r2, #2
 8000224:	701a      	strb	r2, [r3, #0]
				break;
 8000226:	e04d      	b.n	80002c4 <veri_paketle+0x108>
			}
			case UZUNLUK:
			{
				veri_pkt->data[indeks_u16++] = uzunluk;
 8000228:	8bfb      	ldrh	r3, [r7, #30]
 800022a:	1c5a      	adds	r2, r3, #1
 800022c:	83fa      	strh	r2, [r7, #30]
 800022e:	461a      	mov	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4413      	add	r3, r2
 8000234:	7afa      	ldrb	r2, [r7, #11]
 8000236:	709a      	strb	r2, [r3, #2]
				veri_pkt->veri_boyutu_u8 = uzunluk;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	7afa      	ldrb	r2, [r7, #11]
 800023c:	705a      	strb	r2, [r3, #1]

				durum_u8 =  DATA_AL;
 800023e:	4b27      	ldr	r3, [pc, #156]	@ (80002dc <veri_paketle+0x120>)
 8000240:	2203      	movs	r2, #3
 8000242:	701a      	strb	r2, [r3, #0]
				break;
 8000244:	e03e      	b.n	80002c4 <veri_paketle+0x108>
			}
			case DATA_AL:
			{
				for( int k=0; k < uzunluk; k++)
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]
 800024a:	e00d      	b.n	8000268 <veri_paketle+0xac>
				{
					veri_pkt->data[indeks_u16++] = data[k];
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	68fa      	ldr	r2, [r7, #12]
 8000250:	441a      	add	r2, r3
 8000252:	8bfb      	ldrh	r3, [r7, #30]
 8000254:	1c59      	adds	r1, r3, #1
 8000256:	83f9      	strh	r1, [r7, #30]
 8000258:	4619      	mov	r1, r3
 800025a:	7812      	ldrb	r2, [r2, #0]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	440b      	add	r3, r1
 8000260:	709a      	strb	r2, [r3, #2]
				for( int k=0; k < uzunluk; k++)
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	3301      	adds	r3, #1
 8000266:	617b      	str	r3, [r7, #20]
 8000268:	7afb      	ldrb	r3, [r7, #11]
 800026a:	697a      	ldr	r2, [r7, #20]
 800026c:	429a      	cmp	r2, r3
 800026e:	dbed      	blt.n	800024c <veri_paketle+0x90>
				}

				durum_u8 =  CRC_MSB;
 8000270:	4b1a      	ldr	r3, [pc, #104]	@ (80002dc <veri_paketle+0x120>)
 8000272:	2204      	movs	r2, #4
 8000274:	701a      	strb	r2, [r3, #0]
				break;
 8000276:	e025      	b.n	80002c4 <veri_paketle+0x108>
			}
			case CRC_MSB:
			{
				uint16_t tCrc_u16 = crc16_ccitt(&veri_pkt->data[3], indeks_u16-3);  //ayrı bir fonksiyon yap LORA başllangıç caseini kaldır
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	1d5a      	adds	r2, r3, #5
 800027c:	8bfb      	ldrh	r3, [r7, #30]
 800027e:	3b03      	subs	r3, #3
 8000280:	4619      	mov	r1, r3
 8000282:	4610      	mov	r0, r2
 8000284:	f000 f82c 	bl	80002e0 <crc16_ccitt>
 8000288:	4603      	mov	r3, r0
 800028a:	827b      	strh	r3, [r7, #18]

				veri_pkt->data[indeks_u16++]  = ((tCrc_u16 >> 8) & 0xFF);
 800028c:	8a7b      	ldrh	r3, [r7, #18]
 800028e:	0a1b      	lsrs	r3, r3, #8
 8000290:	b29a      	uxth	r2, r3
 8000292:	8bfb      	ldrh	r3, [r7, #30]
 8000294:	1c59      	adds	r1, r3, #1
 8000296:	83f9      	strh	r1, [r7, #30]
 8000298:	4619      	mov	r1, r3
 800029a:	b2d2      	uxtb	r2, r2
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	440b      	add	r3, r1
 80002a0:	709a      	strb	r2, [r3, #2]
				veri_pkt->data[indeks_u16]    = (tCrc_u16 & 0xFF);
 80002a2:	8bfb      	ldrh	r3, [r7, #30]
 80002a4:	8a7a      	ldrh	r2, [r7, #18]
 80002a6:	b2d1      	uxtb	r1, r2
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	4413      	add	r3, r2
 80002ac:	460a      	mov	r2, r1
 80002ae:	709a      	strb	r2, [r3, #2]
				veri_pkt->crc_u16 = tCrc_u16;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	8a7a      	ldrh	r2, [r7, #18]
 80002b4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

				durum_u8 =  BASLANGIC_BAYT_1;
 80002b8:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <veri_paketle+0x120>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]
				indeks_u16 = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	83fb      	strh	r3, [r7, #30]
				break;
 80002c2:	bf00      	nop
	for( int i = 1; i < DURUM_SAYISI; i++ )
 80002c4:	69bb      	ldr	r3, [r7, #24]
 80002c6:	3301      	adds	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
 80002ca:	69bb      	ldr	r3, [r7, #24]
 80002cc:	2b05      	cmp	r3, #5
 80002ce:	dd81      	ble.n	80001d4 <veri_paketle+0x18>
			}
		}
	}
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	3720      	adds	r7, #32
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20004264 	.word	0x20004264

080002e0 <crc16_ccitt>:
	}
}


uint16_t crc16_ccitt(const uint8_t* buffer, size_t size)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	81fb      	strh	r3, [r7, #14]
    while (size-- > 0)
 80002ee:	e013      	b.n	8000318 <crc16_ccitt+0x38>
    {
    	crc = (crc << 8) ^ ccitt_hash[((crc >> 8) ^ *(buffer++)) & 0x00FF];
 80002f0:	89fb      	ldrh	r3, [r7, #14]
 80002f2:	021b      	lsls	r3, r3, #8
 80002f4:	b21a      	sxth	r2, r3
 80002f6:	89fb      	ldrh	r3, [r7, #14]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	4618      	mov	r0, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	1c59      	adds	r1, r3, #1
 8000302:	6079      	str	r1, [r7, #4]
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	4043      	eors	r3, r0
 8000308:	b2db      	uxtb	r3, r3
 800030a:	4909      	ldr	r1, [pc, #36]	@ (8000330 <crc16_ccitt+0x50>)
 800030c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000310:	b21b      	sxth	r3, r3
 8000312:	4053      	eors	r3, r2
 8000314:	b21b      	sxth	r3, r3
 8000316:	81fb      	strh	r3, [r7, #14]
    while (size-- > 0)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	1e5a      	subs	r2, r3, #1
 800031c:	603a      	str	r2, [r7, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d1e6      	bne.n	80002f0 <crc16_ccitt+0x10>
    }
    return crc;
 8000322:	89fb      	ldrh	r3, [r7, #14]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	08003598 	.word	0x08003598

08000334 <Lora_paketle>:



void Lora_paketle(veri_paketi_t *pVeri_pkt, Lora_t *pLora_st)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
	pLora_st->data[0] = 0x00;
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	2200      	movs	r2, #0
 8000342:	709a      	strb	r2, [r3, #2]
	pLora_st->data[1] = pLora_st->adres_u8;
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	781a      	ldrb	r2, [r3, #0]
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	70da      	strb	r2, [r3, #3]
	pLora_st->data[2] = pLora_st->kanal_u8;
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	785a      	ldrb	r2, [r3, #1]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	711a      	strb	r2, [r3, #4]

	for(uint16_t i=0; i < (pVeri_pkt->veri_boyutu_u8+PROTOKOL_FAZLALIK); i++)
 8000354:	2300      	movs	r3, #0
 8000356:	81fb      	strh	r3, [r7, #14]
 8000358:	e00c      	b.n	8000374 <Lora_paketle+0x40>
	{
		pLora_st->data[3+i] = pVeri_pkt->data[i];
 800035a:	89fa      	ldrh	r2, [r7, #14]
 800035c:	89fb      	ldrh	r3, [r7, #14]
 800035e:	3303      	adds	r3, #3
 8000360:	6879      	ldr	r1, [r7, #4]
 8000362:	440a      	add	r2, r1
 8000364:	7891      	ldrb	r1, [r2, #2]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	4413      	add	r3, r2
 800036a:	460a      	mov	r2, r1
 800036c:	709a      	strb	r2, [r3, #2]
	for(uint16_t i=0; i < (pVeri_pkt->veri_boyutu_u8+PROTOKOL_FAZLALIK); i++)
 800036e:	89fb      	ldrh	r3, [r7, #14]
 8000370:	3301      	adds	r3, #1
 8000372:	81fb      	strh	r3, [r7, #14]
 8000374:	89fa      	ldrh	r2, [r7, #14]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	785b      	ldrb	r3, [r3, #1]
 800037a:	3305      	adds	r3, #5
 800037c:	429a      	cmp	r2, r3
 800037e:	d3ec      	bcc.n	800035a <Lora_paketle+0x26>
	}

	pLora_st->veri_boyutu_u8 = (pVeri_pkt->veri_boyutu_u8 +
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	785b      	ldrb	r3, [r3, #1]
			                    LORA_E22_FAZLALIK +
 8000384:	3308      	adds	r3, #8
 8000386:	b2da      	uxtb	r2, r3
	pLora_st->veri_boyutu_u8 = (pVeri_pkt->veri_boyutu_u8 +
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
							    PROTOKOL_FAZLALIK);
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <Lora_veri_gonderme_cevrimi>:



void Lora_veri_gonderme_cevrimi(Dma_t *pDma_st, veri_paketi_t *pVeri_pkt, Lora_t *pLora_st)
{
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b0a1      	sub	sp, #132	@ 0x84
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
    uint8_t buffer[PAKETLEME_MAKS_SAYISI + PROTOKOL_FAZLALIK + LORA_E22_FAZLALIK] = {0};
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	f107 0318 	add.w	r3, r7, #24
 80003ac:	2268      	movs	r2, #104	@ 0x68
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f003 f8ab 	bl	800350c <memset>
    static uint16_t indeks_u16 = 0;

    while(pDma_st->okunanVeriSayisi_u16 > 0)
 80003b6:	e02b      	b.n	8000410 <Lora_veri_gonderme_cevrimi+0x78>
    {
        buffer[indeks_u16++] = RingBufferdanVeriOku(pDma_st);
 80003b8:	4b29      	ldr	r3, [pc, #164]	@ (8000460 <Lora_veri_gonderme_cevrimi+0xc8>)
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	1c5a      	adds	r2, r3, #1
 80003be:	b291      	uxth	r1, r2
 80003c0:	4a27      	ldr	r2, [pc, #156]	@ (8000460 <Lora_veri_gonderme_cevrimi+0xc8>)
 80003c2:	8011      	strh	r1, [r2, #0]
 80003c4:	461c      	mov	r4, r3
 80003c6:	68f8      	ldr	r0, [r7, #12]
 80003c8:	f000 f875 	bl	80004b6 <RingBufferdanVeriOku>
 80003cc:	4603      	mov	r3, r0
 80003ce:	461a      	mov	r2, r3
 80003d0:	f104 0380 	add.w	r3, r4, #128	@ 0x80
 80003d4:	443b      	add	r3, r7
 80003d6:	f803 2c6c 	strb.w	r2, [r3, #-108]

        if(indeks_u16 >= PAKETLEME_MAKS_SAYISI)
 80003da:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <Lora_veri_gonderme_cevrimi+0xc8>)
 80003dc:	881b      	ldrh	r3, [r3, #0]
 80003de:	2b63      	cmp	r3, #99	@ 0x63
 80003e0:	d916      	bls.n	8000410 <Lora_veri_gonderme_cevrimi+0x78>
        {
            veri_paketle(buffer, PAKETLEME_MAKS_SAYISI, pVeri_pkt);
 80003e2:	f107 0314 	add.w	r3, r7, #20
 80003e6:	68ba      	ldr	r2, [r7, #8]
 80003e8:	2164      	movs	r1, #100	@ 0x64
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff fee6 	bl	80001bc <veri_paketle>
            Lora_paketle(pVeri_pkt, pLora_st);
 80003f0:	6879      	ldr	r1, [r7, #4]
 80003f2:	68b8      	ldr	r0, [r7, #8]
 80003f4:	f7ff ff9e 	bl	8000334 <Lora_paketle>

            DmaVeriGonder(pDma_st, pLora_st->data, pLora_st->veri_boyutu_u8);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	1c99      	adds	r1, r3, #2
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 8000402:	461a      	mov	r2, r3
 8000404:	68f8      	ldr	r0, [r7, #12]
 8000406:	f000 f8f5 	bl	80005f4 <DmaVeriGonder>

//            pLora_st->paket_hazir_u8 = 1;
            indeks_u16 = 0;
 800040a:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <Lora_veri_gonderme_cevrimi+0xc8>)
 800040c:	2200      	movs	r2, #0
 800040e:	801a      	strh	r2, [r3, #0]
    while(pDma_st->okunanVeriSayisi_u16 > 0)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000416:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1cc      	bne.n	80003b8 <Lora_veri_gonderme_cevrimi+0x20>
        }
    }

    if(indeks_u16 > 0)
 800041e:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <Lora_veri_gonderme_cevrimi+0xc8>)
 8000420:	881b      	ldrh	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d018      	beq.n	8000458 <Lora_veri_gonderme_cevrimi+0xc0>
    {
        veri_paketle(buffer, indeks_u16, pVeri_pkt);
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <Lora_veri_gonderme_cevrimi+0xc8>)
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	b2d9      	uxtb	r1, r3
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	68ba      	ldr	r2, [r7, #8]
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff fec2 	bl	80001bc <veri_paketle>
        Lora_paketle(pVeri_pkt, pLora_st);
 8000438:	6879      	ldr	r1, [r7, #4]
 800043a:	68b8      	ldr	r0, [r7, #8]
 800043c:	f7ff ff7a 	bl	8000334 <Lora_paketle>

        DmaVeriGonder(pDma_st, pLora_st->data, pLora_st->veri_boyutu_u8);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	1c99      	adds	r1, r3, #2
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 800044a:	461a      	mov	r2, r3
 800044c:	68f8      	ldr	r0, [r7, #12]
 800044e:	f000 f8d1 	bl	80005f4 <DmaVeriGonder>

//        pLora_st->paket_hazir_u8 = 1;
        indeks_u16 = 0;
 8000452:	4b03      	ldr	r3, [pc, #12]	@ (8000460 <Lora_veri_gonderme_cevrimi+0xc8>)
 8000454:	2200      	movs	r2, #0
 8000456:	801a      	strh	r2, [r3, #0]
    }
}
 8000458:	bf00      	nop
 800045a:	3784      	adds	r7, #132	@ 0x84
 800045c:	46bd      	mov	sp, r7
 800045e:	bd90      	pop	{r4, r7, pc}
 8000460:	20004266 	.word	0x20004266

08000464 <UartDmaInit>:




void UartDmaInit(UART_HandleTypeDef *pUart, DMA_HandleTypeDef *pDmaUartRx, Dma_t *pDma_st)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
    pDma_st->pUart = pUart;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	601a      	str	r2, [r3, #0]
    pDma_st->pDmaUartRx = pDmaUartRx;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	68ba      	ldr	r2, [r7, #8]
 800047a:	605a      	str	r2, [r3, #4]

    HAL_UART_Transmit_DMA(pUart, pDma_st->txBuffer_u8a, TX_BUFFER_BOYUT);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	3308      	adds	r3, #8
 8000480:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000484:	4619      	mov	r1, r3
 8000486:	68f8      	ldr	r0, [r7, #12]
 8000488:	f002 f878 	bl	800257c <HAL_UART_Transmit_DMA>

    HAL_UARTEx_ReceiveToIdle_DMA(pUart, pDma_st->rxBuffer_u8a, RX_BUFFER_BOYUT);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8000492:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000496:	4619      	mov	r1, r3
 8000498:	68f8      	ldr	r0, [r7, #12]
 800049a:	f002 f8df 	bl	800265c <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(pDmaUartRx, DMA_IT_HT);
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f022 0204 	bic.w	r2, r2, #4
 80004ac:	601a      	str	r2, [r3, #0]
}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <RingBufferdanVeriOku>:


uint8_t RingBufferdanVeriOku(Dma_t *pDma_st)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b085      	sub	sp, #20
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
    uint8_t veri = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	73fb      	strb	r3, [r7, #15]

    // Eğer okunan veri sayısı sıfırdan büyükse işlem yap
    if (pDma_st->okunanVeriSayisi_u16 > 0)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80004c8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d025      	beq.n	800051c <RingBufferdanVeriOku+0x66>
    {
        // Ring buffer'dan bir bayt veri oku
        veri = pDma_st->ringBuffer_u8a[pDma_st->eskiPoz_u16];
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80004d6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	@ 0x40a
 80004da:	461a      	mov	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4413      	add	r3, r2
 80004e0:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 80004e4:	73fb      	strb	r3, [r7, #15]

        // Eski pozisyonu güncelle ve wrap-around kontrolü yap
        pDma_st->eskiPoz_u16 = (pDma_st->eskiPoz_u16 + 1) % RING_BUFFER_BOYUT;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80004ec:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	@ 0x40a
 80004f0:	3301      	adds	r3, #1
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000500:	f8a3 240a 	strh.w	r2, [r3, #1034]	@ 0x40a

        // Okunan veri sayısını bir azalt
        pDma_st->okunanVeriSayisi_u16--;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800050a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 800050e:	3b01      	subs	r3, #1
 8000510:	b29a      	uxth	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000518:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
    }
    return veri;
 800051c:	7bfb      	ldrb	r3, [r7, #15]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <RingBufferYaz>:


void RingBufferYaz(Dma_t *pDma_st, uint16_t boyut_u16)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	807b      	strh	r3, [r7, #2]
    uint16_t eskiPozTemp = pDma_st->yeniPoz_u16; // Mevcut pozisyonu geçici bir değişkene kaydet
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800053a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 800053e:	81fb      	strh	r3, [r7, #14]

    if((eskiPozTemp + boyut_u16) > RING_BUFFER_BOYUT)
 8000540:	89fa      	ldrh	r2, [r7, #14]
 8000542:	887b      	ldrh	r3, [r7, #2]
 8000544:	4413      	add	r3, r2
 8000546:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800054a:	d929      	bls.n	80005a0 <RingBufferYaz+0x78>
    {
        uint16_t kalan_u16 = RING_BUFFER_BOYUT - eskiPozTemp;
 800054c:	89fb      	ldrh	r3, [r7, #14]
 800054e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000552:	81bb      	strh	r3, [r7, #12]
        memcpy((uint8_t *)pDma_st->ringBuffer_u8a + eskiPozTemp, pDma_st->rxBuffer_u8a, kalan_u16);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f603 4208 	addw	r2, r3, #3080	@ 0xc08
 800055a:	89fb      	ldrh	r3, [r7, #14]
 800055c:	18d0      	adds	r0, r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8000564:	89ba      	ldrh	r2, [r7, #12]
 8000566:	4619      	mov	r1, r3
 8000568:	f002 fffc 	bl	8003564 <memcpy>

        eskiPozTemp = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	81fb      	strh	r3, [r7, #14]
        memcpy((uint8_t *)pDma_st->ringBuffer_u8a, (uint8_t *)pDma_st->rxBuffer_u8a + kalan_u16, (boyut_u16 - kalan_u16));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f603 4008 	addw	r0, r3, #3080	@ 0xc08
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f503 6281 	add.w	r2, r3, #1032	@ 0x408
 800057c:	89bb      	ldrh	r3, [r7, #12]
 800057e:	18d1      	adds	r1, r2, r3
 8000580:	887a      	ldrh	r2, [r7, #2]
 8000582:	89bb      	ldrh	r3, [r7, #12]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	461a      	mov	r2, r3
 8000588:	f002 ffec 	bl	8003564 <memcpy>
        pDma_st->yeniPoz_u16 = (boyut_u16 - kalan_u16);
 800058c:	887a      	ldrh	r2, [r7, #2]
 800058e:	89bb      	ldrh	r3, [r7, #12]
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	b29a      	uxth	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800059a:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
 800059e:	e017      	b.n	80005d0 <RingBufferYaz+0xa8>
    }
    else
    {
        memcpy((uint8_t *)pDma_st->ringBuffer_u8a + eskiPozTemp, pDma_st->rxBuffer_u8a, boyut_u16);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f603 4208 	addw	r2, r3, #3080	@ 0xc08
 80005a6:	89fb      	ldrh	r3, [r7, #14]
 80005a8:	18d0      	adds	r0, r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80005b0:	887a      	ldrh	r2, [r7, #2]
 80005b2:	4619      	mov	r1, r3
 80005b4:	f002 ffd6 	bl	8003564 <memcpy>
        pDma_st->yeniPoz_u16 = (eskiPozTemp + boyut_u16) % RING_BUFFER_BOYUT;
 80005b8:	89fa      	ldrh	r2, [r7, #14]
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	4413      	add	r3, r2
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80005cc:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
    }

    pDma_st->okunanVeriSayisi_u16 += boyut_u16;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80005d6:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	4413      	add	r3, r2
 80005de:	b29a      	uxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80005e6:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <DmaVeriGonder>:


void DmaVeriGonder(Dma_t *pDma_st, uint8_t *pBuffer, uint16_t boyut_u16)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	4613      	mov	r3, r2
 8000600:	80fb      	strh	r3, [r7, #6]
	if(pDma_st->txCallBackFlag_u8)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000608:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 800060c:	2b00      	cmp	r3, #0
 800060e:	d011      	beq.n	8000634 <DmaVeriGonder+0x40>
	{
		HAL_UART_Transmit_DMA(pDma_st->pUart, pBuffer, boyut_u16);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	88fa      	ldrh	r2, [r7, #6]
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	4618      	mov	r0, r3
 800061a:	f001 ffaf 	bl	800257c <HAL_UART_Transmit_DMA>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800061e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000622:	4806      	ldr	r0, [pc, #24]	@ (800063c <DmaVeriGonder+0x48>)
 8000624:	f001 fb30 	bl	8001c88 <HAL_GPIO_TogglePin>

		pDma_st->txCallBackFlag_u8 = 0;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800062e:	2200      	movs	r2, #0
 8000630:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
	}
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40011000 	.word	0x40011000

08000640 <DmaRxKesme>:


void DmaRxKesme(Dma_t *pDma_st, uint16_t boyut_u16)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	807b      	strh	r3, [r7, #2]
    // Ring buffer'a veri yaz
    RingBufferYaz(pDma_st, boyut_u16);
 800064c:	887b      	ldrh	r3, [r7, #2]
 800064e:	4619      	mov	r1, r3
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff69 	bl	8000528 <RingBufferYaz>


    // UART DMA alımını yeniden başlat
    if (HAL_UARTEx_ReceiveToIdle_DMA(pDma_st->pUart, pDma_st->rxBuffer_u8a, RX_BUFFER_BOYUT) != HAL_OK)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8000660:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000664:	4619      	mov	r1, r3
 8000666:	f001 fff9 	bl	800265c <HAL_UARTEx_ReceiveToIdle_DMA>
    {

    }

    // Half Transfer Interrupt'ı devre dışı bırak
    __HAL_DMA_DISABLE_IT(pDma_st->pDmaUartRx, DMA_IT_HT);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f022 0204 	bic.w	r2, r2, #4
 800067c:	601a      	str	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0f      	ldr	r2, [pc, #60]	@ (80006d8 <HAL_UARTEx_RxEventCallback+0x50>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d104      	bne.n	80006a8 <HAL_UARTEx_RxEventCallback+0x20>
	{
		DmaRxKesme(&Glo_st.usartDma1_st, Size);
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	4619      	mov	r1, r3
 80006a2:	480e      	ldr	r0, [pc, #56]	@ (80006dc <HAL_UARTEx_RxEventCallback+0x54>)
 80006a4:	f7ff ffcc 	bl	8000640 <DmaRxKesme>
	}
	if (huart->Instance == USART2)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0c      	ldr	r2, [pc, #48]	@ (80006e0 <HAL_UARTEx_RxEventCallback+0x58>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d104      	bne.n	80006bc <HAL_UARTEx_RxEventCallback+0x34>
	{
		DmaRxKesme(&Glo_st.usartDma2_st, Size);
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	4619      	mov	r1, r3
 80006b6:	480b      	ldr	r0, [pc, #44]	@ (80006e4 <HAL_UARTEx_RxEventCallback+0x5c>)
 80006b8:	f7ff ffc2 	bl	8000640 <DmaRxKesme>
	}
	if (huart->Instance == USART3)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a09      	ldr	r2, [pc, #36]	@ (80006e8 <HAL_UARTEx_RxEventCallback+0x60>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d104      	bne.n	80006d0 <HAL_UARTEx_RxEventCallback+0x48>
	{
		DmaRxKesme(&Glo_st.usartDma3_st, Size);
 80006c6:	887b      	ldrh	r3, [r7, #2]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4808      	ldr	r0, [pc, #32]	@ (80006ec <HAL_UARTEx_RxEventCallback+0x64>)
 80006cc:	f7ff ffb8 	bl	8000640 <DmaRxKesme>
	}
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40013800 	.word	0x40013800
 80006dc:	20000034 	.word	0x20000034
 80006e0:	40004400 	.word	0x40004400
 80006e4:	20001444 	.word	0x20001444
 80006e8:	40004800 	.word	0x40004800
 80006ec:	20002854 	.word	0x20002854

080006f0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a11      	ldr	r2, [pc, #68]	@ (8000744 <HAL_UART_TxCpltCallback+0x54>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d105      	bne.n	800070e <HAL_UART_TxCpltCallback+0x1e>
	{
		Glo_st.usartDma1_st.txCallBackFlag_u8 = 1;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <HAL_UART_TxCpltCallback+0x58>)
 8000704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000708:	2201      	movs	r2, #1
 800070a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
	}
	if (huart->Instance == USART2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a0e      	ldr	r2, [pc, #56]	@ (800074c <HAL_UART_TxCpltCallback+0x5c>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d105      	bne.n	8000724 <HAL_UART_TxCpltCallback+0x34>
	{
		Glo_st.usartDma2_st.txCallBackFlag_u8 = 1;
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <HAL_UART_TxCpltCallback+0x58>)
 800071a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800071e:	2201      	movs	r2, #1
 8000720:	f883 282a 	strb.w	r2, [r3, #2090]	@ 0x82a
	}
	if (huart->Instance == USART3)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a09      	ldr	r2, [pc, #36]	@ (8000750 <HAL_UART_TxCpltCallback+0x60>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d105      	bne.n	800073a <HAL_UART_TxCpltCallback+0x4a>
	{
		Glo_st.usartDma3_st.txCallBackFlag_u8 = 1;
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <HAL_UART_TxCpltCallback+0x58>)
 8000730:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000734:	2201      	movs	r2, #1
 8000736:	f883 2c3a 	strb.w	r2, [r3, #3130]	@ 0xc3a
	}

}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	40013800 	.word	0x40013800
 8000748:	20000028 	.word	0x20000028
 800074c:	40004400 	.word	0x40004400
 8000750:	40004800 	.word	0x40004800

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fce8 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f80e 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f000 f916 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 8000764:	f000 f8ce 	bl	8000904 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000768:	f000 f84e 	bl	8000808 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800076c:	f000 f876 	bl	800085c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000770:	f000 f89e 	bl	80008b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  loraGnssMain();
 8000774:	f7ff fcea 	bl	800014c <loraGnssMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <main+0x24>

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b090      	sub	sp, #64	@ 0x40
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	2228      	movs	r2, #40	@ 0x28
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f002 febe 	bl	800350c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079e:	2301      	movs	r3, #1
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80007a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80007ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ae:	2301      	movs	r3, #1
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80007bc:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 80007c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fa78 	bl	8001cbc <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80007d2:	f000 f959 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2102      	movs	r1, #2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fce5 	bl	80021c0 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007fc:	f000 f944 	bl	8000a88 <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3740      	adds	r7, #64	@ 0x40
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <MX_USART1_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 8000840:	f001 fe4c 	bl	80024dc <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f91d 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20004268 	.word	0x20004268
 8000858:	40013800 	.word	0x40013800

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_USART2_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000894:	f001 fe22 	bl	80024dc <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800089e:	f000 f8f3 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200042b0 	.word	0x200042b0
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_USART3_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <MX_USART3_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_USART3_UART_Init+0x4c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_USART3_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_USART3_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_USART3_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_USART3_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_USART3_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_USART3_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_USART3_UART_Init+0x4c>)
 80008e8:	f001 fdf8 	bl	80024dc <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f8c9 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200042f8 	.word	0x200042f8
 8000900:	40004800 	.word	0x40004800

08000904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090a:	4b20      	ldr	r3, [pc, #128]	@ (800098c <MX_DMA_Init+0x88>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a1f      	ldr	r2, [pc, #124]	@ (800098c <MX_DMA_Init+0x88>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6153      	str	r3, [r2, #20]
 8000916:	4b1d      	ldr	r3, [pc, #116]	@ (800098c <MX_DMA_Init+0x88>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	200c      	movs	r0, #12
 8000928:	f000 fd39 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800092c:	200c      	movs	r0, #12
 800092e:	f000 fd52 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	200d      	movs	r0, #13
 8000938:	f000 fd31 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800093c:	200d      	movs	r0, #13
 800093e:	f000 fd4a 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	200e      	movs	r0, #14
 8000948:	f000 fd29 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800094c:	200e      	movs	r0, #14
 800094e:	f000 fd42 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	200f      	movs	r0, #15
 8000958:	f000 fd21 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800095c:	200f      	movs	r0, #15
 800095e:	f000 fd3a 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2010      	movs	r0, #16
 8000968:	f000 fd19 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800096c:	2010      	movs	r0, #16
 800096e:	f000 fd32 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2011      	movs	r0, #17
 8000978:	f000 fd11 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800097c:	2011      	movs	r0, #17
 800097e:	f000 fd2a 	bl	80013d6 <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a4:	4b35      	ldr	r3, [pc, #212]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a34      	ldr	r2, [pc, #208]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b32      	ldr	r3, [pc, #200]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0310 	and.w	r3, r3, #16
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009bc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a2e      	ldr	r2, [pc, #184]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009c2:	f043 0320 	orr.w	r3, r3, #32
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0320 	and.w	r3, r3, #32
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b29      	ldr	r3, [pc, #164]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a28      	ldr	r2, [pc, #160]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b26      	ldr	r3, [pc, #152]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	4b23      	ldr	r3, [pc, #140]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a22      	ldr	r2, [pc, #136]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <MX_GPIO_Init+0xec>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0308 	and.w	r3, r3, #8
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a0a:	481d      	ldr	r0, [pc, #116]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 8000a0c:	f001 f924 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin_Pin|M0_Pin_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000a16:	481b      	ldr	r0, [pc, #108]	@ (8000a84 <MX_GPIO_Init+0xf4>)
 8000a18:	f001 f91e 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	4812      	ldr	r0, [pc, #72]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 8000a36:	f000 ff8b 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin_Pin M0_Pin_Pin */
  GPIO_InitStruct.Pin = M1_Pin_Pin|M0_Pin_Pin;
 8000a3a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	4619      	mov	r1, r3
 8000a52:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <MX_GPIO_Init+0xf4>)
 8000a54:	f000 ff7c 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : Aux_pin_Pin */
  GPIO_InitStruct.Pin = Aux_pin_Pin;
 8000a58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Aux_pin_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_GPIO_Init+0xf4>)
 8000a6e:	f000 ff6f 	bl	8001950 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a72:	bf00      	nop
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40011000 	.word	0x40011000
 8000a84:	40010c00 	.word	0x40010c00

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_MspInit+0x5c>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4a14      	ldr	r2, [pc, #80]	@ (8000af0 <HAL_MspInit+0x5c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6193      	str	r3, [r2, #24]
 8000aa6:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_MspInit+0x5c>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <HAL_MspInit+0x5c>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8000af0 <HAL_MspInit+0x5c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <HAL_MspInit+0x5c>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <HAL_MspInit+0x60>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <HAL_MspInit+0x60>)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010000 	.word	0x40010000

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	@ 0x30
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a8c      	ldr	r2, [pc, #560]	@ (8000d44 <HAL_UART_MspInit+0x24c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	f040 8088 	bne.w	8000c2a <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b1a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	4b88      	ldr	r3, [pc, #544]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b85      	ldr	r3, [pc, #532]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a84      	ldr	r2, [pc, #528]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b82      	ldr	r3, [pc, #520]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0320 	add.w	r3, r7, #32
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	487b      	ldr	r0, [pc, #492]	@ (8000d4c <HAL_UART_MspInit+0x254>)
 8000b60:	f000 fef6 	bl	8001950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	4619      	mov	r1, r3
 8000b78:	4874      	ldr	r0, [pc, #464]	@ (8000d4c <HAL_UART_MspInit+0x254>)
 8000b7a:	f000 fee9 	bl	8001950 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000b7e:	4b74      	ldr	r3, [pc, #464]	@ (8000d50 <HAL_UART_MspInit+0x258>)
 8000b80:	4a74      	ldr	r2, [pc, #464]	@ (8000d54 <HAL_UART_MspInit+0x25c>)
 8000b82:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b84:	4b72      	ldr	r3, [pc, #456]	@ (8000d50 <HAL_UART_MspInit+0x258>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8a:	4b71      	ldr	r3, [pc, #452]	@ (8000d50 <HAL_UART_MspInit+0x258>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	4b6f      	ldr	r3, [pc, #444]	@ (8000d50 <HAL_UART_MspInit+0x258>)
 8000b92:	2280      	movs	r2, #128	@ 0x80
 8000b94:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b96:	4b6e      	ldr	r3, [pc, #440]	@ (8000d50 <HAL_UART_MspInit+0x258>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b9c:	4b6c      	ldr	r3, [pc, #432]	@ (8000d50 <HAL_UART_MspInit+0x258>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ba2:	4b6b      	ldr	r3, [pc, #428]	@ (8000d50 <HAL_UART_MspInit+0x258>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ba8:	4b69      	ldr	r3, [pc, #420]	@ (8000d50 <HAL_UART_MspInit+0x258>)
 8000baa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bb0:	4867      	ldr	r0, [pc, #412]	@ (8000d50 <HAL_UART_MspInit+0x258>)
 8000bb2:	f000 fc2b 	bl	800140c <HAL_DMA_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000bbc:	f7ff ff64 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a63      	ldr	r2, [pc, #396]	@ (8000d50 <HAL_UART_MspInit+0x258>)
 8000bc4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bc6:	4a62      	ldr	r2, [pc, #392]	@ (8000d50 <HAL_UART_MspInit+0x258>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000bcc:	4b62      	ldr	r3, [pc, #392]	@ (8000d58 <HAL_UART_MspInit+0x260>)
 8000bce:	4a63      	ldr	r2, [pc, #396]	@ (8000d5c <HAL_UART_MspInit+0x264>)
 8000bd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bd2:	4b61      	ldr	r3, [pc, #388]	@ (8000d58 <HAL_UART_MspInit+0x260>)
 8000bd4:	2210      	movs	r2, #16
 8000bd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd8:	4b5f      	ldr	r3, [pc, #380]	@ (8000d58 <HAL_UART_MspInit+0x260>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bde:	4b5e      	ldr	r3, [pc, #376]	@ (8000d58 <HAL_UART_MspInit+0x260>)
 8000be0:	2280      	movs	r2, #128	@ 0x80
 8000be2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000be4:	4b5c      	ldr	r3, [pc, #368]	@ (8000d58 <HAL_UART_MspInit+0x260>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bea:	4b5b      	ldr	r3, [pc, #364]	@ (8000d58 <HAL_UART_MspInit+0x260>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000bf0:	4b59      	ldr	r3, [pc, #356]	@ (8000d58 <HAL_UART_MspInit+0x260>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <HAL_UART_MspInit+0x260>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000bfc:	4856      	ldr	r0, [pc, #344]	@ (8000d58 <HAL_UART_MspInit+0x260>)
 8000bfe:	f000 fc05 	bl	800140c <HAL_DMA_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8000c08:	f7ff ff3e 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a52      	ldr	r2, [pc, #328]	@ (8000d58 <HAL_UART_MspInit+0x260>)
 8000c10:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c12:	4a51      	ldr	r2, [pc, #324]	@ (8000d58 <HAL_UART_MspInit+0x260>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2025      	movs	r0, #37	@ 0x25
 8000c1e:	f000 fbbe 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c22:	2025      	movs	r0, #37	@ 0x25
 8000c24:	f000 fbd7 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c28:	e131      	b.n	8000e8e <HAL_UART_MspInit+0x396>
  else if(huart->Instance==USART2)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a4c      	ldr	r2, [pc, #304]	@ (8000d60 <HAL_UART_MspInit+0x268>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	f040 809f 	bne.w	8000d74 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c36:	4b44      	ldr	r3, [pc, #272]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a43      	ldr	r2, [pc, #268]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b41      	ldr	r3, [pc, #260]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a3d      	ldr	r2, [pc, #244]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d48 <HAL_UART_MspInit+0x250>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c66:	2304      	movs	r3, #4
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0320 	add.w	r3, r7, #32
 8000c76:	4619      	mov	r1, r3
 8000c78:	4834      	ldr	r0, [pc, #208]	@ (8000d4c <HAL_UART_MspInit+0x254>)
 8000c7a:	f000 fe69 	bl	8001950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0320 	add.w	r3, r7, #32
 8000c8e:	4619      	mov	r1, r3
 8000c90:	482e      	ldr	r0, [pc, #184]	@ (8000d4c <HAL_UART_MspInit+0x254>)
 8000c92:	f000 fe5d 	bl	8001950 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c96:	4b33      	ldr	r3, [pc, #204]	@ (8000d64 <HAL_UART_MspInit+0x26c>)
 8000c98:	4a33      	ldr	r2, [pc, #204]	@ (8000d68 <HAL_UART_MspInit+0x270>)
 8000c9a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9c:	4b31      	ldr	r3, [pc, #196]	@ (8000d64 <HAL_UART_MspInit+0x26c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b30      	ldr	r3, [pc, #192]	@ (8000d64 <HAL_UART_MspInit+0x26c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d64 <HAL_UART_MspInit+0x26c>)
 8000caa:	2280      	movs	r2, #128	@ 0x80
 8000cac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cae:	4b2d      	ldr	r3, [pc, #180]	@ (8000d64 <HAL_UART_MspInit+0x26c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d64 <HAL_UART_MspInit+0x26c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000cba:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <HAL_UART_MspInit+0x26c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000cc0:	4b28      	ldr	r3, [pc, #160]	@ (8000d64 <HAL_UART_MspInit+0x26c>)
 8000cc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cc8:	4826      	ldr	r0, [pc, #152]	@ (8000d64 <HAL_UART_MspInit+0x26c>)
 8000cca:	f000 fb9f 	bl	800140c <HAL_DMA_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8000cd4:	f7ff fed8 	bl	8000a88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a22      	ldr	r2, [pc, #136]	@ (8000d64 <HAL_UART_MspInit+0x26c>)
 8000cdc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cde:	4a21      	ldr	r2, [pc, #132]	@ (8000d64 <HAL_UART_MspInit+0x26c>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000ce4:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <HAL_UART_MspInit+0x274>)
 8000ce6:	4a22      	ldr	r2, [pc, #136]	@ (8000d70 <HAL_UART_MspInit+0x278>)
 8000ce8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cea:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <HAL_UART_MspInit+0x274>)
 8000cec:	2210      	movs	r2, #16
 8000cee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d6c <HAL_UART_MspInit+0x274>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <HAL_UART_MspInit+0x274>)
 8000cf8:	2280      	movs	r2, #128	@ 0x80
 8000cfa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <HAL_UART_MspInit+0x274>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <HAL_UART_MspInit+0x274>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <HAL_UART_MspInit+0x274>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <HAL_UART_MspInit+0x274>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d14:	4815      	ldr	r0, [pc, #84]	@ (8000d6c <HAL_UART_MspInit+0x274>)
 8000d16:	f000 fb79 	bl	800140c <HAL_DMA_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8000d20:	f7ff feb2 	bl	8000a88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a11      	ldr	r2, [pc, #68]	@ (8000d6c <HAL_UART_MspInit+0x274>)
 8000d28:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d2a:	4a10      	ldr	r2, [pc, #64]	@ (8000d6c <HAL_UART_MspInit+0x274>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2026      	movs	r0, #38	@ 0x26
 8000d36:	f000 fb32 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d3a:	2026      	movs	r0, #38	@ 0x26
 8000d3c:	f000 fb4b 	bl	80013d6 <HAL_NVIC_EnableIRQ>
}
 8000d40:	e0a5      	b.n	8000e8e <HAL_UART_MspInit+0x396>
 8000d42:	bf00      	nop
 8000d44:	40013800 	.word	0x40013800
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	20004340 	.word	0x20004340
 8000d54:	40020058 	.word	0x40020058
 8000d58:	20004384 	.word	0x20004384
 8000d5c:	40020044 	.word	0x40020044
 8000d60:	40004400 	.word	0x40004400
 8000d64:	200043c8 	.word	0x200043c8
 8000d68:	4002006c 	.word	0x4002006c
 8000d6c:	2000440c 	.word	0x2000440c
 8000d70:	40020080 	.word	0x40020080
  else if(huart->Instance==USART3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a47      	ldr	r2, [pc, #284]	@ (8000e98 <HAL_UART_MspInit+0x3a0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	f040 8087 	bne.w	8000e8e <HAL_UART_MspInit+0x396>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d80:	4b46      	ldr	r3, [pc, #280]	@ (8000e9c <HAL_UART_MspInit+0x3a4>)
 8000d82:	69db      	ldr	r3, [r3, #28]
 8000d84:	4a45      	ldr	r2, [pc, #276]	@ (8000e9c <HAL_UART_MspInit+0x3a4>)
 8000d86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d8a:	61d3      	str	r3, [r2, #28]
 8000d8c:	4b43      	ldr	r3, [pc, #268]	@ (8000e9c <HAL_UART_MspInit+0x3a4>)
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b40      	ldr	r3, [pc, #256]	@ (8000e9c <HAL_UART_MspInit+0x3a4>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8000e9c <HAL_UART_MspInit+0x3a4>)
 8000d9e:	f043 0308 	orr.w	r3, r3, #8
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b3d      	ldr	r3, [pc, #244]	@ (8000e9c <HAL_UART_MspInit+0x3a4>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0308 	and.w	r3, r3, #8
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000db0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4836      	ldr	r0, [pc, #216]	@ (8000ea0 <HAL_UART_MspInit+0x3a8>)
 8000dc6:	f000 fdc3 	bl	8001950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0320 	add.w	r3, r7, #32
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4830      	ldr	r0, [pc, #192]	@ (8000ea0 <HAL_UART_MspInit+0x3a8>)
 8000de0:	f000 fdb6 	bl	8001950 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000de4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea4 <HAL_UART_MspInit+0x3ac>)
 8000de6:	4a30      	ldr	r2, [pc, #192]	@ (8000ea8 <HAL_UART_MspInit+0x3b0>)
 8000de8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea4 <HAL_UART_MspInit+0x3ac>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <HAL_UART_MspInit+0x3ac>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df6:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea4 <HAL_UART_MspInit+0x3ac>)
 8000df8:	2280      	movs	r2, #128	@ 0x80
 8000dfa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <HAL_UART_MspInit+0x3ac>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e02:	4b28      	ldr	r3, [pc, #160]	@ (8000ea4 <HAL_UART_MspInit+0x3ac>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000e08:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <HAL_UART_MspInit+0x3ac>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ea4 <HAL_UART_MspInit+0x3ac>)
 8000e10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e16:	4823      	ldr	r0, [pc, #140]	@ (8000ea4 <HAL_UART_MspInit+0x3ac>)
 8000e18:	f000 faf8 	bl	800140c <HAL_DMA_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_UART_MspInit+0x32e>
      Error_Handler();
 8000e22:	f7ff fe31 	bl	8000a88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea4 <HAL_UART_MspInit+0x3ac>)
 8000e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea4 <HAL_UART_MspInit+0x3ac>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <HAL_UART_MspInit+0x3b4>)
 8000e34:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb0 <HAL_UART_MspInit+0x3b8>)
 8000e36:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <HAL_UART_MspInit+0x3b4>)
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <HAL_UART_MspInit+0x3b4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e44:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <HAL_UART_MspInit+0x3b4>)
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <HAL_UART_MspInit+0x3b4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e50:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <HAL_UART_MspInit+0x3b4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <HAL_UART_MspInit+0x3b4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <HAL_UART_MspInit+0x3b4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e62:	4812      	ldr	r0, [pc, #72]	@ (8000eac <HAL_UART_MspInit+0x3b4>)
 8000e64:	f000 fad2 	bl	800140c <HAL_DMA_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_UART_MspInit+0x37a>
      Error_Handler();
 8000e6e:	f7ff fe0b 	bl	8000a88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <HAL_UART_MspInit+0x3b4>)
 8000e76:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e78:	4a0c      	ldr	r2, [pc, #48]	@ (8000eac <HAL_UART_MspInit+0x3b4>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2027      	movs	r0, #39	@ 0x27
 8000e84:	f000 fa8b 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e88:	2027      	movs	r0, #39	@ 0x27
 8000e8a:	f000 faa4 	bl	80013d6 <HAL_NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3730      	adds	r7, #48	@ 0x30
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40004800 	.word	0x40004800
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010c00 	.word	0x40010c00
 8000ea4:	20004450 	.word	0x20004450
 8000ea8:	40020030 	.word	0x40020030
 8000eac:	20004494 	.word	0x20004494
 8000eb0:	4002001c 	.word	0x4002001c

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <NMI_Handler+0x4>

08000ebc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <MemManage_Handler+0x4>

08000ecc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000edc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f958 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Glo_st.sayac_u32++;
 8000f08:	4b41      	ldr	r3, [pc, #260]	@ (8001010 <SysTick_Handler+0x110>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a40      	ldr	r2, [pc, #256]	@ (8001010 <SysTick_Handler+0x110>)
 8000f10:	6013      	str	r3, [r2, #0]

	if( (Glo_st.sayac_u32 % 1000U) == 0 )
 8000f12:	4b3f      	ldr	r3, [pc, #252]	@ (8001010 <SysTick_Handler+0x110>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b3f      	ldr	r3, [pc, #252]	@ (8001014 <SysTick_Handler+0x114>)
 8000f18:	fba3 1302 	umull	r1, r3, r3, r2
 8000f1c:	099b      	lsrs	r3, r3, #6
 8000f1e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f22:	fb01 f303 	mul.w	r3, r1, r3
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <SysTick_Handler+0x32>
	{
		Glo_st._1HzFlag_u8 = 1;
 8000f2c:	4b38      	ldr	r3, [pc, #224]	@ (8001010 <SysTick_Handler+0x110>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	711a      	strb	r2, [r3, #4]
	}
	if( (Glo_st.sayac_u32 % 500U) == 0 )
 8000f32:	4b37      	ldr	r3, [pc, #220]	@ (8001010 <SysTick_Handler+0x110>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b37      	ldr	r3, [pc, #220]	@ (8001014 <SysTick_Handler+0x114>)
 8000f38:	fba3 1302 	umull	r1, r3, r3, r2
 8000f3c:	095b      	lsrs	r3, r3, #5
 8000f3e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f42:	fb01 f303 	mul.w	r3, r1, r3
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <SysTick_Handler+0x52>
	{
		Glo_st._2HzFlag_u8 = 1;
 8000f4c:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <SysTick_Handler+0x110>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	715a      	strb	r2, [r3, #5]
	}
	if( (Glo_st.sayac_u32 % 200U) == 0 )
 8000f52:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <SysTick_Handler+0x110>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b30      	ldr	r3, [pc, #192]	@ (8001018 <SysTick_Handler+0x118>)
 8000f58:	fba3 1302 	umull	r1, r3, r3, r2
 8000f5c:	099b      	lsrs	r3, r3, #6
 8000f5e:	21c8      	movs	r1, #200	@ 0xc8
 8000f60:	fb01 f303 	mul.w	r3, r1, r3
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d102      	bne.n	8000f70 <SysTick_Handler+0x70>
	{
		Glo_st._5HzFlag_u8 = 1;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	@ (8001010 <SysTick_Handler+0x110>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	719a      	strb	r2, [r3, #6]
	}
	if( (Glo_st.sayac_u32 % 100U) == 0 )
 8000f70:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <SysTick_Handler+0x110>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b28      	ldr	r3, [pc, #160]	@ (8001018 <SysTick_Handler+0x118>)
 8000f76:	fba3 1302 	umull	r1, r3, r3, r2
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2164      	movs	r1, #100	@ 0x64
 8000f7e:	fb01 f303 	mul.w	r3, r1, r3
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <SysTick_Handler+0x8e>
	{
		Glo_st._10HzFlag_u8 = 1;
 8000f88:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <SysTick_Handler+0x110>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	71da      	strb	r2, [r3, #7]
	}
	if( (Glo_st.sayac_u32 % 50U) == 0 )
 8000f8e:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <SysTick_Handler+0x110>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <SysTick_Handler+0x118>)
 8000f94:	fba3 1302 	umull	r1, r3, r3, r2
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	2132      	movs	r1, #50	@ 0x32
 8000f9c:	fb01 f303 	mul.w	r3, r1, r3
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <SysTick_Handler+0xac>
	{
		Glo_st._20HzFlag_u8 = 1;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <SysTick_Handler+0x110>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	721a      	strb	r2, [r3, #8]
	}
	if( (Glo_st.sayac_u32 % 20U) == 0 )
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <SysTick_Handler+0x110>)
 8000fae:	6819      	ldr	r1, [r3, #0]
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <SysTick_Handler+0x11c>)
 8000fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8000fb6:	091a      	lsrs	r2, r3, #4
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	1aca      	subs	r2, r1, r3
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	d102      	bne.n	8000fcc <SysTick_Handler+0xcc>
	{
		Glo_st._50HzFlag_u8 = 1;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <SysTick_Handler+0x110>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	725a      	strb	r2, [r3, #9]
	}
	if( (Glo_st.sayac_u32 % 10U) == 0 )
 8000fcc:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <SysTick_Handler+0x110>)
 8000fce:	6819      	ldr	r1, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <SysTick_Handler+0x11c>)
 8000fd2:	fba3 2301 	umull	r2, r3, r3, r1
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	1aca      	subs	r2, r1, r3
 8000fe2:	2a00      	cmp	r2, #0
 8000fe4:	d102      	bne.n	8000fec <SysTick_Handler+0xec>
	{
		Glo_st._100HzFlag_u8 = 1;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <SysTick_Handler+0x110>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	729a      	strb	r2, [r3, #10]
	}
	if( (Glo_st.sayac_u32 % 5U) == 0 )
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <SysTick_Handler+0x110>)
 8000fee:	6819      	ldr	r1, [r3, #0]
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <SysTick_Handler+0x11c>)
 8000ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ff6:	089a      	lsrs	r2, r3, #2
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	1aca      	subs	r2, r1, r3
 8001000:	2a00      	cmp	r2, #0
 8001002:	d102      	bne.n	800100a <SysTick_Handler+0x10a>
	{
		Glo_st._200HzFlag_u8 = 1;
 8001004:	4b02      	ldr	r3, [pc, #8]	@ (8001010 <SysTick_Handler+0x110>)
 8001006:	2201      	movs	r2, #1
 8001008:	72da      	strb	r2, [r3, #11]
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000028 	.word	0x20000028
 8001014:	10624dd3 	.word	0x10624dd3
 8001018:	51eb851f 	.word	0x51eb851f
 800101c:	cccccccd 	.word	0xcccccccd

08001020 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <DMA1_Channel2_IRQHandler+0x10>)
 8001026:	f000 fb5f 	bl	80016e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20004494 	.word	0x20004494

08001034 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <DMA1_Channel3_IRQHandler+0x10>)
 800103a:	f000 fb55 	bl	80016e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20004450 	.word	0x20004450

08001048 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <DMA1_Channel4_IRQHandler+0x10>)
 800104e:	f000 fb4b 	bl	80016e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20004384 	.word	0x20004384

0800105c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <DMA1_Channel5_IRQHandler+0x10>)
 8001062:	f000 fb41 	bl	80016e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20004340 	.word	0x20004340

08001070 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <DMA1_Channel6_IRQHandler+0x10>)
 8001076:	f000 fb37 	bl	80016e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200043c8 	.word	0x200043c8

08001084 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <DMA1_Channel7_IRQHandler+0x10>)
 800108a:	f000 fb2d 	bl	80016e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000440c 	.word	0x2000440c

08001098 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <USART1_IRQHandler+0x10>)
 800109e:	f001 fb3b 	bl	8002718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20004268 	.word	0x20004268

080010ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <USART2_IRQHandler+0x10>)
 80010b2:	f001 fb31 	bl	8002718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200042b0 	.word	0x200042b0

080010c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <USART3_IRQHandler+0x10>)
 80010c6:	f001 fb27 	bl	8002718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200042f8 	.word	0x200042f8

080010d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e0:	f7ff fff8 	bl	80010d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e4:	480b      	ldr	r0, [pc, #44]	@ (8001114 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010e6:	490c      	ldr	r1, [pc, #48]	@ (8001118 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010e8:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a09      	ldr	r2, [pc, #36]	@ (8001120 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010fc:	4c09      	ldr	r4, [pc, #36]	@ (8001124 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110a:	f002 fa07 	bl	800351c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110e:	f7ff fb21 	bl	8000754 <main>
  bx lr
 8001112:	4770      	bx	lr
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800111c:	080037cc 	.word	0x080037cc
  ldr r2, =_sbss
 8001120:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001124:	200044dc 	.word	0x200044dc

08001128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_2_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <HAL_Init+0x28>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	@ (8001154 <HAL_Init+0x28>)
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f923 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	200f      	movs	r0, #15
 8001144:	f000 f808 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fca4 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40022000 	.word	0x40022000

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_InitTick+0x54>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <HAL_InitTick+0x58>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f93b 	bl	80013f2 <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00e      	b.n	80011a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80a      	bhi.n	80011a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f903 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001198:	4a06      	ldr	r2, [pc, #24]	@ (80011b4 <HAL_InitTick+0x5c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_IncTick+0x1c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_IncTick+0x20>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a03      	ldr	r2, [pc, #12]	@ (80011d8 <HAL_IncTick+0x20>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000008 	.word	0x20000008
 80011d8:	200044d8 	.word	0x200044d8

080011dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b02      	ldr	r3, [pc, #8]	@ (80011ec <HAL_GetTick+0x10>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	200044d8 	.word	0x200044d8

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800121c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4906      	ldr	r1, [pc, #24]	@ (8001288 <__NVIC_EnableIRQ+0x34>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	@ (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	@ (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	@ 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	@ 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff90 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff2d 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff42 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff90 	bl	80012e0 <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5f 	bl	800128c <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff35 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffa2 	bl	8001344 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e043      	b.n	80014aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <HAL_DMA_Init+0xa8>)
 800142a:	4413      	add	r3, r2
 800142c:	4a22      	ldr	r2, [pc, #136]	@ (80014b8 <HAL_DMA_Init+0xac>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	009a      	lsls	r2, r3, #2
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a1f      	ldr	r2, [pc, #124]	@ (80014bc <HAL_DMA_Init+0xb0>)
 800143e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001456:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800145a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	bffdfff8 	.word	0xbffdfff8
 80014b8:	cccccccd 	.word	0xcccccccd
 80014bc:	40020000 	.word	0x40020000

080014c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_DMA_Start_IT+0x20>
 80014dc:	2302      	movs	r3, #2
 80014de:	e04b      	b.n	8001578 <HAL_DMA_Start_IT+0xb8>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d13a      	bne.n	800156a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 f9eb 	bl	80018f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d008      	beq.n	8001538 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 020e 	orr.w	r2, r2, #14
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e00f      	b.n	8001558 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0204 	bic.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 020a 	orr.w	r2, r2, #10
 8001556:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e005      	b.n	8001576 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001572:	2302      	movs	r3, #2
 8001574:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001576:	7dfb      	ldrb	r3, [r7, #23]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d008      	beq.n	80015aa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2204      	movs	r2, #4
 800159c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e020      	b.n	80015ec <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 020e 	bic.w	r2, r2, #14
 80015b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d2:	2101      	movs	r1, #1
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d005      	beq.n	800161c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2204      	movs	r2, #4
 8001614:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e051      	b.n	80016c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 020e 	bic.w	r2, r2, #14
 800162a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a22      	ldr	r2, [pc, #136]	@ (80016cc <HAL_DMA_Abort_IT+0xd4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d029      	beq.n	800169a <HAL_DMA_Abort_IT+0xa2>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a21      	ldr	r2, [pc, #132]	@ (80016d0 <HAL_DMA_Abort_IT+0xd8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d022      	beq.n	8001696 <HAL_DMA_Abort_IT+0x9e>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1f      	ldr	r2, [pc, #124]	@ (80016d4 <HAL_DMA_Abort_IT+0xdc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d01a      	beq.n	8001690 <HAL_DMA_Abort_IT+0x98>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1e      	ldr	r2, [pc, #120]	@ (80016d8 <HAL_DMA_Abort_IT+0xe0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d012      	beq.n	800168a <HAL_DMA_Abort_IT+0x92>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1c      	ldr	r2, [pc, #112]	@ (80016dc <HAL_DMA_Abort_IT+0xe4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00a      	beq.n	8001684 <HAL_DMA_Abort_IT+0x8c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1b      	ldr	r2, [pc, #108]	@ (80016e0 <HAL_DMA_Abort_IT+0xe8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d102      	bne.n	800167e <HAL_DMA_Abort_IT+0x86>
 8001678:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800167c:	e00e      	b.n	800169c <HAL_DMA_Abort_IT+0xa4>
 800167e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001682:	e00b      	b.n	800169c <HAL_DMA_Abort_IT+0xa4>
 8001684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001688:	e008      	b.n	800169c <HAL_DMA_Abort_IT+0xa4>
 800168a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168e:	e005      	b.n	800169c <HAL_DMA_Abort_IT+0xa4>
 8001690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001694:	e002      	b.n	800169c <HAL_DMA_Abort_IT+0xa4>
 8001696:	2310      	movs	r3, #16
 8001698:	e000      	b.n	800169c <HAL_DMA_Abort_IT+0xa4>
 800169a:	2301      	movs	r3, #1
 800169c:	4a11      	ldr	r2, [pc, #68]	@ (80016e4 <HAL_DMA_Abort_IT+0xec>)
 800169e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	4798      	blx	r3
    } 
  }
  return status;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40020008 	.word	0x40020008
 80016d0:	4002001c 	.word	0x4002001c
 80016d4:	40020030 	.word	0x40020030
 80016d8:	40020044 	.word	0x40020044
 80016dc:	40020058 	.word	0x40020058
 80016e0:	4002006c 	.word	0x4002006c
 80016e4:	40020000 	.word	0x40020000

080016e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	2204      	movs	r2, #4
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d04f      	beq.n	80017b0 <HAL_DMA_IRQHandler+0xc8>
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b00      	cmp	r3, #0
 8001718:	d04a      	beq.n	80017b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b00      	cmp	r3, #0
 8001726:	d107      	bne.n	8001738 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0204 	bic.w	r2, r2, #4
 8001736:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a66      	ldr	r2, [pc, #408]	@ (80018d8 <HAL_DMA_IRQHandler+0x1f0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d029      	beq.n	8001796 <HAL_DMA_IRQHandler+0xae>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a65      	ldr	r2, [pc, #404]	@ (80018dc <HAL_DMA_IRQHandler+0x1f4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d022      	beq.n	8001792 <HAL_DMA_IRQHandler+0xaa>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a63      	ldr	r2, [pc, #396]	@ (80018e0 <HAL_DMA_IRQHandler+0x1f8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01a      	beq.n	800178c <HAL_DMA_IRQHandler+0xa4>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a62      	ldr	r2, [pc, #392]	@ (80018e4 <HAL_DMA_IRQHandler+0x1fc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d012      	beq.n	8001786 <HAL_DMA_IRQHandler+0x9e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a60      	ldr	r2, [pc, #384]	@ (80018e8 <HAL_DMA_IRQHandler+0x200>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00a      	beq.n	8001780 <HAL_DMA_IRQHandler+0x98>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a5f      	ldr	r2, [pc, #380]	@ (80018ec <HAL_DMA_IRQHandler+0x204>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d102      	bne.n	800177a <HAL_DMA_IRQHandler+0x92>
 8001774:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001778:	e00e      	b.n	8001798 <HAL_DMA_IRQHandler+0xb0>
 800177a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800177e:	e00b      	b.n	8001798 <HAL_DMA_IRQHandler+0xb0>
 8001780:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001784:	e008      	b.n	8001798 <HAL_DMA_IRQHandler+0xb0>
 8001786:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800178a:	e005      	b.n	8001798 <HAL_DMA_IRQHandler+0xb0>
 800178c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001790:	e002      	b.n	8001798 <HAL_DMA_IRQHandler+0xb0>
 8001792:	2340      	movs	r3, #64	@ 0x40
 8001794:	e000      	b.n	8001798 <HAL_DMA_IRQHandler+0xb0>
 8001796:	2304      	movs	r3, #4
 8001798:	4a55      	ldr	r2, [pc, #340]	@ (80018f0 <HAL_DMA_IRQHandler+0x208>)
 800179a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 8094 	beq.w	80018ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017ae:	e08e      	b.n	80018ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	2202      	movs	r2, #2
 80017b6:	409a      	lsls	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d056      	beq.n	800186e <HAL_DMA_IRQHandler+0x186>
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d051      	beq.n	800186e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10b      	bne.n	80017f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 020a 	bic.w	r2, r2, #10
 80017e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a38      	ldr	r2, [pc, #224]	@ (80018d8 <HAL_DMA_IRQHandler+0x1f0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d029      	beq.n	800184e <HAL_DMA_IRQHandler+0x166>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a37      	ldr	r2, [pc, #220]	@ (80018dc <HAL_DMA_IRQHandler+0x1f4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d022      	beq.n	800184a <HAL_DMA_IRQHandler+0x162>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a35      	ldr	r2, [pc, #212]	@ (80018e0 <HAL_DMA_IRQHandler+0x1f8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d01a      	beq.n	8001844 <HAL_DMA_IRQHandler+0x15c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a34      	ldr	r2, [pc, #208]	@ (80018e4 <HAL_DMA_IRQHandler+0x1fc>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d012      	beq.n	800183e <HAL_DMA_IRQHandler+0x156>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a32      	ldr	r2, [pc, #200]	@ (80018e8 <HAL_DMA_IRQHandler+0x200>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00a      	beq.n	8001838 <HAL_DMA_IRQHandler+0x150>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a31      	ldr	r2, [pc, #196]	@ (80018ec <HAL_DMA_IRQHandler+0x204>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d102      	bne.n	8001832 <HAL_DMA_IRQHandler+0x14a>
 800182c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001830:	e00e      	b.n	8001850 <HAL_DMA_IRQHandler+0x168>
 8001832:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001836:	e00b      	b.n	8001850 <HAL_DMA_IRQHandler+0x168>
 8001838:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800183c:	e008      	b.n	8001850 <HAL_DMA_IRQHandler+0x168>
 800183e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001842:	e005      	b.n	8001850 <HAL_DMA_IRQHandler+0x168>
 8001844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001848:	e002      	b.n	8001850 <HAL_DMA_IRQHandler+0x168>
 800184a:	2320      	movs	r3, #32
 800184c:	e000      	b.n	8001850 <HAL_DMA_IRQHandler+0x168>
 800184e:	2302      	movs	r3, #2
 8001850:	4a27      	ldr	r2, [pc, #156]	@ (80018f0 <HAL_DMA_IRQHandler+0x208>)
 8001852:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	d034      	beq.n	80018ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800186c:	e02f      	b.n	80018ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	2208      	movs	r2, #8
 8001874:	409a      	lsls	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d028      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x1e8>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d023      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 020e 	bic.w	r2, r2, #14
 8001896:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d004      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
    }
  }
  return;
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
}
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40020008 	.word	0x40020008
 80018dc:	4002001c 	.word	0x4002001c
 80018e0:	40020030 	.word	0x40020030
 80018e4:	40020044 	.word	0x40020044
 80018e8:	40020058 	.word	0x40020058
 80018ec:	4002006c 	.word	0x4002006c
 80018f0:	40020000 	.word	0x40020000

080018f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b10      	cmp	r3, #16
 8001920:	d108      	bne.n	8001934 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001932:	e007      	b.n	8001944 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	60da      	str	r2, [r3, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
	...

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b08b      	sub	sp, #44	@ 0x2c
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001962:	e169      	b.n	8001c38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001964:	2201      	movs	r2, #1
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	429a      	cmp	r2, r3
 800197e:	f040 8158 	bne.w	8001c32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a9a      	ldr	r2, [pc, #616]	@ (8001bf0 <HAL_GPIO_Init+0x2a0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d05e      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 800198c:	4a98      	ldr	r2, [pc, #608]	@ (8001bf0 <HAL_GPIO_Init+0x2a0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d875      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 8001992:	4a98      	ldr	r2, [pc, #608]	@ (8001bf4 <HAL_GPIO_Init+0x2a4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d058      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 8001998:	4a96      	ldr	r2, [pc, #600]	@ (8001bf4 <HAL_GPIO_Init+0x2a4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d86f      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 800199e:	4a96      	ldr	r2, [pc, #600]	@ (8001bf8 <HAL_GPIO_Init+0x2a8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d052      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 80019a4:	4a94      	ldr	r2, [pc, #592]	@ (8001bf8 <HAL_GPIO_Init+0x2a8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d869      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019aa:	4a94      	ldr	r2, [pc, #592]	@ (8001bfc <HAL_GPIO_Init+0x2ac>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d04c      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 80019b0:	4a92      	ldr	r2, [pc, #584]	@ (8001bfc <HAL_GPIO_Init+0x2ac>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d863      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019b6:	4a92      	ldr	r2, [pc, #584]	@ (8001c00 <HAL_GPIO_Init+0x2b0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d046      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 80019bc:	4a90      	ldr	r2, [pc, #576]	@ (8001c00 <HAL_GPIO_Init+0x2b0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d85d      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019c2:	2b12      	cmp	r3, #18
 80019c4:	d82a      	bhi.n	8001a1c <HAL_GPIO_Init+0xcc>
 80019c6:	2b12      	cmp	r3, #18
 80019c8:	d859      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019ca:	a201      	add	r2, pc, #4	@ (adr r2, 80019d0 <HAL_GPIO_Init+0x80>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	08001a4b 	.word	0x08001a4b
 80019d4:	08001a25 	.word	0x08001a25
 80019d8:	08001a37 	.word	0x08001a37
 80019dc:	08001a79 	.word	0x08001a79
 80019e0:	08001a7f 	.word	0x08001a7f
 80019e4:	08001a7f 	.word	0x08001a7f
 80019e8:	08001a7f 	.word	0x08001a7f
 80019ec:	08001a7f 	.word	0x08001a7f
 80019f0:	08001a7f 	.word	0x08001a7f
 80019f4:	08001a7f 	.word	0x08001a7f
 80019f8:	08001a7f 	.word	0x08001a7f
 80019fc:	08001a7f 	.word	0x08001a7f
 8001a00:	08001a7f 	.word	0x08001a7f
 8001a04:	08001a7f 	.word	0x08001a7f
 8001a08:	08001a7f 	.word	0x08001a7f
 8001a0c:	08001a7f 	.word	0x08001a7f
 8001a10:	08001a7f 	.word	0x08001a7f
 8001a14:	08001a2d 	.word	0x08001a2d
 8001a18:	08001a41 	.word	0x08001a41
 8001a1c:	4a79      	ldr	r2, [pc, #484]	@ (8001c04 <HAL_GPIO_Init+0x2b4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a22:	e02c      	b.n	8001a7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e029      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	3304      	adds	r3, #4
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e024      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e01f      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	330c      	adds	r3, #12
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e01a      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a52:	2304      	movs	r3, #4
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e013      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a60:	2308      	movs	r3, #8
 8001a62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	611a      	str	r2, [r3, #16]
          break;
 8001a6a:	e009      	b.n	8001a80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	615a      	str	r2, [r3, #20]
          break;
 8001a76:	e003      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
          break;
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          break;
 8001a7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2bff      	cmp	r3, #255	@ 0xff
 8001a84:	d801      	bhi.n	8001a8a <HAL_GPIO_Init+0x13a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	e001      	b.n	8001a8e <HAL_GPIO_Init+0x13e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2bff      	cmp	r3, #255	@ 0xff
 8001a94:	d802      	bhi.n	8001a9c <HAL_GPIO_Init+0x14c>
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0x152>
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	3b08      	subs	r3, #8
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	210f      	movs	r1, #15
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	6a39      	ldr	r1, [r7, #32]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80b1 	beq.w	8001c32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c08 <HAL_GPIO_Init+0x2b8>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a4c      	ldr	r2, [pc, #304]	@ (8001c08 <HAL_GPIO_Init+0x2b8>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b4a      	ldr	r3, [pc, #296]	@ (8001c08 <HAL_GPIO_Init+0x2b8>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae8:	4a48      	ldr	r2, [pc, #288]	@ (8001c0c <HAL_GPIO_Init+0x2bc>)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a40      	ldr	r2, [pc, #256]	@ (8001c10 <HAL_GPIO_Init+0x2c0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d013      	beq.n	8001b3c <HAL_GPIO_Init+0x1ec>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3f      	ldr	r2, [pc, #252]	@ (8001c14 <HAL_GPIO_Init+0x2c4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00d      	beq.n	8001b38 <HAL_GPIO_Init+0x1e8>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d007      	beq.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a3d      	ldr	r2, [pc, #244]	@ (8001c1c <HAL_GPIO_Init+0x2cc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d101      	bne.n	8001b30 <HAL_GPIO_Init+0x1e0>
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e006      	b.n	8001b3e <HAL_GPIO_Init+0x1ee>
 8001b30:	2304      	movs	r3, #4
 8001b32:	e004      	b.n	8001b3e <HAL_GPIO_Init+0x1ee>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e002      	b.n	8001b3e <HAL_GPIO_Init+0x1ee>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_GPIO_Init+0x1ee>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b40:	f002 0203 	and.w	r2, r2, #3
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	4093      	lsls	r3, r2
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b4e:	492f      	ldr	r1, [pc, #188]	@ (8001c0c <HAL_GPIO_Init+0x2bc>)
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b68:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	492c      	ldr	r1, [pc, #176]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b76:	4b2a      	ldr	r3, [pc, #168]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	4928      	ldr	r1, [pc, #160]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b90:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	4922      	ldr	r1, [pc, #136]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b9e:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	491e      	ldr	r1, [pc, #120]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb8:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	4918      	ldr	r1, [pc, #96]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bc6:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4914      	ldr	r1, [pc, #80]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d021      	beq.n	8001c24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	490e      	ldr	r1, [pc, #56]	@ (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e021      	b.n	8001c32 <HAL_GPIO_Init+0x2e2>
 8001bee:	bf00      	nop
 8001bf0:	10320000 	.word	0x10320000
 8001bf4:	10310000 	.word	0x10310000
 8001bf8:	10220000 	.word	0x10220000
 8001bfc:	10210000 	.word	0x10210000
 8001c00:	10120000 	.word	0x10120000
 8001c04:	10110000 	.word	0x10110000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	40010800 	.word	0x40010800
 8001c14:	40010c00 	.word	0x40010c00
 8001c18:	40011000 	.word	0x40011000
 8001c1c:	40011400 	.word	0x40011400
 8001c20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_GPIO_Init+0x304>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	4909      	ldr	r1, [pc, #36]	@ (8001c54 <HAL_GPIO_Init+0x304>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	3301      	adds	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f47f ae8e 	bne.w	8001964 <HAL_GPIO_Init+0x14>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	372c      	adds	r7, #44	@ 0x2c
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	40010400 	.word	0x40010400

08001c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
 8001c64:	4613      	mov	r3, r2
 8001c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c68:	787b      	ldrb	r3, [r7, #1]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6e:	887a      	ldrh	r2, [r7, #2]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c74:	e003      	b.n	8001c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	041a      	lsls	r2, r3, #16
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	611a      	str	r2, [r3, #16]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	041a      	lsls	r2, r3, #16
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43d9      	mvns	r1, r3
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	400b      	ands	r3, r1
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	611a      	str	r2, [r3, #16]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e272      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8087 	beq.w	8001dea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cdc:	4b92      	ldr	r3, [pc, #584]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d00c      	beq.n	8001d02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ce8:	4b8f      	ldr	r3, [pc, #572]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d112      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5e>
 8001cf4:	4b8c      	ldr	r3, [pc, #560]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d00:	d10b      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d02:	4b89      	ldr	r3, [pc, #548]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d06c      	beq.n	8001de8 <HAL_RCC_OscConfig+0x12c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d168      	bne.n	8001de8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e24c      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x76>
 8001d24:	4b80      	ldr	r3, [pc, #512]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a7f      	ldr	r2, [pc, #508]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	e02e      	b.n	8001d90 <HAL_RCC_OscConfig+0xd4>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x98>
 8001d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a7a      	ldr	r2, [pc, #488]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b78      	ldr	r3, [pc, #480]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a77      	ldr	r2, [pc, #476]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e01d      	b.n	8001d90 <HAL_RCC_OscConfig+0xd4>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0xbc>
 8001d5e:	4b72      	ldr	r3, [pc, #456]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a71      	ldr	r2, [pc, #452]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0xd4>
 8001d78:	4b6b      	ldr	r3, [pc, #428]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b68      	ldr	r3, [pc, #416]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a67      	ldr	r2, [pc, #412]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fa20 	bl	80011dc <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff fa1c 	bl	80011dc <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	@ 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e200      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0xe4>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fa0c 	bl	80011dc <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fa08 	bl	80011dc <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	@ 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1ec      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	4b53      	ldr	r3, [pc, #332]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x10c>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d063      	beq.n	8001ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df6:	4b4c      	ldr	r3, [pc, #304]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e02:	4b49      	ldr	r3, [pc, #292]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d11c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x18c>
 8001e0e:	4b46      	ldr	r3, [pc, #280]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d116      	bne.n	8001e48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1a:	4b43      	ldr	r3, [pc, #268]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x176>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e1c0      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e32:	4b3d      	ldr	r3, [pc, #244]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4939      	ldr	r1, [pc, #228]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	e03a      	b.n	8001ebe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e50:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7ff f9c1 	bl	80011dc <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5e:	f7ff f9bd 	bl	80011dc <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e1a1      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	4b2d      	ldr	r3, [pc, #180]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4927      	ldr	r1, [pc, #156]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]
 8001e90:	e015      	b.n	8001ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e92:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff f9a0 	bl	80011dc <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7ff f99c 	bl	80011dc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e180      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d03a      	beq.n	8001f40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d019      	beq.n	8001f06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed2:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff f980 	bl	80011dc <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff f97c 	bl	80011dc <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e160      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001efe:	2001      	movs	r0, #1
 8001f00:	f000 face 	bl	80024a0 <RCC_Delay>
 8001f04:	e01c      	b.n	8001f40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f06:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <HAL_RCC_OscConfig+0x274>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f966 	bl	80011dc <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f12:	e00f      	b.n	8001f34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff f962 	bl	80011dc <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d908      	bls.n	8001f34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e146      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	42420000 	.word	0x42420000
 8001f30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	4b92      	ldr	r3, [pc, #584]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e9      	bne.n	8001f14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80a6 	beq.w	800209a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b8b      	ldr	r3, [pc, #556]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10d      	bne.n	8001f7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b88      	ldr	r3, [pc, #544]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a87      	ldr	r2, [pc, #540]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	61d3      	str	r3, [r2, #28]
 8001f6a:	4b85      	ldr	r3, [pc, #532]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f76:	2301      	movs	r3, #1
 8001f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	4b82      	ldr	r3, [pc, #520]	@ (8002184 <HAL_RCC_OscConfig+0x4c8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d118      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f86:	4b7f      	ldr	r3, [pc, #508]	@ (8002184 <HAL_RCC_OscConfig+0x4c8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002184 <HAL_RCC_OscConfig+0x4c8>)
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f92:	f7ff f923 	bl	80011dc <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9a:	f7ff f91f 	bl	80011dc <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b64      	cmp	r3, #100	@ 0x64
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e103      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	4b75      	ldr	r3, [pc, #468]	@ (8002184 <HAL_RCC_OscConfig+0x4c8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x312>
 8001fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a6e      	ldr	r2, [pc, #440]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	e02d      	b.n	800202a <HAL_RCC_OscConfig+0x36e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x334>
 8001fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a69      	ldr	r2, [pc, #420]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	4b67      	ldr	r3, [pc, #412]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a66      	ldr	r2, [pc, #408]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	e01c      	b.n	800202a <HAL_RCC_OscConfig+0x36e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d10c      	bne.n	8002012 <HAL_RCC_OscConfig+0x356>
 8001ff8:	4b61      	ldr	r3, [pc, #388]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a60      	ldr	r2, [pc, #384]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	4b5e      	ldr	r3, [pc, #376]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a5d      	ldr	r2, [pc, #372]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	e00b      	b.n	800202a <HAL_RCC_OscConfig+0x36e>
 8002012:	4b5b      	ldr	r3, [pc, #364]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a5a      	ldr	r2, [pc, #360]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6213      	str	r3, [r2, #32]
 800201e:	4b58      	ldr	r3, [pc, #352]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a57      	ldr	r2, [pc, #348]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d015      	beq.n	800205e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7ff f8d3 	bl	80011dc <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7ff f8cf 	bl	80011dc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e0b1      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	4b4b      	ldr	r3, [pc, #300]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ee      	beq.n	800203a <HAL_RCC_OscConfig+0x37e>
 800205c:	e014      	b.n	8002088 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7ff f8bd 	bl	80011dc <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7ff f8b9 	bl	80011dc <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e09b      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207c:	4b40      	ldr	r3, [pc, #256]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ee      	bne.n	8002066 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d105      	bne.n	800209a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208e:	4b3c      	ldr	r3, [pc, #240]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a3b      	ldr	r2, [pc, #236]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002098:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8087 	beq.w	80021b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a4:	4b36      	ldr	r3, [pc, #216]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d061      	beq.n	8002174 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d146      	bne.n	8002146 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b8:	4b33      	ldr	r3, [pc, #204]	@ (8002188 <HAL_RCC_OscConfig+0x4cc>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7ff f88d 	bl	80011dc <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c6:	f7ff f889 	bl	80011dc <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e06d      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d8:	4b29      	ldr	r3, [pc, #164]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ec:	d108      	bne.n	8002100 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ee:	4b24      	ldr	r3, [pc, #144]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4921      	ldr	r1, [pc, #132]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002100:	4b1f      	ldr	r3, [pc, #124]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a19      	ldr	r1, [r3, #32]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	430b      	orrs	r3, r1
 8002112:	491b      	ldr	r1, [pc, #108]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x4cc>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff f85d 	bl	80011dc <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002126:	f7ff f859 	bl	80011dc <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e03d      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002138:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x46a>
 8002144:	e035      	b.n	80021b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <HAL_RCC_OscConfig+0x4cc>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff f846 	bl	80011dc <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff f842 	bl	80011dc <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e026      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x498>
 8002172:	e01e      	b.n	80021b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e019      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
 8002180:	40021000 	.word	0x40021000
 8002184:	40007000 	.word	0x40007000
 8002188:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_RCC_OscConfig+0x500>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	429a      	cmp	r2, r3
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0d0      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d910      	bls.n	8002204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b67      	ldr	r3, [pc, #412]	@ (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 0207 	bic.w	r2, r3, #7
 80021ea:	4965      	ldr	r1, [pc, #404]	@ (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0b8      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800221c:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a58      	ldr	r2, [pc, #352]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002226:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002234:	4b53      	ldr	r3, [pc, #332]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4a52      	ldr	r2, [pc, #328]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800223e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b50      	ldr	r3, [pc, #320]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	494d      	ldr	r1, [pc, #308]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d040      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b47      	ldr	r3, [pc, #284]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d115      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227e:	4b41      	ldr	r3, [pc, #260]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e073      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228e:	4b3d      	ldr	r3, [pc, #244]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e06b      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800229e:	4b39      	ldr	r3, [pc, #228]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f023 0203 	bic.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4936      	ldr	r1, [pc, #216]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b0:	f7fe ff94 	bl	80011dc <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7fe ff90 	bl	80011dc <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e053      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 020c 	and.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1eb      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e0:	4b27      	ldr	r3, [pc, #156]	@ (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d210      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b24      	ldr	r3, [pc, #144]	@ (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
 80022f6:	4922      	ldr	r1, [pc, #136]	@ (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e032      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4916      	ldr	r1, [pc, #88]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800233a:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	490e      	ldr	r1, [pc, #56]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800234e:	f000 f821 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002352:	4602      	mov	r2, r0
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	490a      	ldr	r1, [pc, #40]	@ (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	5ccb      	ldrb	r3, [r1, r3]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a09      	ldr	r2, [pc, #36]	@ (800238c <HAL_RCC_ClockConfig+0x1cc>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_RCC_ClockConfig+0x1d0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fef2 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40022000 	.word	0x40022000
 8002384:	40021000 	.word	0x40021000
 8002388:	08003798 	.word	0x08003798
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x94>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d002      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x30>
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x36>
 80023c2:	e027      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c4:	4b19      	ldr	r3, [pc, #100]	@ (800242c <HAL_RCC_GetSysClockFreq+0x98>)
 80023c6:	613b      	str	r3, [r7, #16]
      break;
 80023c8:	e027      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	0c9b      	lsrs	r3, r3, #18
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	4a17      	ldr	r2, [pc, #92]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023d4:	5cd3      	ldrb	r3, [r2, r3]
 80023d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d010      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023e2:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x94>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0c5b      	lsrs	r3, r3, #17
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	4a11      	ldr	r2, [pc, #68]	@ (8002434 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	@ (800242c <HAL_RCC_GetSysClockFreq+0x98>)
 80023f6:	fb03 f202 	mul.w	r2, r3, r2
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e004      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a0c      	ldr	r2, [pc, #48]	@ (8002438 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	613b      	str	r3, [r7, #16]
      break;
 8002412:	e002      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <HAL_RCC_GetSysClockFreq+0x98>)
 8002416:	613b      	str	r3, [r7, #16]
      break;
 8002418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241a:	693b      	ldr	r3, [r7, #16]
}
 800241c:	4618      	mov	r0, r3
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	007a1200 	.word	0x007a1200
 8002430:	080037b0 	.word	0x080037b0
 8002434:	080037c0 	.word	0x080037c0
 8002438:	003d0900 	.word	0x003d0900

0800243c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002440:	4b02      	ldr	r3, [pc, #8]	@ (800244c <HAL_RCC_GetHCLKFreq+0x10>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	20000000 	.word	0x20000000

08002450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002454:	f7ff fff2 	bl	800243c <HAL_RCC_GetHCLKFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	4903      	ldr	r1, [pc, #12]	@ (8002474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	080037a8 	.word	0x080037a8

08002478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800247c:	f7ff ffde 	bl	800243c <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	0adb      	lsrs	r3, r3, #11
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4903      	ldr	r1, [pc, #12]	@ (800249c <HAL_RCC_GetPCLK2Freq+0x24>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	080037a8 	.word	0x080037a8

080024a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024a8:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <RCC_Delay+0x34>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <RCC_Delay+0x38>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	0a5b      	lsrs	r3, r3, #9
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024bc:	bf00      	nop
  }
  while (Delay --);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1e5a      	subs	r2, r3, #1
 80024c2:	60fa      	str	r2, [r7, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f9      	bne.n	80024bc <RCC_Delay+0x1c>
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	20000000 	.word	0x20000000
 80024d8:	10624dd3 	.word	0x10624dd3

080024dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e042      	b.n	8002574 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fe faf8 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2224      	movs	r2, #36	@ 0x24
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800251e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 ff65 	bl	80033f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002534:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002544:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002554:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	@ 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	d156      	bne.n	8002644 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_UART_Transmit_DMA+0x26>
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e04f      	b.n	8002646 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	88fa      	ldrh	r2, [r7, #6]
 80025b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	88fa      	ldrh	r2, [r7, #6]
 80025b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2221      	movs	r2, #33	@ 0x21
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ca:	4a21      	ldr	r2, [pc, #132]	@ (8002650 <HAL_UART_Transmit_DMA+0xd4>)
 80025cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d2:	4a20      	ldr	r2, [pc, #128]	@ (8002654 <HAL_UART_Transmit_DMA+0xd8>)
 80025d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025da:	4a1f      	ldr	r2, [pc, #124]	@ (8002658 <HAL_UART_Transmit_DMA+0xdc>)
 80025dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e2:	2200      	movs	r2, #0
 80025e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3304      	adds	r3, #4
 80025fa:	461a      	mov	r2, r3
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	f7fe ff5f 	bl	80014c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800260a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3314      	adds	r3, #20
 8002612:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	e853 3f00 	ldrex	r3, [r3]
 800261a:	617b      	str	r3, [r7, #20]
   return(result);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3314      	adds	r3, #20
 800262a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800262c:	627a      	str	r2, [r7, #36]	@ 0x24
 800262e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002630:	6a39      	ldr	r1, [r7, #32]
 8002632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002634:	e841 2300 	strex	r3, r2, [r1]
 8002638:	61fb      	str	r3, [r7, #28]
   return(result);
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e5      	bne.n	800260c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3730      	adds	r7, #48	@ 0x30
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	08002c85 	.word	0x08002c85
 8002654:	08002d1f 	.word	0x08002d1f
 8002658:	08002ea3 	.word	0x08002ea3

0800265c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	@ 0x30
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b20      	cmp	r3, #32
 8002674:	d14a      	bne.n	800270c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e043      	b.n	800270e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	461a      	mov	r2, r3
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fc4d 	bl	8002f38 <UART_Start_Receive_DMA>
 800269e:	4603      	mov	r3, r0
 80026a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80026a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d12c      	bne.n	8002706 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d125      	bne.n	8002700 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	e853 3f00 	ldrex	r3, [r3]
 80026d8:	617b      	str	r3, [r7, #20]
   return(result);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f043 0310 	orr.w	r3, r3, #16
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	330c      	adds	r3, #12
 80026e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80026ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ee:	6a39      	ldr	r1, [r7, #32]
 80026f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f2:	e841 2300 	strex	r3, r2, [r1]
 80026f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1e5      	bne.n	80026ca <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80026fe:	e002      	b.n	8002706 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002706:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800270a:	e000      	b.n	800270e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800270c:	2302      	movs	r3, #2
  }
}
 800270e:	4618      	mov	r0, r3
 8002710:	3730      	adds	r7, #48	@ 0x30
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b0ba      	sub	sp, #232	@ 0xe8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800275e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_UART_IRQHandler+0x66>
 800276a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fd7c 	bl	8003274 <UART_Receive_IT>
      return;
 800277c:	e25b      	b.n	8002c36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800277e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80de 	beq.w	8002944 <HAL_UART_IRQHandler+0x22c>
 8002788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002798:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80d1 	beq.w	8002944 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_UART_IRQHandler+0xae>
 80027ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_UART_IRQHandler+0xd2>
 80027d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f043 0202 	orr.w	r2, r3, #2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_UART_IRQHandler+0xf6>
 80027f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f043 0204 	orr.w	r2, r3, #4
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800280e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d011      	beq.n	800283e <HAL_UART_IRQHandler+0x126>
 800281a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	f043 0208 	orr.w	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 81f2 	beq.w	8002c2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_UART_IRQHandler+0x14e>
 8002854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fd07 	bl	8003274 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <HAL_UART_IRQHandler+0x17a>
 800288a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d04f      	beq.n	8002932 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fc11 	bl	80030ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d041      	beq.n	800292a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3314      	adds	r3, #20
 80028ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80028bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3314      	adds	r3, #20
 80028ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80028d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80028de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80028ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1d9      	bne.n	80028a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d013      	beq.n	8002922 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fe:	4a7e      	ldr	r2, [pc, #504]	@ (8002af8 <HAL_UART_IRQHandler+0x3e0>)
 8002900:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fe76 	bl	80015f8 <HAL_DMA_Abort_IT>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800291c:	4610      	mov	r0, r2
 800291e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	e00e      	b.n	8002940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f9a5 	bl	8002c72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002928:	e00a      	b.n	8002940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f9a1 	bl	8002c72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002930:	e006      	b.n	8002940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f99d 	bl	8002c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800293e:	e175      	b.n	8002c2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002940:	bf00      	nop
    return;
 8002942:	e173      	b.n	8002c2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002948:	2b01      	cmp	r3, #1
 800294a:	f040 814f 	bne.w	8002bec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800294e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8148 	beq.w	8002bec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800295c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8141 	beq.w	8002bec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80b6 	beq.w	8002afc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800299c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8145 	beq.w	8002c30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80029aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029ae:	429a      	cmp	r2, r3
 80029b0:	f080 813e 	bcs.w	8002c30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	f000 8088 	beq.w	8002ad8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	330c      	adds	r3, #12
 80029ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029d6:	e853 3f00 	ldrex	r3, [r3]
 80029da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80029de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80029f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a00:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1d9      	bne.n	80029c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3314      	adds	r3, #20
 8002a1a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a1e:	e853 3f00 	ldrex	r3, [r3]
 8002a22:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3314      	adds	r3, #20
 8002a34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a38:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a40:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a44:	e841 2300 	strex	r3, r2, [r1]
 8002a48:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e1      	bne.n	8002a14 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3314      	adds	r3, #20
 8002a56:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a5a:	e853 3f00 	ldrex	r3, [r3]
 8002a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3314      	adds	r3, #20
 8002a70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a74:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a76:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a78:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a7a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a7c:	e841 2300 	strex	r3, r2, [r1]
 8002a80:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e3      	bne.n	8002a50 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aa8:	f023 0310 	bic.w	r3, r3, #16
 8002aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002aba:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002abc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ac0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e3      	bne.n	8002a96 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fd54 	bl	8001580 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fd fdca 	bl	8000688 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002af4:	e09c      	b.n	8002c30 <HAL_UART_IRQHandler+0x518>
 8002af6:	bf00      	nop
 8002af8:	0800317f 	.word	0x0800317f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 808e 	beq.w	8002c34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8089 	beq.w	8002c34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	330c      	adds	r3, #12
 8002b28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	330c      	adds	r3, #12
 8002b42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b46:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b4e:	e841 2300 	strex	r3, r2, [r1]
 8002b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1e3      	bne.n	8002b22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3314      	adds	r3, #20
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	e853 3f00 	ldrex	r3, [r3]
 8002b68:	623b      	str	r3, [r7, #32]
   return(result);
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3314      	adds	r3, #20
 8002b7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e3      	bne.n	8002b5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	e853 3f00 	ldrex	r3, [r3]
 8002bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0310 	bic.w	r3, r3, #16
 8002bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002bc4:	61fa      	str	r2, [r7, #28]
 8002bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc8:	69b9      	ldr	r1, [r7, #24]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	e841 2300 	strex	r3, r2, [r1]
 8002bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e3      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fd fd4f 	bl	8000688 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bea:	e023      	b.n	8002c34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d009      	beq.n	8002c0c <HAL_UART_IRQHandler+0x4f4>
 8002bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 face 	bl	80031a6 <UART_Transmit_IT>
    return;
 8002c0a:	e014      	b.n	8002c36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00e      	beq.n	8002c36 <HAL_UART_IRQHandler+0x51e>
 8002c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fb0d 	bl	8003244 <UART_EndTransmit_IT>
    return;
 8002c2a:	e004      	b.n	8002c36 <HAL_UART_IRQHandler+0x51e>
    return;
 8002c2c:	bf00      	nop
 8002c2e:	e002      	b.n	8002c36 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c30:	bf00      	nop
 8002c32:	e000      	b.n	8002c36 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c34:	bf00      	nop
  }
}
 8002c36:	37e8      	adds	r7, #232	@ 0xe8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b090      	sub	sp, #64	@ 0x40
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d137      	bne.n	8002d10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e5      	bne.n	8002ca6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	330c      	adds	r3, #12
 8002ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	e853 3f00 	ldrex	r3, [r3]
 8002ce8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	330c      	adds	r3, #12
 8002cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cfa:	61fa      	str	r2, [r7, #28]
 8002cfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	617b      	str	r3, [r7, #20]
   return(result);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e5      	bne.n	8002cda <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d0e:	e002      	b.n	8002d16 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002d10:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002d12:	f7fd fced 	bl	80006f0 <HAL_UART_TxCpltCallback>
}
 8002d16:	bf00      	nop
 8002d18:	3740      	adds	r7, #64	@ 0x40
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff ff85 	bl	8002c3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b09c      	sub	sp, #112	@ 0x70
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d172      	bne.n	8002e3c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d58:	2200      	movs	r2, #0
 8002d5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d66:	e853 3f00 	ldrex	r3, [r3]
 8002d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002d7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d84:	e841 2300 	strex	r3, r2, [r1]
 8002d88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e5      	bne.n	8002d5c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3314      	adds	r3, #20
 8002d96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9a:	e853 3f00 	ldrex	r3, [r3]
 8002d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3314      	adds	r3, #20
 8002dae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002db0:	647a      	str	r2, [r7, #68]	@ 0x44
 8002db2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002db6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e5      	bne.n	8002d90 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	623b      	str	r3, [r7, #32]
   return(result);
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dda:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3314      	adds	r3, #20
 8002de2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002de4:	633a      	str	r2, [r7, #48]	@ 0x30
 8002de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e5      	bne.n	8002dc4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d119      	bne.n	8002e3c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	e853 3f00 	ldrex	r3, [r3]
 8002e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0310 	bic.w	r3, r3, #16
 8002e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	330c      	adds	r3, #12
 8002e26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002e28:	61fa      	str	r2, [r7, #28]
 8002e2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2c:	69b9      	ldr	r1, [r7, #24]
 8002e2e:	69fa      	ldr	r2, [r7, #28]
 8002e30:	e841 2300 	strex	r3, r2, [r1]
 8002e34:	617b      	str	r3, [r7, #20]
   return(result);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e5      	bne.n	8002e08 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e3e:	2200      	movs	r2, #0
 8002e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d106      	bne.n	8002e58 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002e52:	f7fd fc19 	bl	8000688 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e56:	e002      	b.n	8002e5e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002e58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002e5a:	f7ff fef8 	bl	8002c4e <HAL_UART_RxCpltCallback>
}
 8002e5e:	bf00      	nop
 8002e60:	3770      	adds	r7, #112	@ 0x70
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d108      	bne.n	8002e94 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7fd fbfb 	bl	8000688 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e92:	e002      	b.n	8002e9a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7ff fee3 	bl	8002c60 <HAL_UART_RxHalfCpltCallback>
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b21      	cmp	r3, #33	@ 0x21
 8002ed4:	d108      	bne.n	8002ee8 <UART_DMAError+0x46>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002ee2:	68b8      	ldr	r0, [r7, #8]
 8002ee4:	f000 f8c2 	bl	800306c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b22      	cmp	r3, #34	@ 0x22
 8002f08:	d108      	bne.n	8002f1c <UART_DMAError+0x7a>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2200      	movs	r2, #0
 8002f14:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002f16:	68b8      	ldr	r0, [r7, #8]
 8002f18:	f000 f8cf 	bl	80030ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f20:	f043 0210 	orr.w	r2, r3, #16
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f28:	68b8      	ldr	r0, [r7, #8]
 8002f2a:	f7ff fea2 	bl	8002c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b098      	sub	sp, #96	@ 0x60
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2222      	movs	r2, #34	@ 0x22
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	4a3e      	ldr	r2, [pc, #248]	@ (8003060 <UART_Start_Receive_DMA+0x128>)
 8002f66:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6c:	4a3d      	ldr	r2, [pc, #244]	@ (8003064 <UART_Start_Receive_DMA+0x12c>)
 8002f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f74:	4a3c      	ldr	r2, [pc, #240]	@ (8003068 <UART_Start_Receive_DMA+0x130>)
 8002f76:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f80:	f107 0308 	add.w	r3, r7, #8
 8002f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	4619      	mov	r1, r3
 8002f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	f7fe fa92 	bl	80014c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d019      	beq.n	8002fee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fda:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002fe0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fe2:	e841 2300 	strex	r3, r2, [r1]
 8002fe6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e5      	bne.n	8002fba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3314      	adds	r3, #20
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff8:	e853 3f00 	ldrex	r3, [r3]
 8002ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	657b      	str	r3, [r7, #84]	@ 0x54
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3314      	adds	r3, #20
 800300c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800300e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003010:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003012:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003014:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003016:	e841 2300 	strex	r3, r2, [r1]
 800301a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e5      	bne.n	8002fee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3314      	adds	r3, #20
 8003028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	617b      	str	r3, [r7, #20]
   return(result);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003038:	653b      	str	r3, [r7, #80]	@ 0x50
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3314      	adds	r3, #20
 8003040:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003042:	627a      	str	r2, [r7, #36]	@ 0x24
 8003044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	6a39      	ldr	r1, [r7, #32]
 8003048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e5      	bne.n	8003022 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3760      	adds	r7, #96	@ 0x60
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	08002d3b 	.word	0x08002d3b
 8003064:	08002e67 	.word	0x08002e67
 8003068:	08002ea3 	.word	0x08002ea3

0800306c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	@ 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	60bb      	str	r3, [r7, #8]
   return(result);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800308a:	61fb      	str	r3, [r7, #28]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	61ba      	str	r2, [r7, #24]
 8003096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6979      	ldr	r1, [r7, #20]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	613b      	str	r3, [r7, #16]
   return(result);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e5      	bne.n	8003074 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80030b0:	bf00      	nop
 80030b2:	3724      	adds	r7, #36	@ 0x24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b095      	sub	sp, #84	@ 0x54
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	330c      	adds	r3, #12
 80030e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80030e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e5      	bne.n	80030c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3314      	adds	r3, #20
 80030fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	e853 3f00 	ldrex	r3, [r3]
 8003104:	61fb      	str	r3, [r7, #28]
   return(result);
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3314      	adds	r3, #20
 8003114:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003118:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800311c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e5      	bne.n	80030f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	2b01      	cmp	r3, #1
 8003130:	d119      	bne.n	8003166 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	60bb      	str	r3, [r7, #8]
   return(result);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f023 0310 	bic.w	r3, r3, #16
 8003148:	647b      	str	r3, [r7, #68]	@ 0x44
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003152:	61ba      	str	r2, [r7, #24]
 8003154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	6979      	ldr	r1, [r7, #20]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	613b      	str	r3, [r7, #16]
   return(result);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1e5      	bne.n	8003132 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003174:	bf00      	nop
 8003176:	3754      	adds	r7, #84	@ 0x54
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff fd6a 	bl	8002c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b21      	cmp	r3, #33	@ 0x21
 80031b8:	d13e      	bne.n	8003238 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c2:	d114      	bne.n	80031ee <UART_Transmit_IT+0x48>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d110      	bne.n	80031ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	1c9a      	adds	r2, r3, #2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	621a      	str	r2, [r3, #32]
 80031ec:	e008      	b.n	8003200 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6211      	str	r1, [r2, #32]
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29b      	uxth	r3, r3
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4619      	mov	r1, r3
 800320e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10f      	bne.n	8003234 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003222:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003232:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800325a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fd fa43 	bl	80006f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08c      	sub	sp, #48	@ 0x30
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b22      	cmp	r3, #34	@ 0x22
 8003286:	f040 80ae 	bne.w	80033e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003292:	d117      	bne.n	80032c4 <UART_Receive_IT+0x50>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d113      	bne.n	80032c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800329c:	2300      	movs	r3, #0
 800329e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	1c9a      	adds	r2, r3, #2
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80032c2:	e026      	b.n	8003312 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032d6:	d007      	beq.n	80032e8 <UART_Receive_IT+0x74>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <UART_Receive_IT+0x82>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e008      	b.n	8003308 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003302:	b2da      	uxtb	r2, r3
 8003304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003306:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29b      	uxth	r3, r3
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	4619      	mov	r1, r3
 8003320:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003322:	2b00      	cmp	r3, #0
 8003324:	d15d      	bne.n	80033e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0220 	bic.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003344:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	2b01      	cmp	r3, #1
 800336a:	d135      	bne.n	80033d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	613b      	str	r3, [r7, #16]
   return(result);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f023 0310 	bic.w	r3, r3, #16
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003392:	623a      	str	r2, [r7, #32]
 8003394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003396:	69f9      	ldr	r1, [r7, #28]
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	61bb      	str	r3, [r7, #24]
   return(result);
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e5      	bne.n	8003372 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d10a      	bne.n	80033ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fd f959 	bl	8000688 <HAL_UARTEx_RxEventCallback>
 80033d6:	e002      	b.n	80033de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fc38 	bl	8002c4e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e002      	b.n	80033e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e000      	b.n	80033e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033e6:	2302      	movs	r3, #2
  }
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3730      	adds	r7, #48	@ 0x30
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800342a:	f023 030c 	bic.w	r3, r3, #12
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	430b      	orrs	r3, r1
 8003436:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2c      	ldr	r2, [pc, #176]	@ (8003504 <UART_SetConfig+0x114>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d103      	bne.n	8003460 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003458:	f7ff f80e 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	e002      	b.n	8003466 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003460:	f7fe fff6 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8003464:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009a      	lsls	r2, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	4a22      	ldr	r2, [pc, #136]	@ (8003508 <UART_SetConfig+0x118>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	0119      	lsls	r1, r3, #4
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009a      	lsls	r2, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fbb2 f2f3 	udiv	r2, r2, r3
 800349c:	4b1a      	ldr	r3, [pc, #104]	@ (8003508 <UART_SetConfig+0x118>)
 800349e:	fba3 0302 	umull	r0, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2064      	movs	r0, #100	@ 0x64
 80034a6:	fb00 f303 	mul.w	r3, r0, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	3332      	adds	r3, #50	@ 0x32
 80034b0:	4a15      	ldr	r2, [pc, #84]	@ (8003508 <UART_SetConfig+0x118>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034bc:	4419      	add	r1, r3
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009a      	lsls	r2, r3, #2
 80034c8:	441a      	add	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003508 <UART_SetConfig+0x118>)
 80034d6:	fba3 0302 	umull	r0, r3, r3, r2
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2064      	movs	r0, #100	@ 0x64
 80034de:	fb00 f303 	mul.w	r3, r0, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	3332      	adds	r3, #50	@ 0x32
 80034e8:	4a07      	ldr	r2, [pc, #28]	@ (8003508 <UART_SetConfig+0x118>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	f003 020f 	and.w	r2, r3, #15
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	440a      	add	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40013800 	.word	0x40013800
 8003508:	51eb851f 	.word	0x51eb851f

0800350c <memset>:
 800350c:	4603      	mov	r3, r0
 800350e:	4402      	add	r2, r0
 8003510:	4293      	cmp	r3, r2
 8003512:	d100      	bne.n	8003516 <memset+0xa>
 8003514:	4770      	bx	lr
 8003516:	f803 1b01 	strb.w	r1, [r3], #1
 800351a:	e7f9      	b.n	8003510 <memset+0x4>

0800351c <__libc_init_array>:
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	2600      	movs	r6, #0
 8003520:	4d0c      	ldr	r5, [pc, #48]	@ (8003554 <__libc_init_array+0x38>)
 8003522:	4c0d      	ldr	r4, [pc, #52]	@ (8003558 <__libc_init_array+0x3c>)
 8003524:	1b64      	subs	r4, r4, r5
 8003526:	10a4      	asrs	r4, r4, #2
 8003528:	42a6      	cmp	r6, r4
 800352a:	d109      	bne.n	8003540 <__libc_init_array+0x24>
 800352c:	f000 f828 	bl	8003580 <_init>
 8003530:	2600      	movs	r6, #0
 8003532:	4d0a      	ldr	r5, [pc, #40]	@ (800355c <__libc_init_array+0x40>)
 8003534:	4c0a      	ldr	r4, [pc, #40]	@ (8003560 <__libc_init_array+0x44>)
 8003536:	1b64      	subs	r4, r4, r5
 8003538:	10a4      	asrs	r4, r4, #2
 800353a:	42a6      	cmp	r6, r4
 800353c:	d105      	bne.n	800354a <__libc_init_array+0x2e>
 800353e:	bd70      	pop	{r4, r5, r6, pc}
 8003540:	f855 3b04 	ldr.w	r3, [r5], #4
 8003544:	4798      	blx	r3
 8003546:	3601      	adds	r6, #1
 8003548:	e7ee      	b.n	8003528 <__libc_init_array+0xc>
 800354a:	f855 3b04 	ldr.w	r3, [r5], #4
 800354e:	4798      	blx	r3
 8003550:	3601      	adds	r6, #1
 8003552:	e7f2      	b.n	800353a <__libc_init_array+0x1e>
 8003554:	080037c4 	.word	0x080037c4
 8003558:	080037c4 	.word	0x080037c4
 800355c:	080037c4 	.word	0x080037c4
 8003560:	080037c8 	.word	0x080037c8

08003564 <memcpy>:
 8003564:	440a      	add	r2, r1
 8003566:	4291      	cmp	r1, r2
 8003568:	f100 33ff 	add.w	r3, r0, #4294967295
 800356c:	d100      	bne.n	8003570 <memcpy+0xc>
 800356e:	4770      	bx	lr
 8003570:	b510      	push	{r4, lr}
 8003572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003576:	4291      	cmp	r1, r2
 8003578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800357c:	d1f9      	bne.n	8003572 <memcpy+0xe>
 800357e:	bd10      	pop	{r4, pc}

08003580 <_init>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr

0800358c <_fini>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr
