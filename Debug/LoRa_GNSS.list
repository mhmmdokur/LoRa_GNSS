
LoRa_GNSS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003504  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08003610  08003610  00004610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800383c  0800383c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800383c  0800383c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800383c  0800383c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800383c  0800383c  0000483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003840  08003840  00004840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003844  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c2c  2000000c  08003850  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c38  08003850  00005c38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a287  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5a  00000000  00000000  0000f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  00011218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f0  00000000  00000000  000119f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172ae  00000000  00000000  00011fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b25c  00000000  00000000  0002928e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e99  00000000  00000000  000344ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6383  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d50  00000000  00000000  000b63c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000b8118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080035f8 	.word	0x080035f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080035f8 	.word	0x080035f8

0800014c <loraGnssMain>:

Global_t GL = {0};


void loraGnssMain()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	DmaBaslat(&GL.usart2_st, &huart2);
 8000150:	4917      	ldr	r1, [pc, #92]	@ (80001b0 <loraGnssMain+0x64>)
 8000152:	4818      	ldr	r0, [pc, #96]	@ (80001b4 <loraGnssMain+0x68>)
 8000154:	f000 fbed 	bl	8000932 <DmaBaslat>
	DmaBaslat(&GL.usart3_st, &huart3);
 8000158:	4917      	ldr	r1, [pc, #92]	@ (80001b8 <loraGnssMain+0x6c>)
 800015a:	4818      	ldr	r0, [pc, #96]	@ (80001bc <loraGnssMain+0x70>)
 800015c:	f000 fbe9 	bl	8000932 <DmaBaslat>

	GL.lora_st.adres_u8 = 0x01;
 8000160:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <loraGnssMain+0x74>)
 8000162:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000166:	2201      	movs	r2, #1
 8000168:	f883 2568 	strb.w	r2, [r3, #1384]	@ 0x568
	GL.lora_st.kanal_u8 = 0x04;
 800016c:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <loraGnssMain+0x74>)
 800016e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000172:	2204      	movs	r2, #4
 8000174:	f883 2569 	strb.w	r2, [r3, #1385]	@ 0x569

	while(1)
	{
		if(1 == GL._50HzFlag_u8)
 8000178:	4b11      	ldr	r3, [pc, #68]	@ (80001c0 <loraGnssMain+0x74>)
 800017a:	7a5b      	ldrb	r3, [r3, #9]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d10e      	bne.n	800019e <loraGnssMain+0x52>
		{
			DmaVeriOku(&GL.usart2_st, &hdma_usart2_rx);
 8000180:	4910      	ldr	r1, [pc, #64]	@ (80001c4 <loraGnssMain+0x78>)
 8000182:	480c      	ldr	r0, [pc, #48]	@ (80001b4 <loraGnssMain+0x68>)
 8000184:	f000 fb86 	bl	8000894 <DmaVeriOku>
			DmaVeriOku(&GL.usart3_st, &hdma_usart3_rx);
 8000188:	490f      	ldr	r1, [pc, #60]	@ (80001c8 <loraGnssMain+0x7c>)
 800018a:	480c      	ldr	r0, [pc, #48]	@ (80001bc <loraGnssMain+0x70>)
 800018c:	f000 fb82 	bl	8000894 <DmaVeriOku>


			veri_paket_coz(&GL.usart3_st.dma_st.rxRingbuffer_st, &GL.veri_pkt_st);
 8000190:	490e      	ldr	r1, [pc, #56]	@ (80001cc <loraGnssMain+0x80>)
 8000192:	480f      	ldr	r0, [pc, #60]	@ (80001d0 <loraGnssMain+0x84>)
 8000194:	f000 f81e 	bl	80001d4 <veri_paket_coz>
//					       &GL.veri_pkt_st,
//						   &GL.lora_st);



			GL._50HzFlag_u8 = 0;
 8000198:	4b09      	ldr	r3, [pc, #36]	@ (80001c0 <loraGnssMain+0x74>)
 800019a:	2200      	movs	r2, #0
 800019c:	725a      	strb	r2, [r3, #9]
		}

		if(1 == GL._10HzFlag_u8)
 800019e:	4b08      	ldr	r3, [pc, #32]	@ (80001c0 <loraGnssMain+0x74>)
 80001a0:	79db      	ldrb	r3, [r3, #7]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d1e8      	bne.n	8000178 <loraGnssMain+0x2c>
		{

//			RingbufferDan_veri_Gonder(&Glo_st.usart3_txRingBuffer_st);

			GL._10HzFlag_u8 = 0;
 80001a6:	4b06      	ldr	r3, [pc, #24]	@ (80001c0 <loraGnssMain+0x74>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	71da      	strb	r2, [r3, #7]
		if(1 == GL._50HzFlag_u8)
 80001ac:	e7e4      	b.n	8000178 <loraGnssMain+0x2c>
 80001ae:	bf00      	nop
 80001b0:	20003ad8 	.word	0x20003ad8
 80001b4:	20000034 	.word	0x20000034
 80001b8:	20003b20 	.word	0x20003b20
 80001bc:	2000185c 	.word	0x2000185c
 80001c0:	20000028 	.word	0x20000028
 80001c4:	20003bac 	.word	0x20003bac
 80001c8:	20003bf0 	.word	0x20003bf0
 80001cc:	20003084 	.word	0x20003084
 80001d0:	20003074 	.word	0x20003074

080001d4 <veri_paket_coz>:
	}
}


void veri_paket_coz(ringbuffer_t *pBuffer, veri_paketi_t *veri_pkt )
{
 80001d4:	b590      	push	{r4, r7, lr}
 80001d6:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 80001da:	af00      	add	r7, sp, #0
 80001dc:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80001e0:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 80001e4:	6018      	str	r0, [r3, #0]
 80001e6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80001ea:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80001ee:	6019      	str	r1, [r3, #0]
	static uint8_t durum_u8  = BASLANGIC_BAYT_1;
	static uint16_t indeks_u16 = 0;
	static uint8_t gelenCrcMsb_u8  = 0;
	static uint8_t gelenCrcLsb_u8  = 0;
	uint8_t tVeri_u8 = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	f887 380b 	strb.w	r3, [r7, #2059]	@ 0x80b
	uint8_t tBuf_u8a[2048] = {0};
 80001f6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80001fa:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	3304      	adds	r3, #4
 8000204:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f003 f9c8 	bl	80035a0 <memset>
	uint16_t tVeriSayaci_u16 = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
	uint16_t okunanVeriSayisi_u16 = pBuffer->pending_u16;
 8000216:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800021a:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	895b      	ldrh	r3, [r3, #10]
 8000222:	f8a7 380c 	strh.w	r3, [r7, #2060]	@ 0x80c

	if(okunanVeriSayisi_u16 > sizeof(tBuf_u8a))
 8000226:	f8b7 380c 	ldrh.w	r3, [r7, #2060]	@ 0x80c
 800022a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800022e:	d903      	bls.n	8000238 <veri_paket_coz+0x64>
	{
		okunanVeriSayisi_u16  = sizeof(tBuf_u8a);
 8000230:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000234:	f8a7 380c 	strh.w	r3, [r7, #2060]	@ 0x80c
	}
	if(okunanVeriSayisi_u16 > 0)
 8000238:	f8b7 380c 	ldrh.w	r3, [r7, #2060]	@ 0x80c
 800023c:	2b00      	cmp	r3, #0
 800023e:	f000 80e8 	beq.w	8000412 <veri_paket_coz+0x23e>
	{
		ringbuffer_read(pBuffer, tBuf_u8a, okunanVeriSayisi_u16);
 8000242:	f8b7 280c 	ldrh.w	r2, [r7, #2060]	@ 0x80c
 8000246:	f107 0108 	add.w	r1, r7, #8
 800024a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800024e:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	f000 f9ce 	bl	80005f4 <ringbuffer_read>
	}

	while(okunanVeriSayisi_u16--)
 8000258:	e0db      	b.n	8000412 <veri_paket_coz+0x23e>
	{
		tVeri_u8 = tBuf_u8a[tVeriSayaci_u16++];
 800025a:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 800025e:	1c5a      	adds	r2, r3, #1
 8000260:	f8a7 280e 	strh.w	r2, [r7, #2062]	@ 0x80e
 8000264:	461a      	mov	r2, r3
 8000266:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800026a:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 800026e:	5c9b      	ldrb	r3, [r3, r2]
 8000270:	f887 380b 	strb.w	r3, [r7, #2059]	@ 0x80b

		switch( durum_u8 )
 8000274:	4b6e      	ldr	r3, [pc, #440]	@ (8000430 <veri_paket_coz+0x25c>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b05      	cmp	r3, #5
 800027a:	f200 80ca 	bhi.w	8000412 <veri_paket_coz+0x23e>
 800027e:	a201      	add	r2, pc, #4	@ (adr r2, 8000284 <veri_paket_coz+0xb0>)
 8000280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000284:	0800029d 	.word	0x0800029d
 8000288:	080002af 	.word	0x080002af
 800028c:	080002c7 	.word	0x080002c7
 8000290:	080002f7 	.word	0x080002f7
 8000294:	08000335 	.word	0x08000335
 8000298:	08000345 	.word	0x08000345
		{
			case BASLANGIC_BAYT_1:
			{
				if( tVeri_u8 ==  0x4D )
 800029c:	f897 380b 	ldrb.w	r3, [r7, #2059]	@ 0x80b
 80002a0:	2b4d      	cmp	r3, #77	@ 0x4d
 80002a2:	f040 80b3 	bne.w	800040c <veri_paket_coz+0x238>
				{
					durum_u8 =  BASLANGIC_BAYT_2;
 80002a6:	4b62      	ldr	r3, [pc, #392]	@ (8000430 <veri_paket_coz+0x25c>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	701a      	strb	r2, [r3, #0]
				}

				break;
 80002ac:	e0ae      	b.n	800040c <veri_paket_coz+0x238>
			}
			case BASLANGIC_BAYT_2:
			{
				if( tVeri_u8 ==  0x26 )
 80002ae:	f897 380b 	ldrb.w	r3, [r7, #2059]	@ 0x80b
 80002b2:	2b26      	cmp	r3, #38	@ 0x26
 80002b4:	d103      	bne.n	80002be <veri_paket_coz+0xea>
				{
					durum_u8 =  UZUNLUK;
 80002b6:	4b5e      	ldr	r3, [pc, #376]	@ (8000430 <veri_paket_coz+0x25c>)
 80002b8:	2202      	movs	r2, #2
 80002ba:	701a      	strb	r2, [r3, #0]
				else //makina sifirlanir
				{
					durum_u8  = BASLANGIC_BAYT_1;
				}

				break;
 80002bc:	e0a9      	b.n	8000412 <veri_paket_coz+0x23e>
					durum_u8  = BASLANGIC_BAYT_1;
 80002be:	4b5c      	ldr	r3, [pc, #368]	@ (8000430 <veri_paket_coz+0x25c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
				break;
 80002c4:	e0a5      	b.n	8000412 <veri_paket_coz+0x23e>
			}
			case UZUNLUK:
			{
				veri_pkt->veri_boyutu_u8  = tVeri_u8;
 80002c6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80002ca:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f897 280b 	ldrb.w	r2, [r7, #2059]	@ 0x80b
 80002d4:	705a      	strb	r2, [r3, #1]

				if( veri_pkt->veri_boyutu_u8 > 0 )
 80002d6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80002da:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d003      	beq.n	80002ee <veri_paket_coz+0x11a>
				{
					durum_u8 =  DATA_AL;
 80002e6:	4b52      	ldr	r3, [pc, #328]	@ (8000430 <veri_paket_coz+0x25c>)
 80002e8:	2203      	movs	r2, #3
 80002ea:	701a      	strb	r2, [r3, #0]
				}
				else //makina sifirlanir
				{
					durum_u8  = BASLANGIC_BAYT_1;
				}
				break;
 80002ec:	e091      	b.n	8000412 <veri_paket_coz+0x23e>
					durum_u8  = BASLANGIC_BAYT_1;
 80002ee:	4b50      	ldr	r3, [pc, #320]	@ (8000430 <veri_paket_coz+0x25c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
				break;
 80002f4:	e08d      	b.n	8000412 <veri_paket_coz+0x23e>
			}
			case DATA_AL:
			{
				veri_pkt->data[indeks_u16++] = tVeri_u8;
 80002f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000434 <veri_paket_coz+0x260>)
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	1c5a      	adds	r2, r3, #1
 80002fc:	b291      	uxth	r1, r2
 80002fe:	4a4d      	ldr	r2, [pc, #308]	@ (8000434 <veri_paket_coz+0x260>)
 8000300:	8011      	strh	r1, [r2, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000308:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4413      	add	r3, r2
 8000310:	f897 280b 	ldrb.w	r2, [r7, #2059]	@ 0x80b
 8000314:	709a      	strb	r2, [r3, #2]

				if( indeks_u16 == veri_pkt->veri_boyutu_u8 )
 8000316:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800031a:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	785b      	ldrb	r3, [r3, #1]
 8000322:	461a      	mov	r2, r3
 8000324:	4b43      	ldr	r3, [pc, #268]	@ (8000434 <veri_paket_coz+0x260>)
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	429a      	cmp	r2, r3
 800032a:	d171      	bne.n	8000410 <veri_paket_coz+0x23c>
				{
					durum_u8 =  CRC_MSB;
 800032c:	4b40      	ldr	r3, [pc, #256]	@ (8000430 <veri_paket_coz+0x25c>)
 800032e:	2204      	movs	r2, #4
 8000330:	701a      	strb	r2, [r3, #0]
				}

				break;
 8000332:	e06d      	b.n	8000410 <veri_paket_coz+0x23c>
			}
			case CRC_MSB:
			{
				gelenCrcMsb_u8 = tVeri_u8;
 8000334:	4a40      	ldr	r2, [pc, #256]	@ (8000438 <veri_paket_coz+0x264>)
 8000336:	f897 380b 	ldrb.w	r3, [r7, #2059]	@ 0x80b
 800033a:	7013      	strb	r3, [r2, #0]

				durum_u8  =  CRC_LSB;
 800033c:	4b3c      	ldr	r3, [pc, #240]	@ (8000430 <veri_paket_coz+0x25c>)
 800033e:	2205      	movs	r2, #5
 8000340:	701a      	strb	r2, [r3, #0]
				break;
 8000342:	e066      	b.n	8000412 <veri_paket_coz+0x23e>
			}
			case CRC_LSB:
			{

				gelenCrcLsb_u8 = tVeri_u8;
 8000344:	4a3d      	ldr	r2, [pc, #244]	@ (800043c <veri_paket_coz+0x268>)
 8000346:	f897 380b 	ldrb.w	r3, [r7, #2059]	@ 0x80b
 800034a:	7013      	strb	r3, [r2, #0]

				veri_pkt->crc_u16 = (gelenCrcMsb_u8 << 8) | (gelenCrcLsb_u8);
 800034c:	4b3a      	ldr	r3, [pc, #232]	@ (8000438 <veri_paket_coz+0x264>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	021b      	lsls	r3, r3, #8
 8000352:	b21a      	sxth	r2, r3
 8000354:	4b39      	ldr	r3, [pc, #228]	@ (800043c <veri_paket_coz+0x268>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	b21b      	sxth	r3, r3
 800035a:	4313      	orrs	r3, r2
 800035c:	b21b      	sxth	r3, r3
 800035e:	b29a      	uxth	r2, r3
 8000360:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000364:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

				if(veri_pkt->crc_u16 == crc16_ccitt(veri_pkt->data, indeks_u16))
 800036e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000372:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f8b3 40f8 	ldrh.w	r4, [r3, #248]	@ 0xf8
 800037c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000380:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	3302      	adds	r3, #2
 8000388:	4a2a      	ldr	r2, [pc, #168]	@ (8000434 <veri_paket_coz+0x260>)
 800038a:	8812      	ldrh	r2, [r2, #0]
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f858 	bl	8000444 <crc16_ccitt>
 8000394:	4603      	mov	r3, r0
 8000396:	429c      	cmp	r4, r3
 8000398:	d11c      	bne.n	80003d4 <veri_paket_coz+0x200>
				{
					parse_rtcm_v3_message(veri_pkt->data, indeks_u16, &GL.rtcm_st);
 800039a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800039e:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3302      	adds	r3, #2
 80003a6:	4a23      	ldr	r2, [pc, #140]	@ (8000434 <veri_paket_coz+0x260>)
 80003a8:	8812      	ldrh	r2, [r2, #0]
 80003aa:	4611      	mov	r1, r2
 80003ac:	4a24      	ldr	r2, [pc, #144]	@ (8000440 <veri_paket_coz+0x26c>)
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f97e 	bl	80006b0 <parse_rtcm_v3_message>
					veri_pkt->yakalanan_paket_u32++;
 80003b4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80003b8:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80003c2:	1c5a      	adds	r2, r3, #1
 80003c4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80003c8:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80003d2:	e00e      	b.n	80003f2 <veri_paket_coz+0x21e>
				}
				else
				{
					veri_pkt->hatali_paket_u32++;
 80003d4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80003d8:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80003e2:	1c5a      	adds	r2, r3, #1
 80003e4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80003e8:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
				}
				//makina sifirlanir
				durum_u8  =  BASLANGIC_BAYT_1;
 80003f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <veri_paket_coz+0x25c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]
				indeks_u16 = 0;
 80003f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <veri_paket_coz+0x260>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	801a      	strh	r2, [r3, #0]
				gelenCrcLsb_u8 = 0;
 80003fe:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <veri_paket_coz+0x268>)
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
				gelenCrcMsb_u8 = 0;
 8000404:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <veri_paket_coz+0x264>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]

				break;
 800040a:	e002      	b.n	8000412 <veri_paket_coz+0x23e>
				break;
 800040c:	bf00      	nop
 800040e:	e000      	b.n	8000412 <veri_paket_coz+0x23e>
				break;
 8000410:	bf00      	nop
	while(okunanVeriSayisi_u16--)
 8000412:	f8b7 380c 	ldrh.w	r3, [r7, #2060]	@ 0x80c
 8000416:	1e5a      	subs	r2, r3, #1
 8000418:	f8a7 280c 	strh.w	r2, [r7, #2060]	@ 0x80c
 800041c:	2b00      	cmp	r3, #0
 800041e:	f47f af1c 	bne.w	800025a <veri_paket_coz+0x86>
			}
		}
	}
}
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	f607 0714 	addw	r7, r7, #2068	@ 0x814
 800042a:	46bd      	mov	sp, r7
 800042c:	bd90      	pop	{r4, r7, pc}
 800042e:	bf00      	nop
 8000430:	20003684 	.word	0x20003684
 8000434:	20003686 	.word	0x20003686
 8000438:	20003688 	.word	0x20003688
 800043c:	20003689 	.word	0x20003689
 8000440:	20003184 	.word	0x20003184

08000444 <crc16_ccitt>:


uint16_t crc16_ccitt(const uint8_t* buffer, size_t size)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	81fb      	strh	r3, [r7, #14]
    while (size-- > 0)
 8000452:	e013      	b.n	800047c <crc16_ccitt+0x38>
    {
    	crc = (crc << 8) ^ ccitt_hash[((crc >> 8) ^ *(buffer++)) & 0x00FF];
 8000454:	89fb      	ldrh	r3, [r7, #14]
 8000456:	021b      	lsls	r3, r3, #8
 8000458:	b21a      	sxth	r2, r3
 800045a:	89fb      	ldrh	r3, [r7, #14]
 800045c:	0a1b      	lsrs	r3, r3, #8
 800045e:	b29b      	uxth	r3, r3
 8000460:	4618      	mov	r0, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	1c59      	adds	r1, r3, #1
 8000466:	6079      	str	r1, [r7, #4]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4043      	eors	r3, r0
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4909      	ldr	r1, [pc, #36]	@ (8000494 <crc16_ccitt+0x50>)
 8000470:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000474:	b21b      	sxth	r3, r3
 8000476:	4053      	eors	r3, r2
 8000478:	b21b      	sxth	r3, r3
 800047a:	81fb      	strh	r3, [r7, #14]
    while (size-- > 0)
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	1e5a      	subs	r2, r3, #1
 8000480:	603a      	str	r2, [r7, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d1e6      	bne.n	8000454 <crc16_ccitt+0x10>
    }
    return crc;
 8000486:	89fb      	ldrh	r3, [r7, #14]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	08003610 	.word	0x08003610

08000498 <ringbuffer_init>:
#include "ringbuffer.h"


ringbuffer_result_t ringbuffer_init(uint8_t *pData, uint16_t len_u16, ringbuffer_t *pBuffer)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	460b      	mov	r3, r1
 80004a2:	607a      	str	r2, [r7, #4]
 80004a4:	817b      	strh	r3, [r7, #10]
	if(len_u16 < 1)
 80004a6:	897b      	ldrh	r3, [r7, #10]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d101      	bne.n	80004b0 <ringbuffer_init+0x18>
	{
		return RINGBUFFER_RES_ERROR;
 80004ac:	2300      	movs	r3, #0
 80004ae:	e012      	b.n	80004d6 <ringbuffer_init+0x3e>
	}

	pBuffer->len_u16 = len_u16;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	897a      	ldrh	r2, [r7, #10]
 80004b4:	809a      	strh	r2, [r3, #4]
	pBuffer->pData_u8a = pData;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	68fa      	ldr	r2, [r7, #12]
 80004ba:	601a      	str	r2, [r3, #0]
	pBuffer->readPtr_u16 = 0;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	80da      	strh	r2, [r3, #6]
	pBuffer->writePtr_u16 = 0;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2200      	movs	r2, #0
 80004c6:	811a      	strh	r2, [r3, #8]
	pBuffer->pending_u16 = 0;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2200      	movs	r2, #0
 80004cc:	815a      	strh	r2, [r3, #10]
	pBuffer->status_et = RINGBUFFER_STATUS_IDLE;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2202      	movs	r2, #2
 80004d2:	731a      	strb	r2, [r3, #12]

	return RINGBUFFER_RES_OK;
 80004d4:	2301      	movs	r3, #1
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <ringbuffer_shift_writePtr>:

	return RINGBUFFER_RES_OK;
}

ringbuffer_result_t ringbuffer_shift_writePtr(ringbuffer_t *pBuffer, uint16_t len_u16)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	807b      	strh	r3, [r7, #2]
	if(len_u16 >= pBuffer->len_u16)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	889b      	ldrh	r3, [r3, #4]
 80004f0:	887a      	ldrh	r2, [r7, #2]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d301      	bcc.n	80004fa <ringbuffer_shift_writePtr+0x1a>
	{
		return RINGBUFFER_RES_ERROR;
 80004f6:	2300      	movs	r3, #0
 80004f8:	e032      	b.n	8000560 <ringbuffer_shift_writePtr+0x80>
	}

	pBuffer->pending_u16 += len_u16;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	895a      	ldrh	r2, [r3, #10]
 80004fe:	887b      	ldrh	r3, [r7, #2]
 8000500:	4413      	add	r3, r2
 8000502:	b29a      	uxth	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	815a      	strh	r2, [r3, #10]
	pBuffer->writePtr_u16 += len_u16;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	891a      	ldrh	r2, [r3, #8]
 800050c:	887b      	ldrh	r3, [r7, #2]
 800050e:	4413      	add	r3, r2
 8000510:	b29a      	uxth	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	811a      	strh	r2, [r3, #8]
	if(pBuffer->writePtr_u16 >= pBuffer->len_u16)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	891a      	ldrh	r2, [r3, #8]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	889b      	ldrh	r3, [r3, #4]
 800051e:	429a      	cmp	r2, r3
 8000520:	d30b      	bcc.n	800053a <ringbuffer_shift_writePtr+0x5a>
	{
		pBuffer->writePtr_u16 %= pBuffer->len_u16;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	891b      	ldrh	r3, [r3, #8]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	8892      	ldrh	r2, [r2, #4]
 800052a:	fbb3 f1f2 	udiv	r1, r3, r2
 800052e:	fb01 f202 	mul.w	r2, r1, r2
 8000532:	1a9b      	subs	r3, r3, r2
 8000534:	b29a      	uxth	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	811a      	strh	r2, [r3, #8]
	}
	if(pBuffer->pending_u16 >= pBuffer->len_u16)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	895a      	ldrh	r2, [r3, #10]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	889b      	ldrh	r3, [r3, #4]
 8000542:	429a      	cmp	r2, r3
 8000544:	d30b      	bcc.n	800055e <ringbuffer_shift_writePtr+0x7e>
	{
		pBuffer->pending_u16 %= pBuffer->len_u16;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	895b      	ldrh	r3, [r3, #10]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	8892      	ldrh	r2, [r2, #4]
 800054e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000552:	fb01 f202 	mul.w	r2, r1, r2
 8000556:	1a9b      	subs	r3, r3, r2
 8000558:	b29a      	uxth	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	815a      	strh	r2, [r3, #10]
	}

	return RINGBUFFER_RES_OK;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <ringbuffer_read_byte>:
		}
	}
}

uint8_t ringbuffer_read_byte(ringbuffer_t *pBuffer)
{
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	uint8_t tVeri_u8 = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]

	if(pBuffer->readPtr_u16 >= pBuffer->len_u16)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	88da      	ldrh	r2, [r3, #6]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	889b      	ldrh	r3, [r3, #4]
 800057e:	429a      	cmp	r2, r3
 8000580:	d30b      	bcc.n	800059a <ringbuffer_read_byte+0x30>
	{
		pBuffer->readPtr_u16 %= pBuffer->len_u16;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	88db      	ldrh	r3, [r3, #6]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	8892      	ldrh	r2, [r2, #4]
 800058a:	fbb3 f1f2 	udiv	r1, r3, r2
 800058e:	fb01 f202 	mul.w	r2, r1, r2
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	b29a      	uxth	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	80da      	strh	r2, [r3, #6]
	}
	tVeri_u8 = pBuffer->pData_u8a[pBuffer->readPtr_u16++];
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	88db      	ldrh	r3, [r3, #6]
 80005a2:	1c59      	adds	r1, r3, #1
 80005a4:	b288      	uxth	r0, r1
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	80c8      	strh	r0, [r1, #6]
 80005aa:	4413      	add	r3, r2
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	73fb      	strb	r3, [r7, #15]
	if(pBuffer->pending_u16 > 0)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	895b      	ldrh	r3, [r3, #10]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d005      	beq.n	80005c4 <ringbuffer_read_byte+0x5a>
	{
		pBuffer->pending_u16--;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	895b      	ldrh	r3, [r3, #10]
 80005bc:	3b01      	subs	r3, #1
 80005be:	b29a      	uxth	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	815a      	strh	r2, [r3, #10]
	}

	if(pBuffer->readPtr_u16 >= pBuffer->len_u16)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	88da      	ldrh	r2, [r3, #6]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	889b      	ldrh	r3, [r3, #4]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d30b      	bcc.n	80005e8 <ringbuffer_read_byte+0x7e>
	{
		pBuffer->readPtr_u16 %= pBuffer->len_u16;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	88db      	ldrh	r3, [r3, #6]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	8892      	ldrh	r2, [r2, #4]
 80005d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80005dc:	fb01 f202 	mul.w	r2, r1, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	80da      	strh	r2, [r3, #6]
	}

	return tVeri_u8;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <ringbuffer_read>:

ringbuffer_result_t ringbuffer_read(ringbuffer_t *pBuffer, uint8_t *pVeri, uint16_t len_u16)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	4613      	mov	r3, r2
 8000600:	80fb      	strh	r3, [r7, #6]
	uint16_t tPtr_u16 = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	82fb      	strh	r3, [r7, #22]

	if(len_u16 >= pBuffer->len_u16)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	889b      	ldrh	r3, [r3, #4]
 800060a:	88fa      	ldrh	r2, [r7, #6]
 800060c:	429a      	cmp	r2, r3
 800060e:	d301      	bcc.n	8000614 <ringbuffer_read+0x20>
	{
		return RINGBUFFER_RES_ERROR;
 8000610:	2300      	movs	r3, #0
 8000612:	e012      	b.n	800063a <ringbuffer_read+0x46>
	}

	for(tPtr_u16 = 0; tPtr_u16 < len_u16; tPtr_u16++)
 8000614:	2300      	movs	r3, #0
 8000616:	82fb      	strh	r3, [r7, #22]
 8000618:	e00a      	b.n	8000630 <ringbuffer_read+0x3c>
	{
		pVeri[tPtr_u16] = ringbuffer_read_byte(pBuffer);
 800061a:	8afb      	ldrh	r3, [r7, #22]
 800061c:	68ba      	ldr	r2, [r7, #8]
 800061e:	18d4      	adds	r4, r2, r3
 8000620:	68f8      	ldr	r0, [r7, #12]
 8000622:	f7ff ffa2 	bl	800056a <ringbuffer_read_byte>
 8000626:	4603      	mov	r3, r0
 8000628:	7023      	strb	r3, [r4, #0]
	for(tPtr_u16 = 0; tPtr_u16 < len_u16; tPtr_u16++)
 800062a:	8afb      	ldrh	r3, [r7, #22]
 800062c:	3301      	adds	r3, #1
 800062e:	82fb      	strh	r3, [r7, #22]
 8000630:	8afa      	ldrh	r2, [r7, #22]
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	429a      	cmp	r2, r3
 8000636:	d3f0      	bcc.n	800061a <ringbuffer_read+0x26>
	}

	return RINGBUFFER_RES_OK;
 8000638:	2301      	movs	r3, #1
}
 800063a:	4618      	mov	r0, r3
 800063c:	371c      	adds	r7, #28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd90      	pop	{r4, r7, pc}
	...

08000644 <compute_crc24q>:
#include <string.h>


// Function to compute the CRC-24Q (used in RTCM v3)
uint32_t compute_crc24q(const uint8_t *buffer, int length)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
    int i;

    while (length--) {
 8000652:	e01d      	b.n	8000690 <compute_crc24q+0x4c>
        crc ^= (*buffer++) << 16;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	041b      	lsls	r3, r3, #16
 800065e:	461a      	mov	r2, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4053      	eors	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < 8; i++) {
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	e00e      	b.n	800068a <compute_crc24q+0x46>
            crc <<= 1;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
            if (crc & 0x1000000) {
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000678:	2b00      	cmp	r3, #0
 800067a:	d003      	beq.n	8000684 <compute_crc24q+0x40>
                crc ^= 0x1864CFB;
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <compute_crc24q+0x68>)
 8000680:	4053      	eors	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < 8; i++) {
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	3301      	adds	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b07      	cmp	r3, #7
 800068e:	dded      	ble.n	800066c <compute_crc24q+0x28>
    while (length--) {
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	1e5a      	subs	r2, r3, #1
 8000694:	603a      	str	r2, [r7, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1dc      	bne.n	8000654 <compute_crc24q+0x10>
            }
        }
    }
    return crc & 0xFFFFFF;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	01864cfb 	.word	0x01864cfb

080006b0 <parse_rtcm_v3_message>:



// RTCM v3 Message Parser State Machine
void parse_rtcm_v3_message(uint8_t *data, int data_length, Rtcm_t *pRtcm_st)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
    static rtcm_state_t state = STATE_PREAMBLE;
    static uint16_t length = 0;
    static uint16_t index = 0;
    static uint8_t message[1024];
    uint32_t crc = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < data_length; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
 80006c4:	e0d2      	b.n	800086c <parse_rtcm_v3_message+0x1bc>
    {
        uint8_t byte = data[i];
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	75fb      	strb	r3, [r7, #23]

		switch (state) {
 80006d0:	4b6b      	ldr	r3, [pc, #428]	@ (8000880 <parse_rtcm_v3_message+0x1d0>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	f200 80c6 	bhi.w	8000866 <parse_rtcm_v3_message+0x1b6>
 80006da:	a201      	add	r2, pc, #4	@ (adr r2, 80006e0 <parse_rtcm_v3_message+0x30>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	080006f1 	.word	0x080006f1
 80006e4:	08000725 	.word	0x08000725
 80006e8:	0800077b 	.word	0x0800077b
 80006ec:	080007a7 	.word	0x080007a7
			case STATE_PREAMBLE:
			{
				if (byte == 0xD3) {
 80006f0:	7dfb      	ldrb	r3, [r7, #23]
 80006f2:	2bd3      	cmp	r3, #211	@ 0xd3
 80006f4:	f040 80b0 	bne.w	8000858 <parse_rtcm_v3_message+0x1a8>
					state = STATE_LENGTH;
 80006f8:	4b61      	ldr	r3, [pc, #388]	@ (8000880 <parse_rtcm_v3_message+0x1d0>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
					length = 0;
 80006fe:	4b61      	ldr	r3, [pc, #388]	@ (8000884 <parse_rtcm_v3_message+0x1d4>)
 8000700:	2200      	movs	r2, #0
 8000702:	801a      	strh	r2, [r3, #0]
					index = 0;
 8000704:	4b60      	ldr	r3, [pc, #384]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 8000706:	2200      	movs	r2, #0
 8000708:	801a      	strh	r2, [r3, #0]
					crc = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
					message[index++] = byte;
 800070e:	4b5e      	ldr	r3, [pc, #376]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	b291      	uxth	r1, r2
 8000716:	4a5c      	ldr	r2, [pc, #368]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 8000718:	8011      	strh	r1, [r2, #0]
 800071a:	4619      	mov	r1, r3
 800071c:	4a5b      	ldr	r2, [pc, #364]	@ (800088c <parse_rtcm_v3_message+0x1dc>)
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	5453      	strb	r3, [r2, r1]
				}
				break;
 8000722:	e099      	b.n	8000858 <parse_rtcm_v3_message+0x1a8>
			}

			case STATE_LENGTH:
			{
				if (index == 1) {
 8000724:	4b58      	ldr	r3, [pc, #352]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d108      	bne.n	800073e <parse_rtcm_v3_message+0x8e>
					length = (byte & 0x03) << 8; // İlk byte'ı uzunluğun yüksek 8 bitine yerleştir
 800072c:	7dfb      	ldrb	r3, [r7, #23]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b29b      	uxth	r3, r3
 8000732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b52      	ldr	r3, [pc, #328]	@ (8000884 <parse_rtcm_v3_message+0x1d4>)
 800073a:	801a      	strh	r2, [r3, #0]
 800073c:	e00b      	b.n	8000756 <parse_rtcm_v3_message+0xa6>
				} else if (index == 2) {
 800073e:	4b52      	ldr	r3, [pc, #328]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d107      	bne.n	8000756 <parse_rtcm_v3_message+0xa6>
					length |= byte; // İkinci byte'ı uzunluğun düşük 8 bitine yerleştir
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b4e      	ldr	r3, [pc, #312]	@ (8000884 <parse_rtcm_v3_message+0x1d4>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	4313      	orrs	r3, r2
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b4c      	ldr	r3, [pc, #304]	@ (8000884 <parse_rtcm_v3_message+0x1d4>)
 8000754:	801a      	strh	r2, [r3, #0]
				}
				message[index++] = byte;
 8000756:	4b4c      	ldr	r3, [pc, #304]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	b291      	uxth	r1, r2
 800075e:	4a4a      	ldr	r2, [pc, #296]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 8000760:	8011      	strh	r1, [r2, #0]
 8000762:	4619      	mov	r1, r3
 8000764:	4a49      	ldr	r2, [pc, #292]	@ (800088c <parse_rtcm_v3_message+0x1dc>)
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	5453      	strb	r3, [r2, r1]
				if (index == 3) {
 800076a:	4b47      	ldr	r3, [pc, #284]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d174      	bne.n	800085c <parse_rtcm_v3_message+0x1ac>
					state = STATE_MESSAGE;
 8000772:	4b43      	ldr	r3, [pc, #268]	@ (8000880 <parse_rtcm_v3_message+0x1d0>)
 8000774:	2202      	movs	r2, #2
 8000776:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000778:	e070      	b.n	800085c <parse_rtcm_v3_message+0x1ac>
			}

			case STATE_MESSAGE:
			{
				message[index++] = byte;
 800077a:	4b43      	ldr	r3, [pc, #268]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	b291      	uxth	r1, r2
 8000782:	4a41      	ldr	r2, [pc, #260]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 8000784:	8011      	strh	r1, [r2, #0]
 8000786:	4619      	mov	r1, r3
 8000788:	4a40      	ldr	r2, [pc, #256]	@ (800088c <parse_rtcm_v3_message+0x1dc>)
 800078a:	7dfb      	ldrb	r3, [r7, #23]
 800078c:	5453      	strb	r3, [r2, r1]
				if (index == (3 + length)) {  // 3 bytes header + message length
 800078e:	4b3e      	ldr	r3, [pc, #248]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	4b3b      	ldr	r3, [pc, #236]	@ (8000884 <parse_rtcm_v3_message+0x1d4>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	3303      	adds	r3, #3
 800079a:	429a      	cmp	r2, r3
 800079c:	d160      	bne.n	8000860 <parse_rtcm_v3_message+0x1b0>
					state = STATE_CRC;
 800079e:	4b38      	ldr	r3, [pc, #224]	@ (8000880 <parse_rtcm_v3_message+0x1d0>)
 80007a0:	2203      	movs	r2, #3
 80007a2:	701a      	strb	r2, [r3, #0]
				}
				break;
 80007a4:	e05c      	b.n	8000860 <parse_rtcm_v3_message+0x1b0>
			}

			case STATE_CRC:
			{
				message[index++] = byte;
 80007a6:	4b38      	ldr	r3, [pc, #224]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	b291      	uxth	r1, r2
 80007ae:	4a36      	ldr	r2, [pc, #216]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 80007b0:	8011      	strh	r1, [r2, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4a35      	ldr	r2, [pc, #212]	@ (800088c <parse_rtcm_v3_message+0x1dc>)
 80007b6:	7dfb      	ldrb	r3, [r7, #23]
 80007b8:	5453      	strb	r3, [r2, r1]
				if ((index) == (3 + length + 3))
 80007ba:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <parse_rtcm_v3_message+0x1d4>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	3306      	adds	r3, #6
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d14c      	bne.n	8000864 <parse_rtcm_v3_message+0x1b4>
				{  // 3 bytes header + message length + 3 bytes CRC
					crc = (message[index-3] << 16) | (message[index-2] << 8) | message[index-1];
 80007ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	3b03      	subs	r3, #3
 80007d0:	4a2e      	ldr	r2, [pc, #184]	@ (800088c <parse_rtcm_v3_message+0x1dc>)
 80007d2:	5cd3      	ldrb	r3, [r2, r3]
 80007d4:	041a      	lsls	r2, r3, #16
 80007d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	3b02      	subs	r3, #2
 80007dc:	492b      	ldr	r1, [pc, #172]	@ (800088c <parse_rtcm_v3_message+0x1dc>)
 80007de:	5ccb      	ldrb	r3, [r1, r3]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	4313      	orrs	r3, r2
 80007e4:	4a28      	ldr	r2, [pc, #160]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 80007e6:	8812      	ldrh	r2, [r2, #0]
 80007e8:	3a01      	subs	r2, #1
 80007ea:	4928      	ldr	r1, [pc, #160]	@ (800088c <parse_rtcm_v3_message+0x1dc>)
 80007ec:	5c8a      	ldrb	r2, [r1, r2]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	61bb      	str	r3, [r7, #24]
					uint32_t computed_crc = compute_crc24q(message, 3 + length);
 80007f2:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <parse_rtcm_v3_message+0x1d4>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	3303      	adds	r3, #3
 80007f8:	4619      	mov	r1, r3
 80007fa:	4824      	ldr	r0, [pc, #144]	@ (800088c <parse_rtcm_v3_message+0x1dc>)
 80007fc:	f7ff ff22 	bl	8000644 <compute_crc24q>
 8000800:	6138      	str	r0, [r7, #16]

					if (crc == computed_crc)
 8000802:	69ba      	ldr	r2, [r7, #24]
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	429a      	cmp	r2, r3
 8000808:	d114      	bne.n	8000834 <parse_rtcm_v3_message+0x184>
					{
//						memcpy(pRtcm_st->rtcm_buffer, message, index);

						DmaVeriGonder(&huart2, message, index);
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	491e      	ldr	r1, [pc, #120]	@ (800088c <parse_rtcm_v3_message+0x1dc>)
 8000812:	481f      	ldr	r0, [pc, #124]	@ (8000890 <parse_rtcm_v3_message+0x1e0>)
 8000814:	f000 f8b6 	bl	8000984 <DmaVeriGonder>

						pRtcm_st->veri_boyutu_u16 = index;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 800081a:	881a      	ldrh	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f8a3 240a 	strh.w	r2, [r3, #1034]	@ 0x40a
						pRtcm_st->basarili_mesaj_u32++;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	601a      	str	r2, [r3, #0]
						pRtcm_st->rtcm_mesaj_geldi_u8 = 1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	721a      	strb	r2, [r3, #8]
 8000832:	e007      	b.n	8000844 <parse_rtcm_v3_message+0x194>
					}
					else
					{
						pRtcm_st->rtcm_mesaj_geldi_u8 = 0;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	721a      	strb	r2, [r3, #8]
						pRtcm_st->crc_hatali_mesaj_u32++;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	605a      	str	r2, [r3, #4]
					}

					state = STATE_PREAMBLE;
 8000844:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <parse_rtcm_v3_message+0x1d0>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
					length = 0;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <parse_rtcm_v3_message+0x1d4>)
 800084c:	2200      	movs	r2, #0
 800084e:	801a      	strh	r2, [r3, #0]
					index = 0;
 8000850:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <parse_rtcm_v3_message+0x1d8>)
 8000852:	2200      	movs	r2, #0
 8000854:	801a      	strh	r2, [r3, #0]
				}
				break;
 8000856:	e005      	b.n	8000864 <parse_rtcm_v3_message+0x1b4>
				break;
 8000858:	bf00      	nop
 800085a:	e004      	b.n	8000866 <parse_rtcm_v3_message+0x1b6>
				break;
 800085c:	bf00      	nop
 800085e:	e002      	b.n	8000866 <parse_rtcm_v3_message+0x1b6>
				break;
 8000860:	bf00      	nop
 8000862:	e000      	b.n	8000866 <parse_rtcm_v3_message+0x1b6>
				break;
 8000864:	bf00      	nop
    for (int i = 0; i < data_length; i++)
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3301      	adds	r3, #1
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	429a      	cmp	r2, r3
 8000872:	f6ff af28 	blt.w	80006c6 <parse_rtcm_v3_message+0x16>
			}
		}
    }
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000368a 	.word	0x2000368a
 8000884:	2000368c 	.word	0x2000368c
 8000888:	2000368e 	.word	0x2000368e
 800088c:	20003690 	.word	0x20003690
 8000890:	20003ad8 	.word	0x20003ad8

08000894 <DmaVeriOku>:
#include <string.h>



void DmaVeriOku(Uart_t *pUart_st, DMA_HandleTypeDef *dmaHandler)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	uint16_t tOkunan = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	81fb      	strh	r3, [r7, #14]

	if(dmaHandler->Instance->CNDTR < pUart_st->dma_st.dmaSayac_u16)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80008ae:	f8b2 2804 	ldrh.w	r2, [r2, #2052]	@ 0x804
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d20b      	bcs.n	80008ce <DmaVeriOku+0x3a>
	{
		tOkunan = (pUart_st->dma_st.dmaSayac_u16 - dmaHandler->Instance->CNDTR);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008bc:	f8b3 2804 	ldrh.w	r2, [r3, #2052]	@ 0x804
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	81fb      	strh	r3, [r7, #14]
 80008cc:	e01b      	b.n	8000906 <DmaVeriOku+0x72>
	}
	else if(dmaHandler->Instance->CNDTR > pUart_st->dma_st.dmaSayac_u16)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80008da:	f8b2 2804 	ldrh.w	r2, [r2, #2052]	@ 0x804
 80008de:	4293      	cmp	r3, r2
 80008e0:	d911      	bls.n	8000906 <DmaVeriOku+0x72>
	{
		tOkunan = (pUart_st->dma_st.dmaSayac_u16 + pUart_st->dma_st.rxRingbuffer_st.len_u16 - dmaHandler->Instance->CNDTR);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008e8:	f8b3 2804 	ldrh.w	r2, [r3, #2052]	@ 0x804
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008f2:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	@ 0x81c
 80008f6:	4413      	add	r3, r2
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	b29b      	uxth	r3, r3
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	81fb      	strh	r3, [r7, #14]
	}
	pUart_st->dma_st.dmaSayac_u16 = dmaHandler->Instance->CNDTR;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	b29a      	uxth	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000914:	f8a3 2804 	strh.w	r2, [r3, #2052]	@ 0x804

	ringbuffer_shift_writePtr(&pUart_st->dma_st.rxRingbuffer_st, tOkunan);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 800091e:	3318      	adds	r3, #24
 8000920:	89fa      	ldrh	r2, [r7, #14]
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fddb 	bl	80004e0 <ringbuffer_shift_writePtr>
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <DmaBaslat>:



void DmaBaslat(Uart_t *pUart_st, UART_HandleTypeDef *pUartHandle)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]

	UART_Start_Receive_DMA(pUartHandle, pUart_st->rxBuffer, UART_RX_MAKS_BOYUT);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3301      	adds	r3, #1
 8000940:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000944:	4619      	mov	r1, r3
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f002 fb40 	bl	8002fcc <UART_Start_Receive_DMA>

	ringbuffer_init(pUart_st->txBuffer, sizeof(pUart_st->txBuffer), &pUart_st->dma_st.txRingbuffer_st);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000952:	3301      	adds	r3, #1
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	f502 52c0 	add.w	r2, r2, #6144	@ 0x1800
 800095a:	3208      	adds	r2, #8
 800095c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fd99 	bl	8000498 <ringbuffer_init>
	ringbuffer_init(pUart_st->rxBuffer, sizeof(pUart_st->rxBuffer), &pUart_st->dma_st.rxRingbuffer_st);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	1c58      	adds	r0, r3, #1
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 8000970:	3318      	adds	r3, #24
 8000972:	461a      	mov	r2, r3
 8000974:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000978:	f7ff fd8e 	bl	8000498 <ringbuffer_init>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <DmaVeriGonder>:


void DmaVeriGonder(UART_HandleTypeDef *pUartHandle, uint8_t *pBuffer, uint16_t boyut_u16)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	4613      	mov	r3, r2
 8000990:	80fb      	strh	r3, [r7, #6]
		HAL_UART_Transmit(pUartHandle, pBuffer, boyut_u16, 100);
 8000992:	88fa      	ldrh	r2, [r7, #6]
 8000994:	2364      	movs	r3, #100	@ 0x64
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f001 fe65 	bl	8002668 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800099e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a2:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <DmaVeriGonder+0x2c>)
 80009a4:	f001 f9e6 	bl	8001d74 <HAL_GPIO_TogglePin>

}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40011000 	.word	0x40011000

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fc2e 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f80e 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 f8fe 	bl	8000bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c4:	f000 f8ce 	bl	8000b64 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80009c8:	f000 f84e 	bl	8000a68 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009cc:	f000 f876 	bl	8000abc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80009d0:	f000 f89e 	bl	8000b10 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  loraGnssMain();
 80009d4:	f7ff fbba 	bl	800014c <loraGnssMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <main+0x24>

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b090      	sub	sp, #64	@ 0x40
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0318 	add.w	r3, r7, #24
 80009e6:	2228      	movs	r2, #40	@ 0x28
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fdd8 	bl	80035a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a1a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 0318 	add.w	r3, r7, #24
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 f9bf 	bl	8001da8 <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a30:	f000 f942 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	230f      	movs	r3, #15
 8000a36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 fc2c 	bl	80022ac <HAL_RCC_ClockConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a5a:	f000 f92d 	bl	8000cb8 <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3740      	adds	r7, #64	@ 0x40
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <MX_USART1_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	f001 fd92 	bl	80025c8 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f905 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20003a90 	.word	0x20003a90
 8000ab8:	40013800 	.word	0x40013800

08000abc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <MX_USART2_UART_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000af4:	f001 fd68 	bl	80025c8 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 f8db 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20003ad8 	.word	0x20003ad8
 8000b0c:	40004400 	.word	0x40004400

08000b10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b14:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_USART3_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <MX_USART3_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <MX_USART3_UART_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_USART3_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_USART3_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_USART3_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_USART3_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_USART3_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_USART3_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_USART3_UART_Init+0x4c>)
 8000b48:	f001 fd3e 	bl	80025c8 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 f8b1 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20003b20 	.word	0x20003b20
 8000b60:	40004800 	.word	0x40004800

08000b64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6a:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <MX_DMA_Init+0x58>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a13      	ldr	r2, [pc, #76]	@ (8000bbc <MX_DMA_Init+0x58>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6153      	str	r3, [r2, #20]
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_DMA_Init+0x58>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	200d      	movs	r0, #13
 8000b88:	f000 fc7f 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b8c:	200d      	movs	r0, #13
 8000b8e:	f000 fc98 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 fc77 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b9c:	200f      	movs	r0, #15
 8000b9e:	f000 fc90 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2010      	movs	r0, #16
 8000ba8:	f000 fc6f 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bac:	2010      	movs	r0, #16
 8000bae:	f000 fc88 	bl	80014c2 <HAL_NVIC_EnableIRQ>

}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	4b35      	ldr	r3, [pc, #212]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a34      	ldr	r2, [pc, #208]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b32      	ldr	r3, [pc, #200]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0310 	and.w	r3, r3, #16
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bec:	4b2f      	ldr	r3, [pc, #188]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000bf2:	f043 0320 	orr.w	r3, r3, #32
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0320 	and.w	r3, r3, #32
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a28      	ldr	r2, [pc, #160]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a22      	ldr	r2, [pc, #136]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <MX_GPIO_Init+0xec>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c3a:	481d      	ldr	r0, [pc, #116]	@ (8000cb0 <MX_GPIO_Init+0xf0>)
 8000c3c:	f001 f882 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin_Pin|M0_Pin_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000c46:	481b      	ldr	r0, [pc, #108]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000c48:	f001 f87c 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	4812      	ldr	r0, [pc, #72]	@ (8000cb0 <MX_GPIO_Init+0xf0>)
 8000c66:	f000 fee9 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin_Pin M0_Pin_Pin */
  GPIO_InitStruct.Pin = M1_Pin_Pin|M0_Pin_Pin;
 8000c6a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4619      	mov	r1, r3
 8000c82:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000c84:	f000 feda 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Aux_pin_Pin */
  GPIO_InitStruct.Pin = Aux_pin_Pin;
 8000c88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Aux_pin_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_GPIO_Init+0xf4>)
 8000c9e:	f000 fecd 	bl	8001a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3720      	adds	r7, #32
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <Error_Handler+0x8>

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_MspInit+0x60>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_MspInit+0x60>)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	@ 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0320 	add.w	r3, r7, #32
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a9a      	ldr	r2, [pc, #616]	@ (8000fac <HAL_UART_MspInit+0x284>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d161      	bne.n	8000e0c <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d48:	4b99      	ldr	r3, [pc, #612]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a98      	ldr	r2, [pc, #608]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000d4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b96      	ldr	r3, [pc, #600]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b93      	ldr	r3, [pc, #588]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a92      	ldr	r2, [pc, #584]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b90      	ldr	r3, [pc, #576]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4889      	ldr	r0, [pc, #548]	@ (8000fb4 <HAL_UART_MspInit+0x28c>)
 8000d8e:	f000 fe55 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	4619      	mov	r1, r3
 8000da6:	4883      	ldr	r0, [pc, #524]	@ (8000fb4 <HAL_UART_MspInit+0x28c>)
 8000da8:	f000 fe48 	bl	8001a3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000dac:	4b82      	ldr	r3, [pc, #520]	@ (8000fb8 <HAL_UART_MspInit+0x290>)
 8000dae:	4a83      	ldr	r2, [pc, #524]	@ (8000fbc <HAL_UART_MspInit+0x294>)
 8000db0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db2:	4b81      	ldr	r3, [pc, #516]	@ (8000fb8 <HAL_UART_MspInit+0x290>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db8:	4b7f      	ldr	r3, [pc, #508]	@ (8000fb8 <HAL_UART_MspInit+0x290>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dbe:	4b7e      	ldr	r3, [pc, #504]	@ (8000fb8 <HAL_UART_MspInit+0x290>)
 8000dc0:	2280      	movs	r2, #128	@ 0x80
 8000dc2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc4:	4b7c      	ldr	r3, [pc, #496]	@ (8000fb8 <HAL_UART_MspInit+0x290>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dca:	4b7b      	ldr	r3, [pc, #492]	@ (8000fb8 <HAL_UART_MspInit+0x290>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000dd0:	4b79      	ldr	r3, [pc, #484]	@ (8000fb8 <HAL_UART_MspInit+0x290>)
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000dd6:	4b78      	ldr	r3, [pc, #480]	@ (8000fb8 <HAL_UART_MspInit+0x290>)
 8000dd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ddc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dde:	4876      	ldr	r0, [pc, #472]	@ (8000fb8 <HAL_UART_MspInit+0x290>)
 8000de0:	f000 fb8a 	bl	80014f8 <HAL_DMA_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000dea:	f7ff ff65 	bl	8000cb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a71      	ldr	r2, [pc, #452]	@ (8000fb8 <HAL_UART_MspInit+0x290>)
 8000df2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000df4:	4a70      	ldr	r2, [pc, #448]	@ (8000fb8 <HAL_UART_MspInit+0x290>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2025      	movs	r0, #37	@ 0x25
 8000e00:	f000 fb43 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e04:	2025      	movs	r0, #37	@ 0x25
 8000e06:	f000 fb5c 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e0a:	e0ca      	b.n	8000fa2 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART2)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a6b      	ldr	r2, [pc, #428]	@ (8000fc0 <HAL_UART_MspInit+0x298>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d15f      	bne.n	8000ed6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e16:	4b66      	ldr	r3, [pc, #408]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a65      	ldr	r2, [pc, #404]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	61d3      	str	r3, [r2, #28]
 8000e22:	4b63      	ldr	r3, [pc, #396]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b60      	ldr	r3, [pc, #384]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4a5f      	ldr	r2, [pc, #380]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6193      	str	r3, [r2, #24]
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e46:	2304      	movs	r3, #4
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0320 	add.w	r3, r7, #32
 8000e56:	4619      	mov	r1, r3
 8000e58:	4856      	ldr	r0, [pc, #344]	@ (8000fb4 <HAL_UART_MspInit+0x28c>)
 8000e5a:	f000 fdef 	bl	8001a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4850      	ldr	r0, [pc, #320]	@ (8000fb4 <HAL_UART_MspInit+0x28c>)
 8000e72:	f000 fde3 	bl	8001a3c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e76:	4b53      	ldr	r3, [pc, #332]	@ (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000e78:	4a53      	ldr	r2, [pc, #332]	@ (8000fc8 <HAL_UART_MspInit+0x2a0>)
 8000e7a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7c:	4b51      	ldr	r3, [pc, #324]	@ (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e82:	4b50      	ldr	r3, [pc, #320]	@ (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e88:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000e8a:	2280      	movs	r2, #128	@ 0x80
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e94:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ea0:	4b48      	ldr	r3, [pc, #288]	@ (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000ea2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ea6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ea8:	4846      	ldr	r0, [pc, #280]	@ (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000eaa:	f000 fb25 	bl	80014f8 <HAL_DMA_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8000eb4:	f7ff ff00 	bl	8000cb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a42      	ldr	r2, [pc, #264]	@ (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000ebc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ebe:	4a41      	ldr	r2, [pc, #260]	@ (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2026      	movs	r0, #38	@ 0x26
 8000eca:	f000 fade 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ece:	2026      	movs	r0, #38	@ 0x26
 8000ed0:	f000 faf7 	bl	80014c2 <HAL_NVIC_EnableIRQ>
}
 8000ed4:	e065      	b.n	8000fa2 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART3)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a3c      	ldr	r2, [pc, #240]	@ (8000fcc <HAL_UART_MspInit+0x2a4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d160      	bne.n	8000fa2 <HAL_UART_MspInit+0x27a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee0:	4b33      	ldr	r3, [pc, #204]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	4a32      	ldr	r2, [pc, #200]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000ee6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eea:	61d3      	str	r3, [r2, #28]
 8000eec:	4b30      	ldr	r3, [pc, #192]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000efe:	f043 0308 	orr.w	r3, r3, #8
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <HAL_UART_MspInit+0x288>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0308 	and.w	r3, r3, #8
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	4619      	mov	r1, r3
 8000f24:	482a      	ldr	r0, [pc, #168]	@ (8000fd0 <HAL_UART_MspInit+0x2a8>)
 8000f26:	f000 fd89 	bl	8001a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4824      	ldr	r0, [pc, #144]	@ (8000fd0 <HAL_UART_MspInit+0x2a8>)
 8000f40:	f000 fd7c 	bl	8001a3c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <HAL_UART_MspInit+0x2ac>)
 8000f46:	4a24      	ldr	r2, [pc, #144]	@ (8000fd8 <HAL_UART_MspInit+0x2b0>)
 8000f48:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <HAL_UART_MspInit+0x2ac>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f50:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <HAL_UART_MspInit+0x2ac>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f56:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <HAL_UART_MspInit+0x2ac>)
 8000f58:	2280      	movs	r2, #128	@ 0x80
 8000f5a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <HAL_UART_MspInit+0x2ac>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <HAL_UART_MspInit+0x2ac>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_UART_MspInit+0x2ac>)
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_UART_MspInit+0x2ac>)
 8000f70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f76:	4817      	ldr	r0, [pc, #92]	@ (8000fd4 <HAL_UART_MspInit+0x2ac>)
 8000f78:	f000 fabe 	bl	80014f8 <HAL_DMA_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8000f82:	f7ff fe99 	bl	8000cb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <HAL_UART_MspInit+0x2ac>)
 8000f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f8c:	4a11      	ldr	r2, [pc, #68]	@ (8000fd4 <HAL_UART_MspInit+0x2ac>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2027      	movs	r0, #39	@ 0x27
 8000f98:	f000 fa77 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f9c:	2027      	movs	r0, #39	@ 0x27
 8000f9e:	f000 fa90 	bl	80014c2 <HAL_NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3730      	adds	r7, #48	@ 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40013800 	.word	0x40013800
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	20003b68 	.word	0x20003b68
 8000fbc:	40020058 	.word	0x40020058
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	20003bac 	.word	0x20003bac
 8000fc8:	4002006c 	.word	0x4002006c
 8000fcc:	40004800 	.word	0x40004800
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	20003bf0 	.word	0x20003bf0
 8000fd8:	40020030 	.word	0x40020030

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102c:	f000 f93a 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	GL.sayac_u32++;
 8001030:	4b41      	ldr	r3, [pc, #260]	@ (8001138 <SysTick_Handler+0x110>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a40      	ldr	r2, [pc, #256]	@ (8001138 <SysTick_Handler+0x110>)
 8001038:	6013      	str	r3, [r2, #0]

	if( (GL.sayac_u32 % 1000U) == 0 )
 800103a:	4b3f      	ldr	r3, [pc, #252]	@ (8001138 <SysTick_Handler+0x110>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4b3f      	ldr	r3, [pc, #252]	@ (800113c <SysTick_Handler+0x114>)
 8001040:	fba3 1302 	umull	r1, r3, r3, r2
 8001044:	099b      	lsrs	r3, r3, #6
 8001046:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800104a:	fb01 f303 	mul.w	r3, r1, r3
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <SysTick_Handler+0x32>
	{
		GL._1HzFlag_u8 = 1;
 8001054:	4b38      	ldr	r3, [pc, #224]	@ (8001138 <SysTick_Handler+0x110>)
 8001056:	2201      	movs	r2, #1
 8001058:	711a      	strb	r2, [r3, #4]
	}
	if( (GL.sayac_u32 % 500U) == 0 )
 800105a:	4b37      	ldr	r3, [pc, #220]	@ (8001138 <SysTick_Handler+0x110>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b37      	ldr	r3, [pc, #220]	@ (800113c <SysTick_Handler+0x114>)
 8001060:	fba3 1302 	umull	r1, r3, r3, r2
 8001064:	095b      	lsrs	r3, r3, #5
 8001066:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800106a:	fb01 f303 	mul.w	r3, r1, r3
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <SysTick_Handler+0x52>
	{
		GL._2HzFlag_u8 = 1;
 8001074:	4b30      	ldr	r3, [pc, #192]	@ (8001138 <SysTick_Handler+0x110>)
 8001076:	2201      	movs	r2, #1
 8001078:	715a      	strb	r2, [r3, #5]
	}
	if( (GL.sayac_u32 % 200U) == 0 )
 800107a:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <SysTick_Handler+0x110>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b30      	ldr	r3, [pc, #192]	@ (8001140 <SysTick_Handler+0x118>)
 8001080:	fba3 1302 	umull	r1, r3, r3, r2
 8001084:	099b      	lsrs	r3, r3, #6
 8001086:	21c8      	movs	r1, #200	@ 0xc8
 8001088:	fb01 f303 	mul.w	r3, r1, r3
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <SysTick_Handler+0x70>
	{
		GL._5HzFlag_u8 = 1;
 8001092:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <SysTick_Handler+0x110>)
 8001094:	2201      	movs	r2, #1
 8001096:	719a      	strb	r2, [r3, #6]
	}
	if( (GL.sayac_u32 % 100U) == 0 )
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <SysTick_Handler+0x110>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <SysTick_Handler+0x118>)
 800109e:	fba3 1302 	umull	r1, r3, r3, r2
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2164      	movs	r1, #100	@ 0x64
 80010a6:	fb01 f303 	mul.w	r3, r1, r3
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <SysTick_Handler+0x8e>
	{
		GL._10HzFlag_u8 = 1;
 80010b0:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <SysTick_Handler+0x110>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	71da      	strb	r2, [r3, #7]
	}
	if( (GL.sayac_u32 % 50U) == 0 )
 80010b6:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <SysTick_Handler+0x110>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <SysTick_Handler+0x118>)
 80010bc:	fba3 1302 	umull	r1, r3, r3, r2
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	2132      	movs	r1, #50	@ 0x32
 80010c4:	fb01 f303 	mul.w	r3, r1, r3
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <SysTick_Handler+0xac>
	{
		GL._20HzFlag_u8 = 1;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <SysTick_Handler+0x110>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	721a      	strb	r2, [r3, #8]
	}
	if( (GL.sayac_u32 % 20U) == 0 )
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <SysTick_Handler+0x110>)
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <SysTick_Handler+0x11c>)
 80010da:	fba3 2301 	umull	r2, r3, r3, r1
 80010de:	091a      	lsrs	r2, r3, #4
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	1aca      	subs	r2, r1, r3
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d102      	bne.n	80010f4 <SysTick_Handler+0xcc>
	{
		GL._50HzFlag_u8 = 1;
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <SysTick_Handler+0x110>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	725a      	strb	r2, [r3, #9]
	}
	if( (GL.sayac_u32 % 10U) == 0 )
 80010f4:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <SysTick_Handler+0x110>)
 80010f6:	6819      	ldr	r1, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <SysTick_Handler+0x11c>)
 80010fa:	fba3 2301 	umull	r2, r3, r3, r1
 80010fe:	08da      	lsrs	r2, r3, #3
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	1aca      	subs	r2, r1, r3
 800110a:	2a00      	cmp	r2, #0
 800110c:	d102      	bne.n	8001114 <SysTick_Handler+0xec>
	{
		GL._100HzFlag_u8 = 1;
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <SysTick_Handler+0x110>)
 8001110:	2201      	movs	r2, #1
 8001112:	729a      	strb	r2, [r3, #10]
	}
	if( (GL.sayac_u32 % 5U) == 0 )
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <SysTick_Handler+0x110>)
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <SysTick_Handler+0x11c>)
 800111a:	fba3 2301 	umull	r2, r3, r3, r1
 800111e:	089a      	lsrs	r2, r3, #2
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	1aca      	subs	r2, r1, r3
 8001128:	2a00      	cmp	r2, #0
 800112a:	d102      	bne.n	8001132 <SysTick_Handler+0x10a>
	{
		GL._200HzFlag_u8 = 1;
 800112c:	4b02      	ldr	r3, [pc, #8]	@ (8001138 <SysTick_Handler+0x110>)
 800112e:	2201      	movs	r2, #1
 8001130:	72da      	strb	r2, [r3, #11]
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000028 	.word	0x20000028
 800113c:	10624dd3 	.word	0x10624dd3
 8001140:	51eb851f 	.word	0x51eb851f
 8001144:	cccccccd 	.word	0xcccccccd

08001148 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <DMA1_Channel3_IRQHandler+0x10>)
 800114e:	f000 fb41 	bl	80017d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20003bf0 	.word	0x20003bf0

0800115c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <DMA1_Channel5_IRQHandler+0x10>)
 8001162:	f000 fb37 	bl	80017d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20003b68 	.word	0x20003b68

08001170 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001174:	4802      	ldr	r0, [pc, #8]	@ (8001180 <DMA1_Channel6_IRQHandler+0x10>)
 8001176:	f000 fb2d 	bl	80017d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20003bac 	.word	0x20003bac

08001184 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <USART1_IRQHandler+0x10>)
 800118a:	f001 faf1 	bl	8002770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20003a90 	.word	0x20003a90

08001198 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800119c:	4802      	ldr	r0, [pc, #8]	@ (80011a8 <USART2_IRQHandler+0x10>)
 800119e:	f001 fae7 	bl	8002770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20003ad8 	.word	0x20003ad8

080011ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011b0:	4802      	ldr	r0, [pc, #8]	@ (80011bc <USART3_IRQHandler+0x10>)
 80011b2:	f001 fadd 	bl	8002770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20003b20 	.word	0x20003b20

080011c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011cc:	f7ff fff8 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d0:	480b      	ldr	r0, [pc, #44]	@ (8001200 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011d2:	490c      	ldr	r1, [pc, #48]	@ (8001204 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a09      	ldr	r2, [pc, #36]	@ (800120c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011e8:	4c09      	ldr	r4, [pc, #36]	@ (8001210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f6:	f002 f9db 	bl	80035b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fa:	f7ff fbdb 	bl	80009b4 <main>
  bx lr
 80011fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001208:	08003844 	.word	0x08003844
  ldr r2, =_sbss
 800120c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001210:	20003c38 	.word	0x20003c38

08001214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC1_2_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <HAL_Init+0x28>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	@ (8001240 <HAL_Init+0x28>)
 8001222:	f043 0310 	orr.w	r3, r3, #16
 8001226:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f923 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	200f      	movs	r0, #15
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fd46 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40022000 	.word	0x40022000

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f93b 	bl	80014de <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f903 	bl	800148a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	@ (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000000 	.word	0x20000000
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <HAL_IncTick+0x1c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <HAL_IncTick+0x20>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a03      	ldr	r2, [pc, #12]	@ (80012c4 <HAL_IncTick+0x20>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20003c34 	.word	0x20003c34

080012c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b02      	ldr	r3, [pc, #8]	@ (80012d8 <HAL_GetTick+0x10>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	20003c34 	.word	0x20003c34

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4906      	ldr	r1, [pc, #24]	@ (8001374 <__NVIC_EnableIRQ+0x34>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	@ (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	@ (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	@ 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	@ 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff90 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff2d 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff42 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff90 	bl	80013cc <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5f 	bl	8001378 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff35 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e043      	b.n	8001596 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <HAL_DMA_Init+0xa8>)
 8001516:	4413      	add	r3, r2
 8001518:	4a22      	ldr	r2, [pc, #136]	@ (80015a4 <HAL_DMA_Init+0xac>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	009a      	lsls	r2, r3, #2
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a1f      	ldr	r2, [pc, #124]	@ (80015a8 <HAL_DMA_Init+0xb0>)
 800152a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001542:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001546:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001550:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	bffdfff8 	.word	0xbffdfff8
 80015a4:	cccccccd 	.word	0xcccccccd
 80015a8:	40020000 	.word	0x40020000

080015ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_DMA_Start_IT+0x20>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e04b      	b.n	8001664 <HAL_DMA_Start_IT+0xb8>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d13a      	bne.n	8001656 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 f9eb 	bl	80019e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 020e 	orr.w	r2, r2, #14
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e00f      	b.n	8001644 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0204 	bic.w	r2, r2, #4
 8001632:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 020a 	orr.w	r2, r2, #10
 8001642:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e005      	b.n	8001662 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800165e:	2302      	movs	r3, #2
 8001660:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001662:	7dfb      	ldrb	r3, [r7, #23]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d008      	beq.n	8001696 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2204      	movs	r2, #4
 8001688:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e020      	b.n	80016d8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 020e 	bic.w	r2, r2, #14
 80016a4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0201 	bic.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016be:	2101      	movs	r1, #1
 80016c0:	fa01 f202 	lsl.w	r2, r1, r2
 80016c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d005      	beq.n	8001708 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2204      	movs	r2, #4
 8001700:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e051      	b.n	80017ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 020e 	bic.w	r2, r2, #14
 8001716:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a22      	ldr	r2, [pc, #136]	@ (80017b8 <HAL_DMA_Abort_IT+0xd4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d029      	beq.n	8001786 <HAL_DMA_Abort_IT+0xa2>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a21      	ldr	r2, [pc, #132]	@ (80017bc <HAL_DMA_Abort_IT+0xd8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d022      	beq.n	8001782 <HAL_DMA_Abort_IT+0x9e>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1f      	ldr	r2, [pc, #124]	@ (80017c0 <HAL_DMA_Abort_IT+0xdc>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01a      	beq.n	800177c <HAL_DMA_Abort_IT+0x98>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1e      	ldr	r2, [pc, #120]	@ (80017c4 <HAL_DMA_Abort_IT+0xe0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d012      	beq.n	8001776 <HAL_DMA_Abort_IT+0x92>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1c      	ldr	r2, [pc, #112]	@ (80017c8 <HAL_DMA_Abort_IT+0xe4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00a      	beq.n	8001770 <HAL_DMA_Abort_IT+0x8c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1b      	ldr	r2, [pc, #108]	@ (80017cc <HAL_DMA_Abort_IT+0xe8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d102      	bne.n	800176a <HAL_DMA_Abort_IT+0x86>
 8001764:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001768:	e00e      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 800176a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800176e:	e00b      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 8001770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001774:	e008      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 8001776:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800177a:	e005      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 800177c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001780:	e002      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 8001782:	2310      	movs	r3, #16
 8001784:	e000      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 8001786:	2301      	movs	r3, #1
 8001788:	4a11      	ldr	r2, [pc, #68]	@ (80017d0 <HAL_DMA_Abort_IT+0xec>)
 800178a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
    } 
  }
  return status;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40020008 	.word	0x40020008
 80017bc:	4002001c 	.word	0x4002001c
 80017c0:	40020030 	.word	0x40020030
 80017c4:	40020044 	.word	0x40020044
 80017c8:	40020058 	.word	0x40020058
 80017cc:	4002006c 	.word	0x4002006c
 80017d0:	40020000 	.word	0x40020000

080017d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	2204      	movs	r2, #4
 80017f2:	409a      	lsls	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d04f      	beq.n	800189c <HAL_DMA_IRQHandler+0xc8>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d04a      	beq.n	800189c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	2b00      	cmp	r3, #0
 8001812:	d107      	bne.n	8001824 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0204 	bic.w	r2, r2, #4
 8001822:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a66      	ldr	r2, [pc, #408]	@ (80019c4 <HAL_DMA_IRQHandler+0x1f0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d029      	beq.n	8001882 <HAL_DMA_IRQHandler+0xae>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a65      	ldr	r2, [pc, #404]	@ (80019c8 <HAL_DMA_IRQHandler+0x1f4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d022      	beq.n	800187e <HAL_DMA_IRQHandler+0xaa>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a63      	ldr	r2, [pc, #396]	@ (80019cc <HAL_DMA_IRQHandler+0x1f8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01a      	beq.n	8001878 <HAL_DMA_IRQHandler+0xa4>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a62      	ldr	r2, [pc, #392]	@ (80019d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d012      	beq.n	8001872 <HAL_DMA_IRQHandler+0x9e>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a60      	ldr	r2, [pc, #384]	@ (80019d4 <HAL_DMA_IRQHandler+0x200>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00a      	beq.n	800186c <HAL_DMA_IRQHandler+0x98>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a5f      	ldr	r2, [pc, #380]	@ (80019d8 <HAL_DMA_IRQHandler+0x204>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d102      	bne.n	8001866 <HAL_DMA_IRQHandler+0x92>
 8001860:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001864:	e00e      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 8001866:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800186a:	e00b      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 800186c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001870:	e008      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 8001872:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001876:	e005      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 8001878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800187c:	e002      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 800187e:	2340      	movs	r3, #64	@ 0x40
 8001880:	e000      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 8001882:	2304      	movs	r3, #4
 8001884:	4a55      	ldr	r2, [pc, #340]	@ (80019dc <HAL_DMA_IRQHandler+0x208>)
 8001886:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8094 	beq.w	80019ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800189a:	e08e      	b.n	80019ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	2202      	movs	r2, #2
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d056      	beq.n	800195a <HAL_DMA_IRQHandler+0x186>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d051      	beq.n	800195a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10b      	bne.n	80018dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 020a 	bic.w	r2, r2, #10
 80018d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a38      	ldr	r2, [pc, #224]	@ (80019c4 <HAL_DMA_IRQHandler+0x1f0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d029      	beq.n	800193a <HAL_DMA_IRQHandler+0x166>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a37      	ldr	r2, [pc, #220]	@ (80019c8 <HAL_DMA_IRQHandler+0x1f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d022      	beq.n	8001936 <HAL_DMA_IRQHandler+0x162>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a35      	ldr	r2, [pc, #212]	@ (80019cc <HAL_DMA_IRQHandler+0x1f8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d01a      	beq.n	8001930 <HAL_DMA_IRQHandler+0x15c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a34      	ldr	r2, [pc, #208]	@ (80019d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d012      	beq.n	800192a <HAL_DMA_IRQHandler+0x156>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a32      	ldr	r2, [pc, #200]	@ (80019d4 <HAL_DMA_IRQHandler+0x200>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00a      	beq.n	8001924 <HAL_DMA_IRQHandler+0x150>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a31      	ldr	r2, [pc, #196]	@ (80019d8 <HAL_DMA_IRQHandler+0x204>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d102      	bne.n	800191e <HAL_DMA_IRQHandler+0x14a>
 8001918:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800191c:	e00e      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 800191e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001922:	e00b      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 8001924:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001928:	e008      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 800192a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800192e:	e005      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 8001930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001934:	e002      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 8001936:	2320      	movs	r3, #32
 8001938:	e000      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 800193a:	2302      	movs	r3, #2
 800193c:	4a27      	ldr	r2, [pc, #156]	@ (80019dc <HAL_DMA_IRQHandler+0x208>)
 800193e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	d034      	beq.n	80019ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001958:	e02f      	b.n	80019ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	2208      	movs	r2, #8
 8001960:	409a      	lsls	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d028      	beq.n	80019bc <HAL_DMA_IRQHandler+0x1e8>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d023      	beq.n	80019bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 020e 	bic.w	r2, r2, #14
 8001982:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800198c:	2101      	movs	r1, #1
 800198e:	fa01 f202 	lsl.w	r2, r1, r2
 8001992:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
    }
  }
  return;
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
}
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40020008 	.word	0x40020008
 80019c8:	4002001c 	.word	0x4002001c
 80019cc:	40020030 	.word	0x40020030
 80019d0:	40020044 	.word	0x40020044
 80019d4:	40020058 	.word	0x40020058
 80019d8:	4002006c 	.word	0x4002006c
 80019dc:	40020000 	.word	0x40020000

080019e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d108      	bne.n	8001a20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a1e:	e007      	b.n	8001a30 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b08b      	sub	sp, #44	@ 0x2c
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	e169      	b.n	8001d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a50:	2201      	movs	r2, #1
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8158 	bne.w	8001d1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a9a      	ldr	r2, [pc, #616]	@ (8001cdc <HAL_GPIO_Init+0x2a0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d05e      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a78:	4a98      	ldr	r2, [pc, #608]	@ (8001cdc <HAL_GPIO_Init+0x2a0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d875      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a7e:	4a98      	ldr	r2, [pc, #608]	@ (8001ce0 <HAL_GPIO_Init+0x2a4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d058      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a84:	4a96      	ldr	r2, [pc, #600]	@ (8001ce0 <HAL_GPIO_Init+0x2a4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d86f      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a8a:	4a96      	ldr	r2, [pc, #600]	@ (8001ce4 <HAL_GPIO_Init+0x2a8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d052      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a90:	4a94      	ldr	r2, [pc, #592]	@ (8001ce4 <HAL_GPIO_Init+0x2a8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d869      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a96:	4a94      	ldr	r2, [pc, #592]	@ (8001ce8 <HAL_GPIO_Init+0x2ac>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d04c      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a9c:	4a92      	ldr	r2, [pc, #584]	@ (8001ce8 <HAL_GPIO_Init+0x2ac>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d863      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001aa2:	4a92      	ldr	r2, [pc, #584]	@ (8001cec <HAL_GPIO_Init+0x2b0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d046      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a90      	ldr	r2, [pc, #576]	@ (8001cec <HAL_GPIO_Init+0x2b0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d85d      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001aae:	2b12      	cmp	r3, #18
 8001ab0:	d82a      	bhi.n	8001b08 <HAL_GPIO_Init+0xcc>
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d859      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8001abc <HAL_GPIO_Init+0x80>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001b37 	.word	0x08001b37
 8001ac0:	08001b11 	.word	0x08001b11
 8001ac4:	08001b23 	.word	0x08001b23
 8001ac8:	08001b65 	.word	0x08001b65
 8001acc:	08001b6b 	.word	0x08001b6b
 8001ad0:	08001b6b 	.word	0x08001b6b
 8001ad4:	08001b6b 	.word	0x08001b6b
 8001ad8:	08001b6b 	.word	0x08001b6b
 8001adc:	08001b6b 	.word	0x08001b6b
 8001ae0:	08001b6b 	.word	0x08001b6b
 8001ae4:	08001b6b 	.word	0x08001b6b
 8001ae8:	08001b6b 	.word	0x08001b6b
 8001aec:	08001b6b 	.word	0x08001b6b
 8001af0:	08001b6b 	.word	0x08001b6b
 8001af4:	08001b6b 	.word	0x08001b6b
 8001af8:	08001b6b 	.word	0x08001b6b
 8001afc:	08001b6b 	.word	0x08001b6b
 8001b00:	08001b19 	.word	0x08001b19
 8001b04:	08001b2d 	.word	0x08001b2d
 8001b08:	4a79      	ldr	r2, [pc, #484]	@ (8001cf0 <HAL_GPIO_Init+0x2b4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b0e:	e02c      	b.n	8001b6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	623b      	str	r3, [r7, #32]
          break;
 8001b16:	e029      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	623b      	str	r3, [r7, #32]
          break;
 8001b20:	e024      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	3308      	adds	r3, #8
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e01f      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	330c      	adds	r3, #12
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	e01a      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e013      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	611a      	str	r2, [r3, #16]
          break;
 8001b56:	e009      	b.n	8001b6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	615a      	str	r2, [r3, #20]
          break;
 8001b62:	e003      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
          break;
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          break;
 8001b6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2bff      	cmp	r3, #255	@ 0xff
 8001b70:	d801      	bhi.n	8001b76 <HAL_GPIO_Init+0x13a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	e001      	b.n	8001b7a <HAL_GPIO_Init+0x13e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2bff      	cmp	r3, #255	@ 0xff
 8001b80:	d802      	bhi.n	8001b88 <HAL_GPIO_Init+0x14c>
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	e002      	b.n	8001b8e <HAL_GPIO_Init+0x152>
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	3b08      	subs	r3, #8
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	210f      	movs	r1, #15
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	6a39      	ldr	r1, [r7, #32]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80b1 	beq.w	8001d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd4:	4a48      	ldr	r2, [pc, #288]	@ (8001cf8 <HAL_GPIO_Init+0x2bc>)
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a40      	ldr	r2, [pc, #256]	@ (8001cfc <HAL_GPIO_Init+0x2c0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d013      	beq.n	8001c28 <HAL_GPIO_Init+0x1ec>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a3f      	ldr	r2, [pc, #252]	@ (8001d00 <HAL_GPIO_Init+0x2c4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00d      	beq.n	8001c24 <HAL_GPIO_Init+0x1e8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d04 <HAL_GPIO_Init+0x2c8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d007      	beq.n	8001c20 <HAL_GPIO_Init+0x1e4>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a3d      	ldr	r2, [pc, #244]	@ (8001d08 <HAL_GPIO_Init+0x2cc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_GPIO_Init+0x1e0>
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	e004      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c2c:	f002 0203 	and.w	r2, r2, #3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4093      	lsls	r3, r2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3a:	492f      	ldr	r1, [pc, #188]	@ (8001cf8 <HAL_GPIO_Init+0x2bc>)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c54:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	492c      	ldr	r1, [pc, #176]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c62:	4b2a      	ldr	r3, [pc, #168]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4928      	ldr	r1, [pc, #160]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c7c:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4922      	ldr	r1, [pc, #136]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60cb      	str	r3, [r1, #12]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c8a:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	491e      	ldr	r1, [pc, #120]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4918      	ldr	r1, [pc, #96]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb2:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4914      	ldr	r1, [pc, #80]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d021      	beq.n	8001d10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	490e      	ldr	r1, [pc, #56]	@ (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	e021      	b.n	8001d1e <HAL_GPIO_Init+0x2e2>
 8001cda:	bf00      	nop
 8001cdc:	10320000 	.word	0x10320000
 8001ce0:	10310000 	.word	0x10310000
 8001ce4:	10220000 	.word	0x10220000
 8001ce8:	10210000 	.word	0x10210000
 8001cec:	10120000 	.word	0x10120000
 8001cf0:	10110000 	.word	0x10110000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40010800 	.word	0x40010800
 8001d00:	40010c00 	.word	0x40010c00
 8001d04:	40011000 	.word	0x40011000
 8001d08:	40011400 	.word	0x40011400
 8001d0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d10:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <HAL_GPIO_Init+0x304>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	4909      	ldr	r1, [pc, #36]	@ (8001d40 <HAL_GPIO_Init+0x304>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	3301      	adds	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f47f ae8e 	bne.w	8001a50 <HAL_GPIO_Init+0x14>
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	372c      	adds	r7, #44	@ 0x2c
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40010400 	.word	0x40010400

08001d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
 8001d50:	4613      	mov	r3, r2
 8001d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d54:	787b      	ldrb	r3, [r7, #1]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d60:	e003      	b.n	8001d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43d9      	mvns	r1, r3
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	400b      	ands	r3, r1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	611a      	str	r2, [r3, #16]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e272      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8087 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc8:	4b92      	ldr	r3, [pc, #584]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d00c      	beq.n	8001dee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd4:	4b8f      	ldr	r3, [pc, #572]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d112      	bne.n	8001e06 <HAL_RCC_OscConfig+0x5e>
 8001de0:	4b8c      	ldr	r3, [pc, #560]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dec:	d10b      	bne.n	8001e06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dee:	4b89      	ldr	r3, [pc, #548]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d06c      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x12c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d168      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e24c      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x76>
 8001e10:	4b80      	ldr	r3, [pc, #512]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a7f      	ldr	r2, [pc, #508]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	e02e      	b.n	8001e7c <HAL_RCC_OscConfig+0xd4>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x98>
 8001e26:	4b7b      	ldr	r3, [pc, #492]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7a      	ldr	r2, [pc, #488]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b78      	ldr	r3, [pc, #480]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a77      	ldr	r2, [pc, #476]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xd4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0xbc>
 8001e4a:	4b72      	ldr	r3, [pc, #456]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a71      	ldr	r2, [pc, #452]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b6f      	ldr	r3, [pc, #444]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xd4>
 8001e64:	4b6b      	ldr	r3, [pc, #428]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a6a      	ldr	r2, [pc, #424]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b68      	ldr	r3, [pc, #416]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a67      	ldr	r2, [pc, #412]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fa20 	bl	80012c8 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fa1c 	bl	80012c8 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	@ 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e200      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xe4>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fa0c 	bl	80012c8 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fa08 	bl	80012c8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	@ 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1ec      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	4b53      	ldr	r3, [pc, #332]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x10c>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d063      	beq.n	8001faa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eee:	4b49      	ldr	r3, [pc, #292]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x18c>
 8001efa:	4b46      	ldr	r3, [pc, #280]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	4b43      	ldr	r3, [pc, #268]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x176>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1c0      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4939      	ldr	r1, [pc, #228]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	e03a      	b.n	8001faa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3c:	4b36      	ldr	r3, [pc, #216]	@ (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7ff f9c1 	bl	80012c8 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff f9bd 	bl	80012c8 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e1a1      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4927      	ldr	r1, [pc, #156]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b26      	ldr	r3, [pc, #152]	@ (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff f9a0 	bl	80012c8 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f99c 	bl	80012c8 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e180      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d03a      	beq.n	800202c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d019      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b17      	ldr	r3, [pc, #92]	@ (800201c <HAL_RCC_OscConfig+0x274>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7ff f980 	bl	80012c8 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f97c 	bl	80012c8 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e160      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f000 face 	bl	800258c <RCC_Delay>
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_RCC_OscConfig+0x274>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7ff f966 	bl	80012c8 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffe:	e00f      	b.n	8002020 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002000:	f7ff f962 	bl	80012c8 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d908      	bls.n	8002020 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e146      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	42420000 	.word	0x42420000
 800201c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002020:	4b92      	ldr	r3, [pc, #584]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1e9      	bne.n	8002000 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a6 	beq.w	8002186 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203e:	4b8b      	ldr	r3, [pc, #556]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10d      	bne.n	8002066 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4b88      	ldr	r3, [pc, #544]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a87      	ldr	r2, [pc, #540]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002054:	61d3      	str	r3, [r2, #28]
 8002056:	4b85      	ldr	r3, [pc, #532]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002062:	2301      	movs	r3, #1
 8002064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002066:	4b82      	ldr	r3, [pc, #520]	@ (8002270 <HAL_RCC_OscConfig+0x4c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d118      	bne.n	80020a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002072:	4b7f      	ldr	r3, [pc, #508]	@ (8002270 <HAL_RCC_OscConfig+0x4c8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a7e      	ldr	r2, [pc, #504]	@ (8002270 <HAL_RCC_OscConfig+0x4c8>)
 8002078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207e:	f7ff f923 	bl	80012c8 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7ff f91f 	bl	80012c8 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b64      	cmp	r3, #100	@ 0x64
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e103      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4b75      	ldr	r3, [pc, #468]	@ (8002270 <HAL_RCC_OscConfig+0x4c8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x312>
 80020ac:	4b6f      	ldr	r3, [pc, #444]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a6e      	ldr	r2, [pc, #440]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	e02d      	b.n	8002116 <HAL_RCC_OscConfig+0x36e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x334>
 80020c2:	4b6a      	ldr	r3, [pc, #424]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a69      	ldr	r2, [pc, #420]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	6213      	str	r3, [r2, #32]
 80020ce:	4b67      	ldr	r3, [pc, #412]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a66      	ldr	r2, [pc, #408]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	f023 0304 	bic.w	r3, r3, #4
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	e01c      	b.n	8002116 <HAL_RCC_OscConfig+0x36e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d10c      	bne.n	80020fe <HAL_RCC_OscConfig+0x356>
 80020e4:	4b61      	ldr	r3, [pc, #388]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a60      	ldr	r2, [pc, #384]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	4b5e      	ldr	r3, [pc, #376]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a5d      	ldr	r2, [pc, #372]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6213      	str	r3, [r2, #32]
 80020fc:	e00b      	b.n	8002116 <HAL_RCC_OscConfig+0x36e>
 80020fe:	4b5b      	ldr	r3, [pc, #364]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a5a      	ldr	r2, [pc, #360]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	6213      	str	r3, [r2, #32]
 800210a:	4b58      	ldr	r3, [pc, #352]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a57      	ldr	r2, [pc, #348]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d015      	beq.n	800214a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7ff f8d3 	bl	80012c8 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7ff f8cf 	bl	80012c8 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0b1      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213c:	4b4b      	ldr	r3, [pc, #300]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ee      	beq.n	8002126 <HAL_RCC_OscConfig+0x37e>
 8002148:	e014      	b.n	8002174 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7ff f8bd 	bl	80012c8 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7ff f8b9 	bl	80012c8 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e09b      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002168:	4b40      	ldr	r3, [pc, #256]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1ee      	bne.n	8002152 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d105      	bne.n	8002186 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217a:	4b3c      	ldr	r3, [pc, #240]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a3b      	ldr	r2, [pc, #236]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002184:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8087 	beq.w	800229e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002190:	4b36      	ldr	r3, [pc, #216]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b08      	cmp	r3, #8
 800219a:	d061      	beq.n	8002260 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d146      	bne.n	8002232 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a4:	4b33      	ldr	r3, [pc, #204]	@ (8002274 <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7ff f88d 	bl	80012c8 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7ff f889 	bl	80012c8 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e06d      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c4:	4b29      	ldr	r3, [pc, #164]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f0      	bne.n	80021b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d8:	d108      	bne.n	80021ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021da:	4b24      	ldr	r3, [pc, #144]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	4921      	ldr	r1, [pc, #132]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ec:	4b1f      	ldr	r3, [pc, #124]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a19      	ldr	r1, [r3, #32]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	430b      	orrs	r3, r1
 80021fe:	491b      	ldr	r1, [pc, #108]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002204:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <HAL_RCC_OscConfig+0x4cc>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff f85d 	bl	80012c8 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7ff f859 	bl	80012c8 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e03d      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x46a>
 8002230:	e035      	b.n	800229e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_RCC_OscConfig+0x4cc>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff f846 	bl	80012c8 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff f842 	bl	80012c8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e026      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_RCC_OscConfig+0x4c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x498>
 800225e:	e01e      	b.n	800229e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e019      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
 800226c:	40021000 	.word	0x40021000
 8002270:	40007000 	.word	0x40007000
 8002274:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_RCC_OscConfig+0x500>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	429a      	cmp	r2, r3
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000

080022ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0d0      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b6a      	ldr	r3, [pc, #424]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d910      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b67      	ldr	r3, [pc, #412]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0207 	bic.w	r2, r3, #7
 80022d6:	4965      	ldr	r1, [pc, #404]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b63      	ldr	r3, [pc, #396]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0b8      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002308:	4b59      	ldr	r3, [pc, #356]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a58      	ldr	r2, [pc, #352]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002312:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002320:	4b53      	ldr	r3, [pc, #332]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a52      	ldr	r2, [pc, #328]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800232a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b50      	ldr	r3, [pc, #320]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	494d      	ldr	r1, [pc, #308]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d040      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b47      	ldr	r3, [pc, #284]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d115      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e07f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b41      	ldr	r3, [pc, #260]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e073      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3d      	ldr	r3, [pc, #244]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06b      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b39      	ldr	r3, [pc, #228]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4936      	ldr	r1, [pc, #216]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7fe ff94 	bl	80012c8 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7fe ff90 	bl	80012c8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e053      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b27      	ldr	r3, [pc, #156]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d210      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b24      	ldr	r3, [pc, #144]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0207 	bic.w	r2, r3, #7
 80023e2:	4922      	ldr	r1, [pc, #136]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b20      	ldr	r3, [pc, #128]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e032      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002408:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4916      	ldr	r1, [pc, #88]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002426:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	490e      	ldr	r1, [pc, #56]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800243a:	f000 f821 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 800243e:	4602      	mov	r2, r0
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	490a      	ldr	r1, [pc, #40]	@ (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 800244c:	5ccb      	ldrb	r3, [r1, r3]
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	4a09      	ldr	r2, [pc, #36]	@ (8002478 <HAL_RCC_ClockConfig+0x1cc>)
 8002454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002456:	4b09      	ldr	r3, [pc, #36]	@ (800247c <HAL_RCC_ClockConfig+0x1d0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fef2 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40022000 	.word	0x40022000
 8002470:	40021000 	.word	0x40021000
 8002474:	08003810 	.word	0x08003810
 8002478:	20000000 	.word	0x20000000
 800247c:	20000004 	.word	0x20000004

08002480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800249a:	4b1e      	ldr	r3, [pc, #120]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x94>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d002      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x30>
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x36>
 80024ae:	e027      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024b0:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x98>)
 80024b2:	613b      	str	r3, [r7, #16]
      break;
 80024b4:	e027      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	0c9b      	lsrs	r3, r3, #18
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	4a17      	ldr	r2, [pc, #92]	@ (800251c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024c0:	5cd3      	ldrb	r3, [r2, r3]
 80024c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d010      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ce:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x94>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	0c5b      	lsrs	r3, r3, #17
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024da:	5cd3      	ldrb	r3, [r2, r3]
 80024dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x98>)
 80024e2:	fb03 f202 	mul.w	r2, r3, r2
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e004      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024f4:	fb02 f303 	mul.w	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	613b      	str	r3, [r7, #16]
      break;
 80024fe:	e002      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x98>)
 8002502:	613b      	str	r3, [r7, #16]
      break;
 8002504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002506:	693b      	ldr	r3, [r7, #16]
}
 8002508:	4618      	mov	r0, r3
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	007a1200 	.word	0x007a1200
 800251c:	08003828 	.word	0x08003828
 8002520:	08003838 	.word	0x08003838
 8002524:	003d0900 	.word	0x003d0900

08002528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b02      	ldr	r3, [pc, #8]	@ (8002538 <HAL_RCC_GetHCLKFreq+0x10>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	20000000 	.word	0x20000000

0800253c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002540:	f7ff fff2 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b05      	ldr	r3, [pc, #20]	@ (800255c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	4903      	ldr	r1, [pc, #12]	@ (8002560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	08003820 	.word	0x08003820

08002564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002568:	f7ff ffde 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	0adb      	lsrs	r3, r3, #11
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	@ (8002588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	08003820 	.word	0x08003820

0800258c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002594:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <RCC_Delay+0x34>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <RCC_Delay+0x38>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0a5b      	lsrs	r3, r3, #9
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025a8:	bf00      	nop
  }
  while (Delay --);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	60fa      	str	r2, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f9      	bne.n	80025a8 <RCC_Delay+0x1c>
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	20000000 	.word	0x20000000
 80025c4:	10624dd3 	.word	0x10624dd3

080025c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e042      	b.n	8002660 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fb9a 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	@ 0x24
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800260a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 ff39 	bl	8003484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b20      	cmp	r3, #32
 8002686:	d16d      	bne.n	8002764 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_UART_Transmit+0x2c>
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e066      	b.n	8002766 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2221      	movs	r2, #33	@ 0x21
 80026a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026a6:	f7fe fe0f 	bl	80012c8 <HAL_GetTick>
 80026aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	88fa      	ldrh	r2, [r7, #6]
 80026b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026c0:	d108      	bne.n	80026d4 <HAL_UART_Transmit+0x6c>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d104      	bne.n	80026d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	e003      	b.n	80026dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026dc:	e02a      	b.n	8002734 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2200      	movs	r2, #0
 80026e6:	2180      	movs	r1, #128	@ 0x80
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fc00 	bl	8002eee <UART_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e036      	b.n	8002766 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10b      	bne.n	8002716 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800270c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	3302      	adds	r3, #2
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	e007      	b.n	8002726 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	781a      	ldrb	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3301      	adds	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1cf      	bne.n	80026de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2200      	movs	r2, #0
 8002746:	2140      	movs	r1, #64	@ 0x40
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fbd0 	bl	8002eee <UART_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e006      	b.n	8002766 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b0ba      	sub	sp, #232	@ 0xe8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80027ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10f      	bne.n	80027d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_UART_IRQHandler+0x66>
 80027c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fd9a 	bl	8003308 <UART_Receive_IT>
      return;
 80027d4:	e25b      	b.n	8002c8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80de 	beq.w	800299c <HAL_UART_IRQHandler+0x22c>
 80027e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d106      	bne.n	80027fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80d1 	beq.w	800299c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_UART_IRQHandler+0xae>
 8002806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800280a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002816:	f043 0201 	orr.w	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800281e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_UART_IRQHandler+0xd2>
 800282a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	f043 0202 	orr.w	r2, r3, #2
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_UART_IRQHandler+0xf6>
 800284e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	f043 0204 	orr.w	r2, r3, #4
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d011      	beq.n	8002896 <HAL_UART_IRQHandler+0x126>
 8002872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b00      	cmp	r3, #0
 800287c:	d105      	bne.n	800288a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800287e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f043 0208 	orr.w	r2, r3, #8
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 81f2 	beq.w	8002c84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_UART_IRQHandler+0x14e>
 80028ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fd25 	bl	8003308 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d103      	bne.n	80028ea <HAL_UART_IRQHandler+0x17a>
 80028e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d04f      	beq.n	800298a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fc2f 	bl	800314e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d041      	beq.n	8002982 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800290c:	e853 3f00 	ldrex	r3, [r3]
 8002910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800291c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3314      	adds	r3, #20
 8002926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800292a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800292e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800293a:	e841 2300 	strex	r3, r2, [r1]
 800293e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1d9      	bne.n	80028fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d013      	beq.n	800297a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002956:	4a7e      	ldr	r2, [pc, #504]	@ (8002b50 <HAL_UART_IRQHandler+0x3e0>)
 8002958:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fec0 	bl	80016e4 <HAL_DMA_Abort_IT>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d016      	beq.n	8002998 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002974:	4610      	mov	r0, r2
 8002976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	e00e      	b.n	8002998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f9a5 	bl	8002cca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002980:	e00a      	b.n	8002998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f9a1 	bl	8002cca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002988:	e006      	b.n	8002998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f99d 	bl	8002cca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002996:	e175      	b.n	8002c84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002998:	bf00      	nop
    return;
 800299a:	e173      	b.n	8002c84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	f040 814f 	bne.w	8002c44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8148 	beq.w	8002c44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8141 	beq.w	8002c44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80b6 	beq.w	8002b54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8145 	beq.w	8002c88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a06:	429a      	cmp	r2, r3
 8002a08:	f080 813e 	bcs.w	8002c88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	f000 8088 	beq.w	8002b30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	330c      	adds	r3, #12
 8002a26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a2e:	e853 3f00 	ldrex	r3, [r3]
 8002a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	330c      	adds	r3, #12
 8002a48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a4c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a5c:	e841 2300 	strex	r3, r2, [r1]
 8002a60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1d9      	bne.n	8002a20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3314      	adds	r3, #20
 8002a72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a76:	e853 3f00 	ldrex	r3, [r3]
 8002a7a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3314      	adds	r3, #20
 8002a8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a9c:	e841 2300 	strex	r3, r2, [r1]
 8002aa0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e1      	bne.n	8002a6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3314      	adds	r3, #20
 8002aae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ab2:	e853 3f00 	ldrex	r3, [r3]
 8002ab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3314      	adds	r3, #20
 8002ac8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002acc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ace:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ad2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ad4:	e841 2300 	strex	r3, r2, [r1]
 8002ad8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e3      	bne.n	8002aa8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b00:	f023 0310 	bic.w	r3, r3, #16
 8002b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e3      	bne.n	8002aee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fd9e 	bl	800166c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4619      	mov	r1, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8c8 	bl	8002cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b4c:	e09c      	b.n	8002c88 <HAL_UART_IRQHandler+0x518>
 8002b4e:	bf00      	nop
 8002b50:	08003213 	.word	0x08003213
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 808e 	beq.w	8002c8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8089 	beq.w	8002c8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b84:	e853 3f00 	ldrex	r3, [r3]
 8002b88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	330c      	adds	r3, #12
 8002b9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ba0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e3      	bne.n	8002b7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3314      	adds	r3, #20
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3314      	adds	r3, #20
 8002bd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e3      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	e853 3f00 	ldrex	r3, [r3]
 8002c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0310 	bic.w	r3, r3, #16
 8002c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c1c:	61fa      	str	r2, [r7, #28]
 8002c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	69b9      	ldr	r1, [r7, #24]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	617b      	str	r3, [r7, #20]
   return(result);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e3      	bne.n	8002bf8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f84d 	bl	8002cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c42:	e023      	b.n	8002c8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d009      	beq.n	8002c64 <HAL_UART_IRQHandler+0x4f4>
 8002c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 faec 	bl	800323a <UART_Transmit_IT>
    return;
 8002c62:	e014      	b.n	8002c8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00e      	beq.n	8002c8e <HAL_UART_IRQHandler+0x51e>
 8002c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fb2b 	bl	80032d8 <UART_EndTransmit_IT>
    return;
 8002c82:	e004      	b.n	8002c8e <HAL_UART_IRQHandler+0x51e>
    return;
 8002c84:	bf00      	nop
 8002c86:	e002      	b.n	8002c8e <HAL_UART_IRQHandler+0x51e>
      return;
 8002c88:	bf00      	nop
 8002c8a:	e000      	b.n	8002c8e <HAL_UART_IRQHandler+0x51e>
      return;
 8002c8c:	bf00      	nop
  }
}
 8002c8e:	37e8      	adds	r7, #232	@ 0xe8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b09c      	sub	sp, #112	@ 0x70
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d172      	bne.n	8002df4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d10:	2200      	movs	r2, #0
 8002d12:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d1e:	e853 3f00 	ldrex	r3, [r3]
 8002d22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	330c      	adds	r3, #12
 8002d32:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002d34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d36:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d3c:	e841 2300 	strex	r3, r2, [r1]
 8002d40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e5      	bne.n	8002d14 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3314      	adds	r3, #20
 8002d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d52:	e853 3f00 	ldrex	r3, [r3]
 8002d56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3314      	adds	r3, #20
 8002d66:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002d68:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d6a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d70:	e841 2300 	strex	r3, r2, [r1]
 8002d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e5      	bne.n	8002d48 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3314      	adds	r3, #20
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	e853 3f00 	ldrex	r3, [r3]
 8002d8a:	623b      	str	r3, [r7, #32]
   return(result);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d92:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3314      	adds	r3, #20
 8002d9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002da4:	e841 2300 	strex	r3, r2, [r1]
 8002da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e5      	bne.n	8002d7c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002db0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d119      	bne.n	8002df4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	e853 3f00 	ldrex	r3, [r3]
 8002dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0310 	bic.w	r3, r3, #16
 8002dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002de0:	61fa      	str	r2, [r7, #28]
 8002de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de4:	69b9      	ldr	r1, [r7, #24]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	e841 2300 	strex	r3, r2, [r1]
 8002dec:	617b      	str	r3, [r7, #20]
   return(result);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e5      	bne.n	8002dc0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002df6:	2200      	movs	r2, #0
 8002df8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d106      	bne.n	8002e10 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e06:	4619      	mov	r1, r3
 8002e08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002e0a:	f7ff ff67 	bl	8002cdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e0e:	e002      	b.n	8002e16 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002e10:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002e12:	f7ff ff48 	bl	8002ca6 <HAL_UART_RxCpltCallback>
}
 8002e16:	bf00      	nop
 8002e18:	3770      	adds	r7, #112	@ 0x70
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d108      	bne.n	8002e4c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff ff49 	bl	8002cdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e4a:	e002      	b.n	8002e52 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff ff33 	bl	8002cb8 <HAL_UART_RxHalfCpltCallback>
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf14      	ite	ne
 8002e7a:	2301      	movne	r3, #1
 8002e7c:	2300      	moveq	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b21      	cmp	r3, #33	@ 0x21
 8002e8c:	d108      	bne.n	8002ea0 <UART_DMAError+0x46>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002e9a:	68b8      	ldr	r0, [r7, #8]
 8002e9c:	f000 f930 	bl	8003100 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b22      	cmp	r3, #34	@ 0x22
 8002ec0:	d108      	bne.n	8002ed4 <UART_DMAError+0x7a>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002ece:	68b8      	ldr	r0, [r7, #8]
 8002ed0:	f000 f93d 	bl	800314e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed8:	f043 0210 	orr.w	r2, r3, #16
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ee0:	68b8      	ldr	r0, [r7, #8]
 8002ee2:	f7ff fef2 	bl	8002cca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b090      	sub	sp, #64	@ 0x40
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	4613      	mov	r3, r2
 8002efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002efe:	e050      	b.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d04c      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f0e:	f7fe f9db 	bl	80012c8 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d241      	bcs.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f3e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002f40:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f46:	e841 2300 	strex	r3, r2, [r1]
 8002f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1e5      	bne.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3314      	adds	r3, #20
 8002f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	613b      	str	r3, [r7, #16]
   return(result);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3314      	adds	r3, #20
 8002f70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f72:	623a      	str	r2, [r7, #32]
 8002f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	69f9      	ldr	r1, [r7, #28]
 8002f78:	6a3a      	ldr	r2, [r7, #32]
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e5      	bne.n	8002f52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e00f      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d09f      	beq.n	8002f00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3740      	adds	r7, #64	@ 0x40
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b098      	sub	sp, #96	@ 0x60
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2222      	movs	r2, #34	@ 0x22
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff8:	4a3e      	ldr	r2, [pc, #248]	@ (80030f4 <UART_Start_Receive_DMA+0x128>)
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003000:	4a3d      	ldr	r2, [pc, #244]	@ (80030f8 <UART_Start_Receive_DMA+0x12c>)
 8003002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003008:	4a3c      	ldr	r2, [pc, #240]	@ (80030fc <UART_Start_Receive_DMA+0x130>)
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003010:	2200      	movs	r2, #0
 8003012:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003014:	f107 0308 	add.w	r3, r7, #8
 8003018:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3304      	adds	r3, #4
 8003024:	4619      	mov	r1, r3
 8003026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	f7fe fabe 	bl	80015ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d019      	beq.n	8003082 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800305e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003064:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800306e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003070:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003074:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800307c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e5      	bne.n	800304e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3314      	adds	r3, #20
 8003088:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308c:	e853 3f00 	ldrex	r3, [r3]
 8003090:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	657b      	str	r3, [r7, #84]	@ 0x54
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3314      	adds	r3, #20
 80030a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030a2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80030a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80030a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e5      	bne.n	8003082 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3314      	adds	r3, #20
 80030bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	617b      	str	r3, [r7, #20]
   return(result);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3314      	adds	r3, #20
 80030d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80030d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80030d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	6a39      	ldr	r1, [r7, #32]
 80030dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030de:	e841 2300 	strex	r3, r2, [r1]
 80030e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e5      	bne.n	80030b6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3760      	adds	r7, #96	@ 0x60
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	08002cf3 	.word	0x08002cf3
 80030f8:	08002e1f 	.word	0x08002e1f
 80030fc:	08002e5b 	.word	0x08002e5b

08003100 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	@ 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	60bb      	str	r3, [r7, #8]
   return(result);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	61ba      	str	r2, [r7, #24]
 800312a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	6979      	ldr	r1, [r7, #20]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	613b      	str	r3, [r7, #16]
   return(result);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e5      	bne.n	8003108 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003144:	bf00      	nop
 8003146:	3724      	adds	r7, #36	@ 0x24
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800314e:	b480      	push	{r7}
 8003150:	b095      	sub	sp, #84	@ 0x54
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	330c      	adds	r3, #12
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003168:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800316c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	330c      	adds	r3, #12
 8003174:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003176:	643a      	str	r2, [r7, #64]	@ 0x40
 8003178:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800317c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e5      	bne.n	8003156 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3314      	adds	r3, #20
 8003190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	61fb      	str	r3, [r7, #28]
   return(result);
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3314      	adds	r3, #20
 80031a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e5      	bne.n	800318a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d119      	bne.n	80031fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f023 0310 	bic.w	r3, r3, #16
 80031dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031e6:	61ba      	str	r2, [r7, #24]
 80031e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	6979      	ldr	r1, [r7, #20]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	613b      	str	r3, [r7, #16]
   return(result);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e5      	bne.n	80031c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003208:	bf00      	nop
 800320a:	3754      	adds	r7, #84	@ 0x54
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f7ff fd4c 	bl	8002cca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b21      	cmp	r3, #33	@ 0x21
 800324c:	d13e      	bne.n	80032cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003256:	d114      	bne.n	8003282 <UART_Transmit_IT+0x48>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d110      	bne.n	8003282 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003274:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	1c9a      	adds	r2, r3, #2
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	621a      	str	r2, [r3, #32]
 8003280:	e008      	b.n	8003294 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	1c59      	adds	r1, r3, #1
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6211      	str	r1, [r2, #32]
 800328c:	781a      	ldrb	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29b      	uxth	r3, r3
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4619      	mov	r1, r3
 80032a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10f      	bne.n	80032c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff fccb 	bl	8002c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08c      	sub	sp, #48	@ 0x30
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b22      	cmp	r3, #34	@ 0x22
 800331a:	f040 80ae 	bne.w	800347a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003326:	d117      	bne.n	8003358 <UART_Receive_IT+0x50>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d113      	bne.n	8003358 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	b29b      	uxth	r3, r3
 8003342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003346:	b29a      	uxth	r2, r3
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	1c9a      	adds	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	629a      	str	r2, [r3, #40]	@ 0x28
 8003356:	e026      	b.n	80033a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800335e:	2300      	movs	r3, #0
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800336a:	d007      	beq.n	800337c <UART_Receive_IT+0x74>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <UART_Receive_IT+0x82>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	e008      	b.n	800339c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003396:	b2da      	uxtb	r2, r3
 8003398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4619      	mov	r1, r3
 80033b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d15d      	bne.n	8003476 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0220 	bic.w	r2, r2, #32
 80033c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d135      	bne.n	800346c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	330c      	adds	r3, #12
 800340c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	e853 3f00 	ldrex	r3, [r3]
 8003414:	613b      	str	r3, [r7, #16]
   return(result);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f023 0310 	bic.w	r3, r3, #16
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003426:	623a      	str	r2, [r7, #32]
 8003428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	69f9      	ldr	r1, [r7, #28]
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	61bb      	str	r3, [r7, #24]
   return(result);
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e5      	bne.n	8003406 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b10      	cmp	r3, #16
 8003446:	d10a      	bne.n	800345e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff fc39 	bl	8002cdc <HAL_UARTEx_RxEventCallback>
 800346a:	e002      	b.n	8003472 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff fc1a 	bl	8002ca6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e002      	b.n	800347c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e000      	b.n	800347c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
  }
}
 800347c:	4618      	mov	r0, r3
 800347e:	3730      	adds	r7, #48	@ 0x30
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80034be:	f023 030c 	bic.w	r3, r3, #12
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003598 <UART_SetConfig+0x114>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034ec:	f7ff f83a 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	e002      	b.n	80034fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034f4:	f7ff f822 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 80034f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	4a22      	ldr	r2, [pc, #136]	@ (800359c <UART_SetConfig+0x118>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	0119      	lsls	r1, r3, #4
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	009a      	lsls	r2, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003530:	4b1a      	ldr	r3, [pc, #104]	@ (800359c <UART_SetConfig+0x118>)
 8003532:	fba3 0302 	umull	r0, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2064      	movs	r0, #100	@ 0x64
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	3332      	adds	r3, #50	@ 0x32
 8003544:	4a15      	ldr	r2, [pc, #84]	@ (800359c <UART_SetConfig+0x118>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003550:	4419      	add	r1, r3
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <UART_SetConfig+0x118>)
 800356a:	fba3 0302 	umull	r0, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2064      	movs	r0, #100	@ 0x64
 8003572:	fb00 f303 	mul.w	r3, r0, r3
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	3332      	adds	r3, #50	@ 0x32
 800357c:	4a07      	ldr	r2, [pc, #28]	@ (800359c <UART_SetConfig+0x118>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	440a      	add	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013800 	.word	0x40013800
 800359c:	51eb851f 	.word	0x51eb851f

080035a0 <memset>:
 80035a0:	4603      	mov	r3, r0
 80035a2:	4402      	add	r2, r0
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d100      	bne.n	80035aa <memset+0xa>
 80035a8:	4770      	bx	lr
 80035aa:	f803 1b01 	strb.w	r1, [r3], #1
 80035ae:	e7f9      	b.n	80035a4 <memset+0x4>

080035b0 <__libc_init_array>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	2600      	movs	r6, #0
 80035b4:	4d0c      	ldr	r5, [pc, #48]	@ (80035e8 <__libc_init_array+0x38>)
 80035b6:	4c0d      	ldr	r4, [pc, #52]	@ (80035ec <__libc_init_array+0x3c>)
 80035b8:	1b64      	subs	r4, r4, r5
 80035ba:	10a4      	asrs	r4, r4, #2
 80035bc:	42a6      	cmp	r6, r4
 80035be:	d109      	bne.n	80035d4 <__libc_init_array+0x24>
 80035c0:	f000 f81a 	bl	80035f8 <_init>
 80035c4:	2600      	movs	r6, #0
 80035c6:	4d0a      	ldr	r5, [pc, #40]	@ (80035f0 <__libc_init_array+0x40>)
 80035c8:	4c0a      	ldr	r4, [pc, #40]	@ (80035f4 <__libc_init_array+0x44>)
 80035ca:	1b64      	subs	r4, r4, r5
 80035cc:	10a4      	asrs	r4, r4, #2
 80035ce:	42a6      	cmp	r6, r4
 80035d0:	d105      	bne.n	80035de <__libc_init_array+0x2e>
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
 80035d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d8:	4798      	blx	r3
 80035da:	3601      	adds	r6, #1
 80035dc:	e7ee      	b.n	80035bc <__libc_init_array+0xc>
 80035de:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e2:	4798      	blx	r3
 80035e4:	3601      	adds	r6, #1
 80035e6:	e7f2      	b.n	80035ce <__libc_init_array+0x1e>
 80035e8:	0800383c 	.word	0x0800383c
 80035ec:	0800383c 	.word	0x0800383c
 80035f0:	0800383c 	.word	0x0800383c
 80035f4:	08003840 	.word	0x08003840

080035f8 <_init>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	bf00      	nop
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr

08003604 <_fini>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	bf00      	nop
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr
