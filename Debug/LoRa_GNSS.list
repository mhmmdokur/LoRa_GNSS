
LoRa_GNSS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000332c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08003438  08003438  00004438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003664  08003664  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003664  08003664  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003664  08003664  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003664  08003664  00004664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003668  08003668  00004668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800366c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044d4  2000000c  08003678  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044e0  08003678  000054e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096fc  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb2  00000000  00000000  0000e731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  000103e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b6  00000000  00000000  00010b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001664a  00000000  00000000  00011126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f9e  00000000  00000000  00027770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081c88  00000000  00000000  0003170e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3396  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c98  00000000  00000000  000b33dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000b5074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003420 	.word	0x08003420

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003420 	.word	0x08003420

0800014c <loraGnssMain>:
#include "main.h"

Global_t Glo_st = {0};

void loraGnssMain()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
//		UartDmaInit(&huart1, &hdma_usart1_rx, &Glo_st.usartDma1_st);
		UartDmaInit(&huart2, &hdma_usart2_rx, &Glo_st.usartDma2_st);
 8000150:	4a10      	ldr	r2, [pc, #64]	@ (8000194 <loraGnssMain+0x48>)
 8000152:	4911      	ldr	r1, [pc, #68]	@ (8000198 <loraGnssMain+0x4c>)
 8000154:	4811      	ldr	r0, [pc, #68]	@ (800019c <loraGnssMain+0x50>)
 8000156:	f000 f916 	bl	8000386 <UartDmaInit>
		UartDmaInit(&huart3, &hdma_usart3_rx, &Glo_st.usartDma3_st);
 800015a:	4a11      	ldr	r2, [pc, #68]	@ (80001a0 <loraGnssMain+0x54>)
 800015c:	4911      	ldr	r1, [pc, #68]	@ (80001a4 <loraGnssMain+0x58>)
 800015e:	4812      	ldr	r0, [pc, #72]	@ (80001a8 <loraGnssMain+0x5c>)
 8000160:	f000 f911 	bl	8000386 <UartDmaInit>

		Glo_st.lora_st.adres_u8 = 0x01;
 8000164:	4b11      	ldr	r3, [pc, #68]	@ (80001ac <loraGnssMain+0x60>)
 8000166:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800016a:	2201      	movs	r2, #1
 800016c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		Glo_st.lora_st.kanal_u8 = 0x04;
 8000170:	4b0e      	ldr	r3, [pc, #56]	@ (80001ac <loraGnssMain+0x60>)
 8000172:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000176:	2204      	movs	r2, #4
 8000178:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149

	while(1)
	{
		if(1 == Glo_st._100HzFlag_u8)
 800017c:	4b0b      	ldr	r3, [pc, #44]	@ (80001ac <loraGnssMain+0x60>)
 800017e:	7a9b      	ldrb	r3, [r3, #10]
 8000180:	2b01      	cmp	r3, #1
 8000182:	d1fb      	bne.n	800017c <loraGnssMain+0x30>
		{
//			Lora_veri_gonderme_cevrimi(&Glo_st.usartDma2_st, &Glo_st.veri_pkt_st, &Glo_st.lora_st);
			Lora_veri_alma_cevrimi(&Glo_st.usartDma3_st, &Glo_st.veri_pkt_st);
 8000184:	490a      	ldr	r1, [pc, #40]	@ (80001b0 <loraGnssMain+0x64>)
 8000186:	4806      	ldr	r0, [pc, #24]	@ (80001a0 <loraGnssMain+0x54>)
 8000188:	f000 f8f0 	bl	800036c <Lora_veri_alma_cevrimi>

			Glo_st._100HzFlag_u8 = 0;
 800018c:	4b07      	ldr	r3, [pc, #28]	@ (80001ac <loraGnssMain+0x60>)
 800018e:	2200      	movs	r2, #0
 8000190:	729a      	strb	r2, [r3, #10]
		if(1 == Glo_st._100HzFlag_u8)
 8000192:	e7f3      	b.n	800017c <loraGnssMain+0x30>
 8000194:	20001444 	.word	0x20001444
 8000198:	200043cc 	.word	0x200043cc
 800019c:	200042b4 	.word	0x200042b4
 80001a0:	20002854 	.word	0x20002854
 80001a4:	20004454 	.word	0x20004454
 80001a8:	200042fc 	.word	0x200042fc
 80001ac:	20000028 	.word	0x20000028
 80001b0:	20003c64 	.word	0x20003c64

080001b4 <veri_paket_coz>:
	}
}


void veri_paket_coz(Dma_t *pDma_st, veri_paketi_t *veri_pkt )
{
 80001b4:	b590      	push	{r4, r7, lr}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	6039      	str	r1, [r7, #0]
	static uint8_t durum_u8  = BASLANGIC_BAYT_1;
	static uint16_t indeks_u16 = 0;
	uint8_t tVeri_u8 = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	73fb      	strb	r3, [r7, #15]
	static uint8_t gelenCrcMsb_u8  = 0;
	static uint8_t gelenCrcLsb_u8  = 0;

	while(pDma_st->okunanVeriSayisi_u16 > 0)
 80001c2:	e094      	b.n	80002ee <veri_paket_coz+0x13a>
	{
		tVeri_u8 = RingBufferdanVeriOku(pDma_st);
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f000 f907 	bl	80003d8 <RingBufferdanVeriOku>
 80001ca:	4603      	mov	r3, r0
 80001cc:	73fb      	strb	r3, [r7, #15]
		switch( durum_u8 )
 80001ce:	4b4e      	ldr	r3, [pc, #312]	@ (8000308 <veri_paket_coz+0x154>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b05      	cmp	r3, #5
 80001d4:	f200 808b 	bhi.w	80002ee <veri_paket_coz+0x13a>
 80001d8:	a201      	add	r2, pc, #4	@ (adr r2, 80001e0 <veri_paket_coz+0x2c>)
 80001da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001de:	bf00      	nop
 80001e0:	080001f9 	.word	0x080001f9
 80001e4:	08000207 	.word	0x08000207
 80001e8:	0800021d 	.word	0x0800021d
 80001ec:	0800023b 	.word	0x0800023b
 80001f0:	08000267 	.word	0x08000267
 80001f4:	08000275 	.word	0x08000275
		{
			case BASLANGIC_BAYT_1:
			{
				if( tVeri_u8 ==  0x4D )
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	2b4d      	cmp	r3, #77	@ 0x4d
 80001fc:	d174      	bne.n	80002e8 <veri_paket_coz+0x134>
				{
					durum_u8 =  BASLANGIC_BAYT_2;
 80001fe:	4b42      	ldr	r3, [pc, #264]	@ (8000308 <veri_paket_coz+0x154>)
 8000200:	2201      	movs	r2, #1
 8000202:	701a      	strb	r2, [r3, #0]
				}

				break;
 8000204:	e070      	b.n	80002e8 <veri_paket_coz+0x134>
			}
			case BASLANGIC_BAYT_2:
			{
				if( tVeri_u8 ==  0x26 )
 8000206:	7bfb      	ldrb	r3, [r7, #15]
 8000208:	2b26      	cmp	r3, #38	@ 0x26
 800020a:	d103      	bne.n	8000214 <veri_paket_coz+0x60>
				{
					durum_u8 =  UZUNLUK;
 800020c:	4b3e      	ldr	r3, [pc, #248]	@ (8000308 <veri_paket_coz+0x154>)
 800020e:	2202      	movs	r2, #2
 8000210:	701a      	strb	r2, [r3, #0]
				else //makina sifirlanir
				{
					durum_u8  = BASLANGIC_BAYT_1;
				}

				break;
 8000212:	e06c      	b.n	80002ee <veri_paket_coz+0x13a>
					durum_u8  = BASLANGIC_BAYT_1;
 8000214:	4b3c      	ldr	r3, [pc, #240]	@ (8000308 <veri_paket_coz+0x154>)
 8000216:	2200      	movs	r2, #0
 8000218:	701a      	strb	r2, [r3, #0]
				break;
 800021a:	e068      	b.n	80002ee <veri_paket_coz+0x13a>
			}
			case UZUNLUK:
			{
				veri_pkt->veri_boyutu_u8  = tVeri_u8;
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	7bfa      	ldrb	r2, [r7, #15]
 8000220:	705a      	strb	r2, [r3, #1]

				if( veri_pkt->veri_boyutu_u8 > 0 )
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d003      	beq.n	8000232 <veri_paket_coz+0x7e>
				{
					durum_u8 =  DATA_AL;
 800022a:	4b37      	ldr	r3, [pc, #220]	@ (8000308 <veri_paket_coz+0x154>)
 800022c:	2203      	movs	r2, #3
 800022e:	701a      	strb	r2, [r3, #0]
				}
				else //makina sifirlanir
				{
					durum_u8  = BASLANGIC_BAYT_1;
				}
				break;
 8000230:	e05d      	b.n	80002ee <veri_paket_coz+0x13a>
					durum_u8  = BASLANGIC_BAYT_1;
 8000232:	4b35      	ldr	r3, [pc, #212]	@ (8000308 <veri_paket_coz+0x154>)
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]
				break;
 8000238:	e059      	b.n	80002ee <veri_paket_coz+0x13a>
			}
			case DATA_AL:
			{
				veri_pkt->data[indeks_u16++] = tVeri_u8;
 800023a:	4b34      	ldr	r3, [pc, #208]	@ (800030c <veri_paket_coz+0x158>)
 800023c:	881b      	ldrh	r3, [r3, #0]
 800023e:	1c5a      	adds	r2, r3, #1
 8000240:	b291      	uxth	r1, r2
 8000242:	4a32      	ldr	r2, [pc, #200]	@ (800030c <veri_paket_coz+0x158>)
 8000244:	8011      	strh	r1, [r2, #0]
 8000246:	461a      	mov	r2, r3
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	4413      	add	r3, r2
 800024c:	7bfa      	ldrb	r2, [r7, #15]
 800024e:	709a      	strb	r2, [r3, #2]

				if( indeks_u16 == veri_pkt->veri_boyutu_u8 )
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	785b      	ldrb	r3, [r3, #1]
 8000254:	461a      	mov	r2, r3
 8000256:	4b2d      	ldr	r3, [pc, #180]	@ (800030c <veri_paket_coz+0x158>)
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	429a      	cmp	r2, r3
 800025c:	d146      	bne.n	80002ec <veri_paket_coz+0x138>
				{
					durum_u8 =  CRC_MSB;
 800025e:	4b2a      	ldr	r3, [pc, #168]	@ (8000308 <veri_paket_coz+0x154>)
 8000260:	2204      	movs	r2, #4
 8000262:	701a      	strb	r2, [r3, #0]
				}

				break;
 8000264:	e042      	b.n	80002ec <veri_paket_coz+0x138>
			}
			case CRC_MSB:
			{
				gelenCrcMsb_u8 = tVeri_u8;
 8000266:	4a2a      	ldr	r2, [pc, #168]	@ (8000310 <veri_paket_coz+0x15c>)
 8000268:	7bfb      	ldrb	r3, [r7, #15]
 800026a:	7013      	strb	r3, [r2, #0]

				durum_u8  =  CRC_LSB;
 800026c:	4b26      	ldr	r3, [pc, #152]	@ (8000308 <veri_paket_coz+0x154>)
 800026e:	2205      	movs	r2, #5
 8000270:	701a      	strb	r2, [r3, #0]
				break;
 8000272:	e03c      	b.n	80002ee <veri_paket_coz+0x13a>
			}
			case CRC_LSB:
			{

				gelenCrcLsb_u8 = tVeri_u8;
 8000274:	4a27      	ldr	r2, [pc, #156]	@ (8000314 <veri_paket_coz+0x160>)
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	7013      	strb	r3, [r2, #0]

				veri_pkt->crc_u16 = (gelenCrcMsb_u8 << 8) | (gelenCrcLsb_u8);
 800027a:	4b25      	ldr	r3, [pc, #148]	@ (8000310 <veri_paket_coz+0x15c>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	b21a      	sxth	r2, r3
 8000282:	4b24      	ldr	r3, [pc, #144]	@ (8000314 <veri_paket_coz+0x160>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	b21b      	sxth	r3, r3
 8000288:	4313      	orrs	r3, r2
 800028a:	b21b      	sxth	r3, r3
 800028c:	b29a      	uxth	r2, r3
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

				if(veri_pkt->crc_u16 == crc16_ccitt(veri_pkt->data, indeks_u16))
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	f8b3 40f8 	ldrh.w	r4, [r3, #248]	@ 0xf8
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	3302      	adds	r3, #2
 800029e:	4a1b      	ldr	r2, [pc, #108]	@ (800030c <veri_paket_coz+0x158>)
 80002a0:	8812      	ldrh	r2, [r2, #0]
 80002a2:	4611      	mov	r1, r2
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f837 	bl	8000318 <crc16_ccitt>
 80002aa:	4603      	mov	r3, r0
 80002ac:	429c      	cmp	r4, r3
 80002ae:	d107      	bne.n	80002c0 <veri_paket_coz+0x10c>
				{
//					parse_rtcm_v3_message(veri_pkt->data, indeks_u16, &Glo_st.rtcm_st);
					veri_pkt->yakalanan_paket_u32++;
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80002be:	e006      	b.n	80002ce <veri_paket_coz+0x11a>
				}
				else
				{
					veri_pkt->hatali_paket_u32++;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80002c6:	1c5a      	adds	r2, r3, #1
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
				}
				//makina sifirlanir
				durum_u8  =  BASLANGIC_BAYT_1;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <veri_paket_coz+0x154>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
				indeks_u16 = 0;
 80002d4:	4b0d      	ldr	r3, [pc, #52]	@ (800030c <veri_paket_coz+0x158>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	801a      	strh	r2, [r3, #0]
				gelenCrcLsb_u8 = 0;
 80002da:	4b0e      	ldr	r3, [pc, #56]	@ (8000314 <veri_paket_coz+0x160>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
				gelenCrcMsb_u8 = 0;
 80002e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000310 <veri_paket_coz+0x15c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]

				break;
 80002e6:	e002      	b.n	80002ee <veri_paket_coz+0x13a>
				break;
 80002e8:	bf00      	nop
 80002ea:	e000      	b.n	80002ee <veri_paket_coz+0x13a>
				break;
 80002ec:	bf00      	nop
	while(pDma_st->okunanVeriSayisi_u16 > 0)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80002f4:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	f47f af63 	bne.w	80001c4 <veri_paket_coz+0x10>
			}
		}
	}
}
 80002fe:	bf00      	nop
 8000300:	bf00      	nop
 8000302:	3714      	adds	r7, #20
 8000304:	46bd      	mov	sp, r7
 8000306:	bd90      	pop	{r4, r7, pc}
 8000308:	20004264 	.word	0x20004264
 800030c:	20004266 	.word	0x20004266
 8000310:	20004268 	.word	0x20004268
 8000314:	20004269 	.word	0x20004269

08000318 <crc16_ccitt>:


uint16_t crc16_ccitt(const uint8_t* buffer, size_t size)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	81fb      	strh	r3, [r7, #14]
    while (size-- > 0)
 8000326:	e013      	b.n	8000350 <crc16_ccitt+0x38>
    {
    	crc = (crc << 8) ^ ccitt_hash[((crc >> 8) ^ *(buffer++)) & 0x00FF];
 8000328:	89fb      	ldrh	r3, [r7, #14]
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	b21a      	sxth	r2, r3
 800032e:	89fb      	ldrh	r3, [r7, #14]
 8000330:	0a1b      	lsrs	r3, r3, #8
 8000332:	b29b      	uxth	r3, r3
 8000334:	4618      	mov	r0, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	1c59      	adds	r1, r3, #1
 800033a:	6079      	str	r1, [r7, #4]
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	4043      	eors	r3, r0
 8000340:	b2db      	uxtb	r3, r3
 8000342:	4909      	ldr	r1, [pc, #36]	@ (8000368 <crc16_ccitt+0x50>)
 8000344:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000348:	b21b      	sxth	r3, r3
 800034a:	4053      	eors	r3, r2
 800034c:	b21b      	sxth	r3, r3
 800034e:	81fb      	strh	r3, [r7, #14]
    while (size-- > 0)
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	603a      	str	r2, [r7, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e6      	bne.n	8000328 <crc16_ccitt+0x10>
    }
    return crc;
 800035a:	89fb      	ldrh	r3, [r7, #14]
}
 800035c:	4618      	mov	r0, r3
 800035e:	3714      	adds	r7, #20
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	08003438 	.word	0x08003438

0800036c <Lora_veri_alma_cevrimi>:
}



void Lora_veri_alma_cevrimi(Dma_t *pDma_st, veri_paketi_t *pVeri_pkt)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	veri_paket_coz(pDma_st, pVeri_pkt);
 8000376:	6839      	ldr	r1, [r7, #0]
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f7ff ff1b 	bl	80001b4 <veri_paket_coz>

}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <UartDmaInit>:




void UartDmaInit(UART_HandleTypeDef *pUart, DMA_HandleTypeDef *pDmaUartRx, Dma_t *pDma_st)
{
 8000386:	b580      	push	{r7, lr}
 8000388:	b084      	sub	sp, #16
 800038a:	af00      	add	r7, sp, #0
 800038c:	60f8      	str	r0, [r7, #12]
 800038e:	60b9      	str	r1, [r7, #8]
 8000390:	607a      	str	r2, [r7, #4]
    pDma_st->pUart = pUart;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	601a      	str	r2, [r3, #0]
    pDma_st->pDmaUartRx = pDmaUartRx;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	68ba      	ldr	r2, [r7, #8]
 800039c:	605a      	str	r2, [r3, #4]

    HAL_UART_Transmit_DMA(pUart, pDma_st->txBuffer_u8a, TX_BUFFER_BOYUT);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3308      	adds	r3, #8
 80003a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80003a6:	4619      	mov	r1, r3
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f002 f837 	bl	800241c <HAL_UART_Transmit_DMA>

    HAL_UARTEx_ReceiveToIdle_DMA(pUart, pDma_st->rxBuffer_u8a, RX_BUFFER_BOYUT);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80003b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80003b8:	4619      	mov	r1, r3
 80003ba:	68f8      	ldr	r0, [r7, #12]
 80003bc:	f002 f89e 	bl	80024fc <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(pDmaUartRx, DMA_IT_HT);
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f022 0204 	bic.w	r2, r2, #4
 80003ce:	601a      	str	r2, [r3, #0]
}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <RingBufferdanVeriOku>:


uint8_t RingBufferdanVeriOku(Dma_t *pDma_st)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
    uint8_t veri = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	73fb      	strb	r3, [r7, #15]

    // Eğer okunan veri sayısı sıfırdan büyükse işlem yap
    if (pDma_st->okunanVeriSayisi_u16 > 0)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80003ea:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d025      	beq.n	800043e <RingBufferdanVeriOku+0x66>
    {
        // Ring buffer'dan bir bayt veri oku
        veri = pDma_st->ringBuffer_u8a[pDma_st->eskiPoz_u16];
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80003f8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	@ 0x40a
 80003fc:	461a      	mov	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 8000406:	73fb      	strb	r3, [r7, #15]

        // Eski pozisyonu güncelle ve wrap-around kontrolü yap
        pDma_st->eskiPoz_u16 = (pDma_st->eskiPoz_u16 + 1) % RING_BUFFER_BOYUT;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800040e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	@ 0x40a
 8000412:	3301      	adds	r3, #1
 8000414:	b29b      	uxth	r3, r3
 8000416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800041a:	b29a      	uxth	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000422:	f8a3 240a 	strh.w	r2, [r3, #1034]	@ 0x40a

        // Okunan veri sayısını bir azalt
        pDma_st->okunanVeriSayisi_u16--;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800042c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8000430:	3b01      	subs	r3, #1
 8000432:	b29a      	uxth	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800043a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
    }
    return veri;
 800043e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000440:	4618      	mov	r0, r3
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr

0800044a <RingBufferYaz>:


void RingBufferYaz(Dma_t *pDma_st, uint16_t boyut_u16)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b084      	sub	sp, #16
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	460b      	mov	r3, r1
 8000454:	807b      	strh	r3, [r7, #2]
    uint16_t eskiPozTemp = pDma_st->yeniPoz_u16; // Mevcut pozisyonu geçici bir değişkene kaydet
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800045c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000460:	81fb      	strh	r3, [r7, #14]

    if((eskiPozTemp + boyut_u16) > RING_BUFFER_BOYUT)
 8000462:	89fa      	ldrh	r2, [r7, #14]
 8000464:	887b      	ldrh	r3, [r7, #2]
 8000466:	4413      	add	r3, r2
 8000468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800046c:	d929      	bls.n	80004c2 <RingBufferYaz+0x78>
    {
        uint16_t kalan_u16 = RING_BUFFER_BOYUT - eskiPozTemp;
 800046e:	89fb      	ldrh	r3, [r7, #14]
 8000470:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000474:	81bb      	strh	r3, [r7, #12]
        memcpy((uint8_t *)pDma_st->ringBuffer_u8a + eskiPozTemp, pDma_st->rxBuffer_u8a, kalan_u16);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f603 4208 	addw	r2, r3, #3080	@ 0xc08
 800047c:	89fb      	ldrh	r3, [r7, #14]
 800047e:	18d0      	adds	r0, r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8000486:	89ba      	ldrh	r2, [r7, #12]
 8000488:	4619      	mov	r1, r3
 800048a:	f002 ffbb 	bl	8003404 <memcpy>

        eskiPozTemp = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	81fb      	strh	r3, [r7, #14]
        memcpy((uint8_t *)pDma_st->ringBuffer_u8a, (uint8_t *)pDma_st->rxBuffer_u8a + kalan_u16, (boyut_u16 - kalan_u16));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	f603 4008 	addw	r0, r3, #3080	@ 0xc08
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f503 6281 	add.w	r2, r3, #1032	@ 0x408
 800049e:	89bb      	ldrh	r3, [r7, #12]
 80004a0:	18d1      	adds	r1, r2, r3
 80004a2:	887a      	ldrh	r2, [r7, #2]
 80004a4:	89bb      	ldrh	r3, [r7, #12]
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	461a      	mov	r2, r3
 80004aa:	f002 ffab 	bl	8003404 <memcpy>
        pDma_st->yeniPoz_u16 = (boyut_u16 - kalan_u16);
 80004ae:	887a      	ldrh	r2, [r7, #2]
 80004b0:	89bb      	ldrh	r3, [r7, #12]
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80004bc:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
 80004c0:	e017      	b.n	80004f2 <RingBufferYaz+0xa8>
    }
    else
    {
        memcpy((uint8_t *)pDma_st->ringBuffer_u8a + eskiPozTemp, pDma_st->rxBuffer_u8a, boyut_u16);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f603 4208 	addw	r2, r3, #3080	@ 0xc08
 80004c8:	89fb      	ldrh	r3, [r7, #14]
 80004ca:	18d0      	adds	r0, r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80004d2:	887a      	ldrh	r2, [r7, #2]
 80004d4:	4619      	mov	r1, r3
 80004d6:	f002 ff95 	bl	8003404 <memcpy>
        pDma_st->yeniPoz_u16 = (eskiPozTemp + boyut_u16) % RING_BUFFER_BOYUT;
 80004da:	89fa      	ldrh	r2, [r7, #14]
 80004dc:	887b      	ldrh	r3, [r7, #2]
 80004de:	4413      	add	r3, r2
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80004ee:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
    }

    pDma_st->okunanVeriSayisi_u16 += boyut_u16;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80004f8:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80004fc:	887b      	ldrh	r3, [r7, #2]
 80004fe:	4413      	add	r3, r2
 8000500:	b29a      	uxth	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000508:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
}
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <DmaRxKesme>:
	}
}


void DmaRxKesme(Dma_t *pDma_st, uint16_t boyut_u16)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	807b      	strh	r3, [r7, #2]
    // Ring buffer'a veri yaz
    RingBufferYaz(pDma_st, boyut_u16);
 8000520:	887b      	ldrh	r3, [r7, #2]
 8000522:	4619      	mov	r1, r3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff ff90 	bl	800044a <RingBufferYaz>


    // UART DMA alımını yeniden başlat
    if (HAL_UARTEx_ReceiveToIdle_DMA(pDma_st->pUart, pDma_st->rxBuffer_u8a, RX_BUFFER_BOYUT) != HAL_OK)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6818      	ldr	r0, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8000534:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000538:	4619      	mov	r1, r3
 800053a:	f001 ffdf 	bl	80024fc <HAL_UARTEx_ReceiveToIdle_DMA>
    {

    }

    // Half Transfer Interrupt'ı devre dışı bırak
    __HAL_DMA_DISABLE_IT(pDma_st->pDmaUartRx, DMA_IT_HT);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f022 0204 	bic.w	r2, r2, #4
 8000550:	601a      	str	r2, [r3, #0]
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <HAL_UARTEx_RxEventCallback+0x50>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d104      	bne.n	800057c <HAL_UARTEx_RxEventCallback+0x20>
	{
		DmaRxKesme(&Glo_st.usartDma1_st, Size);
 8000572:	887b      	ldrh	r3, [r7, #2]
 8000574:	4619      	mov	r1, r3
 8000576:	480e      	ldr	r0, [pc, #56]	@ (80005b0 <HAL_UARTEx_RxEventCallback+0x54>)
 8000578:	f7ff ffcc 	bl	8000514 <DmaRxKesme>
	}
	if (huart->Instance == USART2)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <HAL_UARTEx_RxEventCallback+0x58>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d104      	bne.n	8000590 <HAL_UARTEx_RxEventCallback+0x34>
	{
		DmaRxKesme(&Glo_st.usartDma2_st, Size);
 8000586:	887b      	ldrh	r3, [r7, #2]
 8000588:	4619      	mov	r1, r3
 800058a:	480b      	ldr	r0, [pc, #44]	@ (80005b8 <HAL_UARTEx_RxEventCallback+0x5c>)
 800058c:	f7ff ffc2 	bl	8000514 <DmaRxKesme>
	}
	if (huart->Instance == USART3)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a09      	ldr	r2, [pc, #36]	@ (80005bc <HAL_UARTEx_RxEventCallback+0x60>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d104      	bne.n	80005a4 <HAL_UARTEx_RxEventCallback+0x48>
	{
		DmaRxKesme(&Glo_st.usartDma3_st, Size);
 800059a:	887b      	ldrh	r3, [r7, #2]
 800059c:	4619      	mov	r1, r3
 800059e:	4808      	ldr	r0, [pc, #32]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0x64>)
 80005a0:	f7ff ffb8 	bl	8000514 <DmaRxKesme>
	}
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40013800 	.word	0x40013800
 80005b0:	20000034 	.word	0x20000034
 80005b4:	40004400 	.word	0x40004400
 80005b8:	20001444 	.word	0x20001444
 80005bc:	40004800 	.word	0x40004800
 80005c0:	20002854 	.word	0x20002854

080005c4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a11      	ldr	r2, [pc, #68]	@ (8000618 <HAL_UART_TxCpltCallback+0x54>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d105      	bne.n	80005e2 <HAL_UART_TxCpltCallback+0x1e>
	{
		Glo_st.usartDma1_st.txCallBackFlag_u8 = 1;
 80005d6:	4b11      	ldr	r3, [pc, #68]	@ (800061c <HAL_UART_TxCpltCallback+0x58>)
 80005d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80005dc:	2201      	movs	r2, #1
 80005de:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
	}
	if (huart->Instance == USART2)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <HAL_UART_TxCpltCallback+0x5c>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d105      	bne.n	80005f8 <HAL_UART_TxCpltCallback+0x34>
	{
		Glo_st.usartDma2_st.txCallBackFlag_u8 = 1;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <HAL_UART_TxCpltCallback+0x58>)
 80005ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80005f2:	2201      	movs	r2, #1
 80005f4:	f883 282a 	strb.w	r2, [r3, #2090]	@ 0x82a
	}
	if (huart->Instance == USART3)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <HAL_UART_TxCpltCallback+0x60>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d105      	bne.n	800060e <HAL_UART_TxCpltCallback+0x4a>
	{
		Glo_st.usartDma3_st.txCallBackFlag_u8 = 1;
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <HAL_UART_TxCpltCallback+0x58>)
 8000604:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000608:	2201      	movs	r2, #1
 800060a:	f883 2c3a 	strb.w	r2, [r3, #3130]	@ 0xc3a
	}

}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	40013800 	.word	0x40013800
 800061c:	20000028 	.word	0x20000028
 8000620:	40004400 	.word	0x40004400
 8000624:	40004800 	.word	0x40004800

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fce8 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f80e 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f916 	bl	8000864 <MX_GPIO_Init>
  MX_DMA_Init();
 8000638:	f000 f8ce 	bl	80007d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800063c:	f000 f84e 	bl	80006dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000640:	f000 f876 	bl	8000730 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000644:	f000 f89e 	bl	8000784 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  loraGnssMain();
 8000648:	f7ff fd80 	bl	800014c <loraGnssMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <main+0x24>

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b090      	sub	sp, #64	@ 0x40
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	2228      	movs	r2, #40	@ 0x28
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fea4 	bl	80033ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000676:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800067a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800067c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	2301      	movs	r3, #1
 8000684:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800068e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000690:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 8000694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fa5e 	bl	8001b5c <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006a6:	f000 f959 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2302      	movs	r3, #2
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2102      	movs	r1, #2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fccb 	bl	8002060 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006d0:	f000 f944 	bl	800095c <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3740      	adds	r7, #64	@ 0x40
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <MX_USART1_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 8000714:	f001 fe32 	bl	800237c <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f91d 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000426c 	.word	0x2000426c
 800072c:	40013800 	.word	0x40013800

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f001 fe08 	bl	800237c <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f8f3 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200042b4 	.word	0x200042b4
 8000780:	40004400 	.word	0x40004400

08000784 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART3_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_USART3_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_USART3_UART_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART3_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART3_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART3_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART3_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART3_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART3_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART3_UART_Init+0x4c>)
 80007bc:	f001 fdde 	bl	800237c <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f8c9 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200042fc 	.word	0x200042fc
 80007d4:	40004800 	.word	0x40004800

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007de:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <MX_DMA_Init+0x88>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000860 <MX_DMA_Init+0x88>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <MX_DMA_Init+0x88>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	200c      	movs	r0, #12
 80007fc:	f000 fd39 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000800:	200c      	movs	r0, #12
 8000802:	f000 fd52 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	200d      	movs	r0, #13
 800080c:	f000 fd31 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000810:	200d      	movs	r0, #13
 8000812:	f000 fd4a 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	200e      	movs	r0, #14
 800081c:	f000 fd29 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000820:	200e      	movs	r0, #14
 8000822:	f000 fd42 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	200f      	movs	r0, #15
 800082c:	f000 fd21 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000830:	200f      	movs	r0, #15
 8000832:	f000 fd3a 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2010      	movs	r0, #16
 800083c:	f000 fd19 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000840:	2010      	movs	r0, #16
 8000842:	f000 fd32 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2011      	movs	r0, #17
 800084c:	f000 fd11 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000850:	2011      	movs	r0, #17
 8000852:	f000 fd2a 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000878:	4b35      	ldr	r3, [pc, #212]	@ (8000950 <MX_GPIO_Init+0xec>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a34      	ldr	r2, [pc, #208]	@ (8000950 <MX_GPIO_Init+0xec>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b32      	ldr	r3, [pc, #200]	@ (8000950 <MX_GPIO_Init+0xec>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0310 	and.w	r3, r3, #16
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000890:	4b2f      	ldr	r3, [pc, #188]	@ (8000950 <MX_GPIO_Init+0xec>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a2e      	ldr	r2, [pc, #184]	@ (8000950 <MX_GPIO_Init+0xec>)
 8000896:	f043 0320 	orr.w	r3, r3, #32
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b2c      	ldr	r3, [pc, #176]	@ (8000950 <MX_GPIO_Init+0xec>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0320 	and.w	r3, r3, #32
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <MX_GPIO_Init+0xec>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a28      	ldr	r2, [pc, #160]	@ (8000950 <MX_GPIO_Init+0xec>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <MX_GPIO_Init+0xec>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_GPIO_Init+0xec>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <MX_GPIO_Init+0xec>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_GPIO_Init+0xec>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008de:	481d      	ldr	r0, [pc, #116]	@ (8000954 <MX_GPIO_Init+0xf0>)
 80008e0:	f001 f924 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin_Pin|M0_Pin_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80008ea:	481b      	ldr	r0, [pc, #108]	@ (8000958 <MX_GPIO_Init+0xf4>)
 80008ec:	f001 f91e 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2302      	movs	r3, #2
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	4812      	ldr	r0, [pc, #72]	@ (8000954 <MX_GPIO_Init+0xf0>)
 800090a:	f000 ff8b 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin_Pin M0_Pin_Pin */
  GPIO_InitStruct.Pin = M1_Pin_Pin|M0_Pin_Pin;
 800090e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000918:	2302      	movs	r3, #2
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2302      	movs	r3, #2
 800091e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4619      	mov	r1, r3
 8000926:	480c      	ldr	r0, [pc, #48]	@ (8000958 <MX_GPIO_Init+0xf4>)
 8000928:	f000 ff7c 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pin : Aux_pin_Pin */
  GPIO_InitStruct.Pin = Aux_pin_Pin;
 800092c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Aux_pin_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0310 	add.w	r3, r7, #16
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_GPIO_Init+0xf4>)
 8000942:	f000 ff6f 	bl	8001824 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	40011000 	.word	0x40011000
 8000958:	40010c00 	.word	0x40010c00

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <Error_Handler+0x8>

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	4a14      	ldr	r2, [pc, #80]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6193      	str	r3, [r2, #24]
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_MspInit+0x5c>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a0e      	ldr	r2, [pc, #56]	@ (80009c4 <HAL_MspInit+0x5c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800099e:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <HAL_MspInit+0x60>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	4a04      	ldr	r2, [pc, #16]	@ (80009c8 <HAL_MspInit+0x60>)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010000 	.word	0x40010000

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	@ 0x30
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0320 	add.w	r3, r7, #32
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a8c      	ldr	r2, [pc, #560]	@ (8000c18 <HAL_UART_MspInit+0x24c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	f040 8088 	bne.w	8000afe <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ee:	4b8b      	ldr	r3, [pc, #556]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a8a      	ldr	r2, [pc, #552]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b88      	ldr	r3, [pc, #544]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a02:	61fb      	str	r3, [r7, #28]
 8000a04:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b85      	ldr	r3, [pc, #532]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	4a84      	ldr	r2, [pc, #528]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	4b82      	ldr	r3, [pc, #520]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	4619      	mov	r1, r3
 8000a32:	487b      	ldr	r0, [pc, #492]	@ (8000c20 <HAL_UART_MspInit+0x254>)
 8000a34:	f000 fef6 	bl	8001824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4874      	ldr	r0, [pc, #464]	@ (8000c20 <HAL_UART_MspInit+0x254>)
 8000a4e:	f000 fee9 	bl	8001824 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000a52:	4b74      	ldr	r3, [pc, #464]	@ (8000c24 <HAL_UART_MspInit+0x258>)
 8000a54:	4a74      	ldr	r2, [pc, #464]	@ (8000c28 <HAL_UART_MspInit+0x25c>)
 8000a56:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a58:	4b72      	ldr	r3, [pc, #456]	@ (8000c24 <HAL_UART_MspInit+0x258>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5e:	4b71      	ldr	r3, [pc, #452]	@ (8000c24 <HAL_UART_MspInit+0x258>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a64:	4b6f      	ldr	r3, [pc, #444]	@ (8000c24 <HAL_UART_MspInit+0x258>)
 8000a66:	2280      	movs	r2, #128	@ 0x80
 8000a68:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a6a:	4b6e      	ldr	r3, [pc, #440]	@ (8000c24 <HAL_UART_MspInit+0x258>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a70:	4b6c      	ldr	r3, [pc, #432]	@ (8000c24 <HAL_UART_MspInit+0x258>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a76:	4b6b      	ldr	r3, [pc, #428]	@ (8000c24 <HAL_UART_MspInit+0x258>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a7c:	4b69      	ldr	r3, [pc, #420]	@ (8000c24 <HAL_UART_MspInit+0x258>)
 8000a7e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a84:	4867      	ldr	r0, [pc, #412]	@ (8000c24 <HAL_UART_MspInit+0x258>)
 8000a86:	f000 fc2b 	bl	80012e0 <HAL_DMA_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000a90:	f7ff ff64 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a63      	ldr	r2, [pc, #396]	@ (8000c24 <HAL_UART_MspInit+0x258>)
 8000a98:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a9a:	4a62      	ldr	r2, [pc, #392]	@ (8000c24 <HAL_UART_MspInit+0x258>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000aa0:	4b62      	ldr	r3, [pc, #392]	@ (8000c2c <HAL_UART_MspInit+0x260>)
 8000aa2:	4a63      	ldr	r2, [pc, #396]	@ (8000c30 <HAL_UART_MspInit+0x264>)
 8000aa4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa6:	4b61      	ldr	r3, [pc, #388]	@ (8000c2c <HAL_UART_MspInit+0x260>)
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aac:	4b5f      	ldr	r3, [pc, #380]	@ (8000c2c <HAL_UART_MspInit+0x260>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab2:	4b5e      	ldr	r3, [pc, #376]	@ (8000c2c <HAL_UART_MspInit+0x260>)
 8000ab4:	2280      	movs	r2, #128	@ 0x80
 8000ab6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab8:	4b5c      	ldr	r3, [pc, #368]	@ (8000c2c <HAL_UART_MspInit+0x260>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000abe:	4b5b      	ldr	r3, [pc, #364]	@ (8000c2c <HAL_UART_MspInit+0x260>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ac4:	4b59      	ldr	r3, [pc, #356]	@ (8000c2c <HAL_UART_MspInit+0x260>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aca:	4b58      	ldr	r3, [pc, #352]	@ (8000c2c <HAL_UART_MspInit+0x260>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ad0:	4856      	ldr	r0, [pc, #344]	@ (8000c2c <HAL_UART_MspInit+0x260>)
 8000ad2:	f000 fc05 	bl	80012e0 <HAL_DMA_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8000adc:	f7ff ff3e 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a52      	ldr	r2, [pc, #328]	@ (8000c2c <HAL_UART_MspInit+0x260>)
 8000ae4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ae6:	4a51      	ldr	r2, [pc, #324]	@ (8000c2c <HAL_UART_MspInit+0x260>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2025      	movs	r0, #37	@ 0x25
 8000af2:	f000 fbbe 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000af6:	2025      	movs	r0, #37	@ 0x25
 8000af8:	f000 fbd7 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000afc:	e131      	b.n	8000d62 <HAL_UART_MspInit+0x396>
  else if(huart->Instance==USART2)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a4c      	ldr	r2, [pc, #304]	@ (8000c34 <HAL_UART_MspInit+0x268>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	f040 809f 	bne.w	8000c48 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0a:	4b44      	ldr	r3, [pc, #272]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a43      	ldr	r2, [pc, #268]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b14:	61d3      	str	r3, [r2, #28]
 8000b16:	4b41      	ldr	r3, [pc, #260]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b3e      	ldr	r3, [pc, #248]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a3d      	ldr	r2, [pc, #244]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c1c <HAL_UART_MspInit+0x250>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4834      	ldr	r0, [pc, #208]	@ (8000c20 <HAL_UART_MspInit+0x254>)
 8000b4e:	f000 fe69 	bl	8001824 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b52:	2308      	movs	r3, #8
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	4619      	mov	r1, r3
 8000b64:	482e      	ldr	r0, [pc, #184]	@ (8000c20 <HAL_UART_MspInit+0x254>)
 8000b66:	f000 fe5d 	bl	8001824 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000b6a:	4b33      	ldr	r3, [pc, #204]	@ (8000c38 <HAL_UART_MspInit+0x26c>)
 8000b6c:	4a33      	ldr	r2, [pc, #204]	@ (8000c3c <HAL_UART_MspInit+0x270>)
 8000b6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b70:	4b31      	ldr	r3, [pc, #196]	@ (8000c38 <HAL_UART_MspInit+0x26c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b76:	4b30      	ldr	r3, [pc, #192]	@ (8000c38 <HAL_UART_MspInit+0x26c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c38 <HAL_UART_MspInit+0x26c>)
 8000b7e:	2280      	movs	r2, #128	@ 0x80
 8000b80:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b82:	4b2d      	ldr	r3, [pc, #180]	@ (8000c38 <HAL_UART_MspInit+0x26c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b88:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <HAL_UART_MspInit+0x26c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <HAL_UART_MspInit+0x26c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b94:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <HAL_UART_MspInit+0x26c>)
 8000b96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b9c:	4826      	ldr	r0, [pc, #152]	@ (8000c38 <HAL_UART_MspInit+0x26c>)
 8000b9e:	f000 fb9f 	bl	80012e0 <HAL_DMA_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8000ba8:	f7ff fed8 	bl	800095c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a22      	ldr	r2, [pc, #136]	@ (8000c38 <HAL_UART_MspInit+0x26c>)
 8000bb0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bb2:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <HAL_UART_MspInit+0x26c>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000bb8:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <HAL_UART_MspInit+0x274>)
 8000bba:	4a22      	ldr	r2, [pc, #136]	@ (8000c44 <HAL_UART_MspInit+0x278>)
 8000bbc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bbe:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <HAL_UART_MspInit+0x274>)
 8000bc0:	2210      	movs	r2, #16
 8000bc2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <HAL_UART_MspInit+0x274>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <HAL_UART_MspInit+0x274>)
 8000bcc:	2280      	movs	r2, #128	@ 0x80
 8000bce:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <HAL_UART_MspInit+0x274>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <HAL_UART_MspInit+0x274>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <HAL_UART_MspInit+0x274>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <HAL_UART_MspInit+0x274>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000be8:	4815      	ldr	r0, [pc, #84]	@ (8000c40 <HAL_UART_MspInit+0x274>)
 8000bea:	f000 fb79 	bl	80012e0 <HAL_DMA_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8000bf4:	f7ff feb2 	bl	800095c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a11      	ldr	r2, [pc, #68]	@ (8000c40 <HAL_UART_MspInit+0x274>)
 8000bfc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bfe:	4a10      	ldr	r2, [pc, #64]	@ (8000c40 <HAL_UART_MspInit+0x274>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	2026      	movs	r0, #38	@ 0x26
 8000c0a:	f000 fb32 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c0e:	2026      	movs	r0, #38	@ 0x26
 8000c10:	f000 fb4b 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000c14:	e0a5      	b.n	8000d62 <HAL_UART_MspInit+0x396>
 8000c16:	bf00      	nop
 8000c18:	40013800 	.word	0x40013800
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010800 	.word	0x40010800
 8000c24:	20004344 	.word	0x20004344
 8000c28:	40020058 	.word	0x40020058
 8000c2c:	20004388 	.word	0x20004388
 8000c30:	40020044 	.word	0x40020044
 8000c34:	40004400 	.word	0x40004400
 8000c38:	200043cc 	.word	0x200043cc
 8000c3c:	4002006c 	.word	0x4002006c
 8000c40:	20004410 	.word	0x20004410
 8000c44:	40020080 	.word	0x40020080
  else if(huart->Instance==USART3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a47      	ldr	r2, [pc, #284]	@ (8000d6c <HAL_UART_MspInit+0x3a0>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	f040 8087 	bne.w	8000d62 <HAL_UART_MspInit+0x396>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c54:	4b46      	ldr	r3, [pc, #280]	@ (8000d70 <HAL_UART_MspInit+0x3a4>)
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	4a45      	ldr	r2, [pc, #276]	@ (8000d70 <HAL_UART_MspInit+0x3a4>)
 8000c5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c5e:	61d3      	str	r3, [r2, #28]
 8000c60:	4b43      	ldr	r3, [pc, #268]	@ (8000d70 <HAL_UART_MspInit+0x3a4>)
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b40      	ldr	r3, [pc, #256]	@ (8000d70 <HAL_UART_MspInit+0x3a4>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a3f      	ldr	r2, [pc, #252]	@ (8000d70 <HAL_UART_MspInit+0x3a4>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b3d      	ldr	r3, [pc, #244]	@ (8000d70 <HAL_UART_MspInit+0x3a4>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	4619      	mov	r1, r3
 8000c98:	4836      	ldr	r0, [pc, #216]	@ (8000d74 <HAL_UART_MspInit+0x3a8>)
 8000c9a:	f000 fdc3 	bl	8001824 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4830      	ldr	r0, [pc, #192]	@ (8000d74 <HAL_UART_MspInit+0x3a8>)
 8000cb4:	f000 fdb6 	bl	8001824 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d78 <HAL_UART_MspInit+0x3ac>)
 8000cba:	4a30      	ldr	r2, [pc, #192]	@ (8000d7c <HAL_UART_MspInit+0x3b0>)
 8000cbc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <HAL_UART_MspInit+0x3ac>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d78 <HAL_UART_MspInit+0x3ac>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cca:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <HAL_UART_MspInit+0x3ac>)
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd0:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <HAL_UART_MspInit+0x3ac>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd6:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <HAL_UART_MspInit+0x3ac>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000cdc:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <HAL_UART_MspInit+0x3ac>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ce2:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <HAL_UART_MspInit+0x3ac>)
 8000ce4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ce8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000cea:	4823      	ldr	r0, [pc, #140]	@ (8000d78 <HAL_UART_MspInit+0x3ac>)
 8000cec:	f000 faf8 	bl	80012e0 <HAL_DMA_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_UART_MspInit+0x32e>
      Error_Handler();
 8000cf6:	f7ff fe31 	bl	800095c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8000d78 <HAL_UART_MspInit+0x3ac>)
 8000cfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d00:	4a1d      	ldr	r2, [pc, #116]	@ (8000d78 <HAL_UART_MspInit+0x3ac>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <HAL_UART_MspInit+0x3b4>)
 8000d08:	4a1e      	ldr	r2, [pc, #120]	@ (8000d84 <HAL_UART_MspInit+0x3b8>)
 8000d0a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <HAL_UART_MspInit+0x3b4>)
 8000d0e:	2210      	movs	r2, #16
 8000d10:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d12:	4b1b      	ldr	r3, [pc, #108]	@ (8000d80 <HAL_UART_MspInit+0x3b4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d18:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <HAL_UART_MspInit+0x3b4>)
 8000d1a:	2280      	movs	r2, #128	@ 0x80
 8000d1c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <HAL_UART_MspInit+0x3b4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d24:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <HAL_UART_MspInit+0x3b4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_UART_MspInit+0x3b4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <HAL_UART_MspInit+0x3b4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000d36:	4812      	ldr	r0, [pc, #72]	@ (8000d80 <HAL_UART_MspInit+0x3b4>)
 8000d38:	f000 fad2 	bl	80012e0 <HAL_DMA_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_UART_MspInit+0x37a>
      Error_Handler();
 8000d42:	f7ff fe0b 	bl	800095c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <HAL_UART_MspInit+0x3b4>)
 8000d4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d80 <HAL_UART_MspInit+0x3b4>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2027      	movs	r0, #39	@ 0x27
 8000d58:	f000 fa8b 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d5c:	2027      	movs	r0, #39	@ 0x27
 8000d5e:	f000 faa4 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3730      	adds	r7, #48	@ 0x30
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40004800 	.word	0x40004800
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010c00 	.word	0x40010c00
 8000d78:	20004454 	.word	0x20004454
 8000d7c:	40020030 	.word	0x40020030
 8000d80:	20004498 	.word	0x20004498
 8000d84:	4002001c 	.word	0x4002001c

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <NMI_Handler+0x4>

08000d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <MemManage_Handler+0x4>

08000da0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <UsageFault_Handler+0x4>

08000db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 f958 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Glo_st.sayac_u32++;
 8000ddc:	4b41      	ldr	r3, [pc, #260]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	4a40      	ldr	r2, [pc, #256]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000de4:	6013      	str	r3, [r2, #0]

	if( (Glo_st.sayac_u32 % 1000U) == 0 )
 8000de6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee8 <SysTick_Handler+0x114>)
 8000dec:	fba3 1302 	umull	r1, r3, r3, r2
 8000df0:	099b      	lsrs	r3, r3, #6
 8000df2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000df6:	fb01 f303 	mul.w	r3, r1, r3
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <SysTick_Handler+0x32>
	{
		Glo_st._1HzFlag_u8 = 1;
 8000e00:	4b38      	ldr	r3, [pc, #224]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	711a      	strb	r2, [r3, #4]
	}
	if( (Glo_st.sayac_u32 % 500U) == 0 )
 8000e06:	4b37      	ldr	r3, [pc, #220]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b37      	ldr	r3, [pc, #220]	@ (8000ee8 <SysTick_Handler+0x114>)
 8000e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e10:	095b      	lsrs	r3, r3, #5
 8000e12:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e16:	fb01 f303 	mul.w	r3, r1, r3
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <SysTick_Handler+0x52>
	{
		Glo_st._2HzFlag_u8 = 1;
 8000e20:	4b30      	ldr	r3, [pc, #192]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	715a      	strb	r2, [r3, #5]
	}
	if( (Glo_st.sayac_u32 % 200U) == 0 )
 8000e26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <SysTick_Handler+0x118>)
 8000e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e30:	099b      	lsrs	r3, r3, #6
 8000e32:	21c8      	movs	r1, #200	@ 0xc8
 8000e34:	fb01 f303 	mul.w	r3, r1, r3
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <SysTick_Handler+0x70>
	{
		Glo_st._5HzFlag_u8 = 1;
 8000e3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	719a      	strb	r2, [r3, #6]
	}
	if( (Glo_st.sayac_u32 % 100U) == 0 )
 8000e44:	4b27      	ldr	r3, [pc, #156]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <SysTick_Handler+0x118>)
 8000e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2164      	movs	r1, #100	@ 0x64
 8000e52:	fb01 f303 	mul.w	r3, r1, r3
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <SysTick_Handler+0x8e>
	{
		Glo_st._10HzFlag_u8 = 1;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	71da      	strb	r2, [r3, #7]
	}
	if( (Glo_st.sayac_u32 % 50U) == 0 )
 8000e62:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <SysTick_Handler+0x118>)
 8000e68:	fba3 1302 	umull	r1, r3, r3, r2
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	2132      	movs	r1, #50	@ 0x32
 8000e70:	fb01 f303 	mul.w	r3, r1, r3
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d102      	bne.n	8000e80 <SysTick_Handler+0xac>
	{
		Glo_st._20HzFlag_u8 = 1;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	721a      	strb	r2, [r3, #8]
	}
	if( (Glo_st.sayac_u32 % 20U) == 0 )
 8000e80:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000e82:	6819      	ldr	r1, [r3, #0]
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <SysTick_Handler+0x11c>)
 8000e86:	fba3 2301 	umull	r2, r3, r3, r1
 8000e8a:	091a      	lsrs	r2, r3, #4
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	1aca      	subs	r2, r1, r3
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d102      	bne.n	8000ea0 <SysTick_Handler+0xcc>
	{
		Glo_st._50HzFlag_u8 = 1;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	725a      	strb	r2, [r3, #9]
	}
	if( (Glo_st.sayac_u32 % 10U) == 0 )
 8000ea0:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000ea2:	6819      	ldr	r1, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <SysTick_Handler+0x11c>)
 8000ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	1aca      	subs	r2, r1, r3
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	d102      	bne.n	8000ec0 <SysTick_Handler+0xec>
	{
		Glo_st._100HzFlag_u8 = 1;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	729a      	strb	r2, [r3, #10]
	}
	if( (Glo_st.sayac_u32 % 5U) == 0 )
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000ec2:	6819      	ldr	r1, [r3, #0]
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <SysTick_Handler+0x11c>)
 8000ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8000eca:	089a      	lsrs	r2, r3, #2
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	1aca      	subs	r2, r1, r3
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	d102      	bne.n	8000ede <SysTick_Handler+0x10a>
	{
		Glo_st._200HzFlag_u8 = 1;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	@ (8000ee4 <SysTick_Handler+0x110>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	72da      	strb	r2, [r3, #11]
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000028 	.word	0x20000028
 8000ee8:	10624dd3 	.word	0x10624dd3
 8000eec:	51eb851f 	.word	0x51eb851f
 8000ef0:	cccccccd 	.word	0xcccccccd

08000ef4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA1_Channel2_IRQHandler+0x10>)
 8000efa:	f000 fb5f 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20004498 	.word	0x20004498

08000f08 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <DMA1_Channel3_IRQHandler+0x10>)
 8000f0e:	f000 fb55 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20004454 	.word	0x20004454

08000f1c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <DMA1_Channel4_IRQHandler+0x10>)
 8000f22:	f000 fb4b 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20004388 	.word	0x20004388

08000f30 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <DMA1_Channel5_IRQHandler+0x10>)
 8000f36:	f000 fb41 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20004344 	.word	0x20004344

08000f44 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <DMA1_Channel6_IRQHandler+0x10>)
 8000f4a:	f000 fb37 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200043cc 	.word	0x200043cc

08000f58 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <DMA1_Channel7_IRQHandler+0x10>)
 8000f5e:	f000 fb2d 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20004410 	.word	0x20004410

08000f6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <USART1_IRQHandler+0x10>)
 8000f72:	f001 fb21 	bl	80025b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000426c 	.word	0x2000426c

08000f80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <USART2_IRQHandler+0x10>)
 8000f86:	f001 fb17 	bl	80025b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200042b4 	.word	0x200042b4

08000f94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <USART3_IRQHandler+0x10>)
 8000f9a:	f001 fb0d 	bl	80025b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200042fc 	.word	0x200042fc

08000fa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb4:	f7ff fff8 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fba:	490c      	ldr	r1, [pc, #48]	@ (8000fec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a09      	ldr	r2, [pc, #36]	@ (8000ff4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fd0:	4c09      	ldr	r4, [pc, #36]	@ (8000ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fde:	f002 f9ed 	bl	80033bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe2:	f7ff fb21 	bl	8000628 <main>
  bx lr
 8000fe6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ff0:	0800366c 	.word	0x0800366c
  ldr r2, =_sbss
 8000ff4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ff8:	200044e0 	.word	0x200044e0

08000ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_2_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_Init+0x28>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_Init+0x28>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f923 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	200f      	movs	r0, #15
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fca4 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f93b 	bl	80012c6 <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f903 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000000 	.word	0x20000000
 8001084:	20000008 	.word	0x20000008
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_IncTick+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <HAL_IncTick+0x20>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a03      	ldr	r2, [pc, #12]	@ (80010ac <HAL_IncTick+0x20>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000008 	.word	0x20000008
 80010ac:	200044dc 	.word	0x200044dc

080010b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b02      	ldr	r3, [pc, #8]	@ (80010c0 <HAL_GetTick+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	200044dc 	.word	0x200044dc

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4906      	ldr	r1, [pc, #24]	@ (800115c <__NVIC_EnableIRQ+0x34>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	@ (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	@ (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	@ 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	@ 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff90 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff2d 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff42 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff35 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e043      	b.n	800137e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <HAL_DMA_Init+0xa8>)
 80012fe:	4413      	add	r3, r2
 8001300:	4a22      	ldr	r2, [pc, #136]	@ (800138c <HAL_DMA_Init+0xac>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	009a      	lsls	r2, r3, #2
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a1f      	ldr	r2, [pc, #124]	@ (8001390 <HAL_DMA_Init+0xb0>)
 8001312:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800132a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800132e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	bffdfff8 	.word	0xbffdfff8
 800138c:	cccccccd 	.word	0xcccccccd
 8001390:	40020000 	.word	0x40020000

08001394 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_DMA_Start_IT+0x20>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e04b      	b.n	800144c <HAL_DMA_Start_IT+0xb8>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d13a      	bne.n	800143e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2202      	movs	r2, #2
 80013cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	68b9      	ldr	r1, [r7, #8]
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 f9eb 	bl	80017c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d008      	beq.n	800140c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 020e 	orr.w	r2, r2, #14
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e00f      	b.n	800142c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0204 	bic.w	r2, r2, #4
 800141a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 020a 	orr.w	r2, r2, #10
 800142a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e005      	b.n	800144a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001446:	2302      	movs	r3, #2
 8001448:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800144a:	7dfb      	ldrb	r3, [r7, #23]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d008      	beq.n	800147e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2204      	movs	r2, #4
 8001470:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e020      	b.n	80014c0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 020e 	bic.w	r2, r2, #14
 800148c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0201 	bic.w	r2, r2, #1
 800149c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014a6:	2101      	movs	r1, #1
 80014a8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
	...

080014cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d005      	beq.n	80014f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2204      	movs	r2, #4
 80014e8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e051      	b.n	8001594 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020e 	bic.w	r2, r2, #14
 80014fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a22      	ldr	r2, [pc, #136]	@ (80015a0 <HAL_DMA_Abort_IT+0xd4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d029      	beq.n	800156e <HAL_DMA_Abort_IT+0xa2>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a21      	ldr	r2, [pc, #132]	@ (80015a4 <HAL_DMA_Abort_IT+0xd8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d022      	beq.n	800156a <HAL_DMA_Abort_IT+0x9e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1f      	ldr	r2, [pc, #124]	@ (80015a8 <HAL_DMA_Abort_IT+0xdc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01a      	beq.n	8001564 <HAL_DMA_Abort_IT+0x98>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1e      	ldr	r2, [pc, #120]	@ (80015ac <HAL_DMA_Abort_IT+0xe0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d012      	beq.n	800155e <HAL_DMA_Abort_IT+0x92>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1c      	ldr	r2, [pc, #112]	@ (80015b0 <HAL_DMA_Abort_IT+0xe4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00a      	beq.n	8001558 <HAL_DMA_Abort_IT+0x8c>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <HAL_DMA_Abort_IT+0xe8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d102      	bne.n	8001552 <HAL_DMA_Abort_IT+0x86>
 800154c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001550:	e00e      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 8001552:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001556:	e00b      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 8001558:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800155c:	e008      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 800155e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001562:	e005      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 8001564:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001568:	e002      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 800156a:	2310      	movs	r3, #16
 800156c:	e000      	b.n	8001570 <HAL_DMA_Abort_IT+0xa4>
 800156e:	2301      	movs	r3, #1
 8001570:	4a11      	ldr	r2, [pc, #68]	@ (80015b8 <HAL_DMA_Abort_IT+0xec>)
 8001572:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	4798      	blx	r3
    } 
  }
  return status;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40020008 	.word	0x40020008
 80015a4:	4002001c 	.word	0x4002001c
 80015a8:	40020030 	.word	0x40020030
 80015ac:	40020044 	.word	0x40020044
 80015b0:	40020058 	.word	0x40020058
 80015b4:	4002006c 	.word	0x4002006c
 80015b8:	40020000 	.word	0x40020000

080015bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	2204      	movs	r2, #4
 80015da:	409a      	lsls	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d04f      	beq.n	8001684 <HAL_DMA_IRQHandler+0xc8>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d04a      	beq.n	8001684 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d107      	bne.n	800160c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0204 	bic.w	r2, r2, #4
 800160a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a66      	ldr	r2, [pc, #408]	@ (80017ac <HAL_DMA_IRQHandler+0x1f0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d029      	beq.n	800166a <HAL_DMA_IRQHandler+0xae>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a65      	ldr	r2, [pc, #404]	@ (80017b0 <HAL_DMA_IRQHandler+0x1f4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d022      	beq.n	8001666 <HAL_DMA_IRQHandler+0xaa>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a63      	ldr	r2, [pc, #396]	@ (80017b4 <HAL_DMA_IRQHandler+0x1f8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01a      	beq.n	8001660 <HAL_DMA_IRQHandler+0xa4>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a62      	ldr	r2, [pc, #392]	@ (80017b8 <HAL_DMA_IRQHandler+0x1fc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d012      	beq.n	800165a <HAL_DMA_IRQHandler+0x9e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a60      	ldr	r2, [pc, #384]	@ (80017bc <HAL_DMA_IRQHandler+0x200>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00a      	beq.n	8001654 <HAL_DMA_IRQHandler+0x98>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a5f      	ldr	r2, [pc, #380]	@ (80017c0 <HAL_DMA_IRQHandler+0x204>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d102      	bne.n	800164e <HAL_DMA_IRQHandler+0x92>
 8001648:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800164c:	e00e      	b.n	800166c <HAL_DMA_IRQHandler+0xb0>
 800164e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001652:	e00b      	b.n	800166c <HAL_DMA_IRQHandler+0xb0>
 8001654:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001658:	e008      	b.n	800166c <HAL_DMA_IRQHandler+0xb0>
 800165a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800165e:	e005      	b.n	800166c <HAL_DMA_IRQHandler+0xb0>
 8001660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001664:	e002      	b.n	800166c <HAL_DMA_IRQHandler+0xb0>
 8001666:	2340      	movs	r3, #64	@ 0x40
 8001668:	e000      	b.n	800166c <HAL_DMA_IRQHandler+0xb0>
 800166a:	2304      	movs	r3, #4
 800166c:	4a55      	ldr	r2, [pc, #340]	@ (80017c4 <HAL_DMA_IRQHandler+0x208>)
 800166e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 8094 	beq.w	80017a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001682:	e08e      	b.n	80017a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	2202      	movs	r2, #2
 800168a:	409a      	lsls	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d056      	beq.n	8001742 <HAL_DMA_IRQHandler+0x186>
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d051      	beq.n	8001742 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10b      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 020a 	bic.w	r2, r2, #10
 80016ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a38      	ldr	r2, [pc, #224]	@ (80017ac <HAL_DMA_IRQHandler+0x1f0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d029      	beq.n	8001722 <HAL_DMA_IRQHandler+0x166>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a37      	ldr	r2, [pc, #220]	@ (80017b0 <HAL_DMA_IRQHandler+0x1f4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d022      	beq.n	800171e <HAL_DMA_IRQHandler+0x162>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a35      	ldr	r2, [pc, #212]	@ (80017b4 <HAL_DMA_IRQHandler+0x1f8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01a      	beq.n	8001718 <HAL_DMA_IRQHandler+0x15c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a34      	ldr	r2, [pc, #208]	@ (80017b8 <HAL_DMA_IRQHandler+0x1fc>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d012      	beq.n	8001712 <HAL_DMA_IRQHandler+0x156>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a32      	ldr	r2, [pc, #200]	@ (80017bc <HAL_DMA_IRQHandler+0x200>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00a      	beq.n	800170c <HAL_DMA_IRQHandler+0x150>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a31      	ldr	r2, [pc, #196]	@ (80017c0 <HAL_DMA_IRQHandler+0x204>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d102      	bne.n	8001706 <HAL_DMA_IRQHandler+0x14a>
 8001700:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001704:	e00e      	b.n	8001724 <HAL_DMA_IRQHandler+0x168>
 8001706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800170a:	e00b      	b.n	8001724 <HAL_DMA_IRQHandler+0x168>
 800170c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001710:	e008      	b.n	8001724 <HAL_DMA_IRQHandler+0x168>
 8001712:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001716:	e005      	b.n	8001724 <HAL_DMA_IRQHandler+0x168>
 8001718:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800171c:	e002      	b.n	8001724 <HAL_DMA_IRQHandler+0x168>
 800171e:	2320      	movs	r3, #32
 8001720:	e000      	b.n	8001724 <HAL_DMA_IRQHandler+0x168>
 8001722:	2302      	movs	r3, #2
 8001724:	4a27      	ldr	r2, [pc, #156]	@ (80017c4 <HAL_DMA_IRQHandler+0x208>)
 8001726:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	d034      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001740:	e02f      	b.n	80017a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	2208      	movs	r2, #8
 8001748:	409a      	lsls	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d028      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x1e8>
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 020e 	bic.w	r2, r2, #14
 800176a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001774:	2101      	movs	r1, #1
 8001776:	fa01 f202 	lsl.w	r2, r1, r2
 800177a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	4798      	blx	r3
    }
  }
  return;
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
}
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40020008 	.word	0x40020008
 80017b0:	4002001c 	.word	0x4002001c
 80017b4:	40020030 	.word	0x40020030
 80017b8:	40020044 	.word	0x40020044
 80017bc:	40020058 	.word	0x40020058
 80017c0:	4002006c 	.word	0x4002006c
 80017c4:	40020000 	.word	0x40020000

080017c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f202 	lsl.w	r2, r1, r2
 80017e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d108      	bne.n	8001808 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001806:	e007      	b.n	8001818 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	60da      	str	r2, [r3, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
	...

08001824 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001824:	b480      	push	{r7}
 8001826:	b08b      	sub	sp, #44	@ 0x2c
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001836:	e169      	b.n	8001b0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001838:	2201      	movs	r2, #1
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	429a      	cmp	r2, r3
 8001852:	f040 8158 	bne.w	8001b06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a9a      	ldr	r2, [pc, #616]	@ (8001ac4 <HAL_GPIO_Init+0x2a0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d05e      	beq.n	800191e <HAL_GPIO_Init+0xfa>
 8001860:	4a98      	ldr	r2, [pc, #608]	@ (8001ac4 <HAL_GPIO_Init+0x2a0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d875      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 8001866:	4a98      	ldr	r2, [pc, #608]	@ (8001ac8 <HAL_GPIO_Init+0x2a4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d058      	beq.n	800191e <HAL_GPIO_Init+0xfa>
 800186c:	4a96      	ldr	r2, [pc, #600]	@ (8001ac8 <HAL_GPIO_Init+0x2a4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d86f      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 8001872:	4a96      	ldr	r2, [pc, #600]	@ (8001acc <HAL_GPIO_Init+0x2a8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d052      	beq.n	800191e <HAL_GPIO_Init+0xfa>
 8001878:	4a94      	ldr	r2, [pc, #592]	@ (8001acc <HAL_GPIO_Init+0x2a8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d869      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 800187e:	4a94      	ldr	r2, [pc, #592]	@ (8001ad0 <HAL_GPIO_Init+0x2ac>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d04c      	beq.n	800191e <HAL_GPIO_Init+0xfa>
 8001884:	4a92      	ldr	r2, [pc, #584]	@ (8001ad0 <HAL_GPIO_Init+0x2ac>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d863      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 800188a:	4a92      	ldr	r2, [pc, #584]	@ (8001ad4 <HAL_GPIO_Init+0x2b0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d046      	beq.n	800191e <HAL_GPIO_Init+0xfa>
 8001890:	4a90      	ldr	r2, [pc, #576]	@ (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d85d      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 8001896:	2b12      	cmp	r3, #18
 8001898:	d82a      	bhi.n	80018f0 <HAL_GPIO_Init+0xcc>
 800189a:	2b12      	cmp	r3, #18
 800189c:	d859      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 800189e:	a201      	add	r2, pc, #4	@ (adr r2, 80018a4 <HAL_GPIO_Init+0x80>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	0800191f 	.word	0x0800191f
 80018a8:	080018f9 	.word	0x080018f9
 80018ac:	0800190b 	.word	0x0800190b
 80018b0:	0800194d 	.word	0x0800194d
 80018b4:	08001953 	.word	0x08001953
 80018b8:	08001953 	.word	0x08001953
 80018bc:	08001953 	.word	0x08001953
 80018c0:	08001953 	.word	0x08001953
 80018c4:	08001953 	.word	0x08001953
 80018c8:	08001953 	.word	0x08001953
 80018cc:	08001953 	.word	0x08001953
 80018d0:	08001953 	.word	0x08001953
 80018d4:	08001953 	.word	0x08001953
 80018d8:	08001953 	.word	0x08001953
 80018dc:	08001953 	.word	0x08001953
 80018e0:	08001953 	.word	0x08001953
 80018e4:	08001953 	.word	0x08001953
 80018e8:	08001901 	.word	0x08001901
 80018ec:	08001915 	.word	0x08001915
 80018f0:	4a79      	ldr	r2, [pc, #484]	@ (8001ad8 <HAL_GPIO_Init+0x2b4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018f6:	e02c      	b.n	8001952 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	623b      	str	r3, [r7, #32]
          break;
 80018fe:	e029      	b.n	8001954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	3304      	adds	r3, #4
 8001906:	623b      	str	r3, [r7, #32]
          break;
 8001908:	e024      	b.n	8001954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	3308      	adds	r3, #8
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e01f      	b.n	8001954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	330c      	adds	r3, #12
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e01a      	b.n	8001954 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001926:	2304      	movs	r3, #4
 8001928:	623b      	str	r3, [r7, #32]
          break;
 800192a:	e013      	b.n	8001954 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001934:	2308      	movs	r3, #8
 8001936:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	611a      	str	r2, [r3, #16]
          break;
 800193e:	e009      	b.n	8001954 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001940:	2308      	movs	r3, #8
 8001942:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	615a      	str	r2, [r3, #20]
          break;
 800194a:	e003      	b.n	8001954 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
          break;
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x130>
          break;
 8001952:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2bff      	cmp	r3, #255	@ 0xff
 8001958:	d801      	bhi.n	800195e <HAL_GPIO_Init+0x13a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	e001      	b.n	8001962 <HAL_GPIO_Init+0x13e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3304      	adds	r3, #4
 8001962:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2bff      	cmp	r3, #255	@ 0xff
 8001968:	d802      	bhi.n	8001970 <HAL_GPIO_Init+0x14c>
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0x152>
 8001970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001972:	3b08      	subs	r3, #8
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	210f      	movs	r1, #15
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	401a      	ands	r2, r3
 8001988:	6a39      	ldr	r1, [r7, #32]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	431a      	orrs	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80b1 	beq.w	8001b06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a4:	4b4d      	ldr	r3, [pc, #308]	@ (8001adc <HAL_GPIO_Init+0x2b8>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a4c      	ldr	r2, [pc, #304]	@ (8001adc <HAL_GPIO_Init+0x2b8>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b4a      	ldr	r3, [pc, #296]	@ (8001adc <HAL_GPIO_Init+0x2b8>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019bc:	4a48      	ldr	r2, [pc, #288]	@ (8001ae0 <HAL_GPIO_Init+0x2bc>)
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	089b      	lsrs	r3, r3, #2
 80019c2:	3302      	adds	r3, #2
 80019c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a40      	ldr	r2, [pc, #256]	@ (8001ae4 <HAL_GPIO_Init+0x2c0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d013      	beq.n	8001a10 <HAL_GPIO_Init+0x1ec>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a3f      	ldr	r2, [pc, #252]	@ (8001ae8 <HAL_GPIO_Init+0x2c4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00d      	beq.n	8001a0c <HAL_GPIO_Init+0x1e8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a3e      	ldr	r2, [pc, #248]	@ (8001aec <HAL_GPIO_Init+0x2c8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d007      	beq.n	8001a08 <HAL_GPIO_Init+0x1e4>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3d      	ldr	r2, [pc, #244]	@ (8001af0 <HAL_GPIO_Init+0x2cc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d101      	bne.n	8001a04 <HAL_GPIO_Init+0x1e0>
 8001a00:	2303      	movs	r3, #3
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_Init+0x1ee>
 8001a04:	2304      	movs	r3, #4
 8001a06:	e004      	b.n	8001a12 <HAL_GPIO_Init+0x1ee>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x1ee>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_GPIO_Init+0x1ee>
 8001a10:	2300      	movs	r3, #0
 8001a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a14:	f002 0203 	and.w	r2, r2, #3
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a22:	492f      	ldr	r1, [pc, #188]	@ (8001ae0 <HAL_GPIO_Init+0x2bc>)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	492c      	ldr	r1, [pc, #176]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4928      	ldr	r1, [pc, #160]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a64:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	4922      	ldr	r1, [pc, #136]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a72:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	491e      	ldr	r1, [pc, #120]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4918      	ldr	r1, [pc, #96]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4914      	ldr	r1, [pc, #80]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d021      	beq.n	8001af8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	490e      	ldr	r1, [pc, #56]	@ (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
 8001ac0:	e021      	b.n	8001b06 <HAL_GPIO_Init+0x2e2>
 8001ac2:	bf00      	nop
 8001ac4:	10320000 	.word	0x10320000
 8001ac8:	10310000 	.word	0x10310000
 8001acc:	10220000 	.word	0x10220000
 8001ad0:	10210000 	.word	0x10210000
 8001ad4:	10120000 	.word	0x10120000
 8001ad8:	10110000 	.word	0x10110000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40010800 	.word	0x40010800
 8001ae8:	40010c00 	.word	0x40010c00
 8001aec:	40011000 	.word	0x40011000
 8001af0:	40011400 	.word	0x40011400
 8001af4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_GPIO_Init+0x304>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4909      	ldr	r1, [pc, #36]	@ (8001b28 <HAL_GPIO_Init+0x304>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	3301      	adds	r3, #1
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f47f ae8e 	bne.w	8001838 <HAL_GPIO_Init+0x14>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	372c      	adds	r7, #44	@ 0x2c
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3c:	787b      	ldrb	r3, [r7, #1]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b48:	e003      	b.n	8001b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	041a      	lsls	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e272      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8087 	beq.w	8001c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7c:	4b92      	ldr	r3, [pc, #584]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d00c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b88:	4b8f      	ldr	r3, [pc, #572]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d112      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
 8001b94:	4b8c      	ldr	r3, [pc, #560]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba0:	d10b      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba2:	4b89      	ldr	r3, [pc, #548]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d06c      	beq.n	8001c88 <HAL_RCC_OscConfig+0x12c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d168      	bne.n	8001c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e24c      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x76>
 8001bc4:	4b80      	ldr	r3, [pc, #512]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a7f      	ldr	r2, [pc, #508]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e02e      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x98>
 8001bda:	4b7b      	ldr	r3, [pc, #492]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a7a      	ldr	r2, [pc, #488]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b78      	ldr	r3, [pc, #480]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a77      	ldr	r2, [pc, #476]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e01d      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0xbc>
 8001bfe:	4b72      	ldr	r3, [pc, #456]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a71      	ldr	r2, [pc, #452]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001c18:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b68      	ldr	r3, [pc, #416]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a67      	ldr	r2, [pc, #412]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fa3a 	bl	80010b0 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fa36 	bl	80010b0 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	@ 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e200      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0xe4>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fa26 	bl	80010b0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fa22 	bl	80010b0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	@ 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1ec      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	4b53      	ldr	r3, [pc, #332]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x10c>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d063      	beq.n	8001d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c96:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ca2:	4b49      	ldr	r3, [pc, #292]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d11c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
 8001cae:	4b46      	ldr	r3, [pc, #280]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d116      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	4b43      	ldr	r3, [pc, #268]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e1c0      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4939      	ldr	r1, [pc, #228]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	e03a      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf0:	4b36      	ldr	r3, [pc, #216]	@ (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff f9db 	bl	80010b0 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff f9d7 	bl	80010b0 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e1a1      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d10:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4927      	ldr	r1, [pc, #156]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d32:	4b26      	ldr	r3, [pc, #152]	@ (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff f9ba 	bl	80010b0 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d40:	f7ff f9b6 	bl	80010b0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e180      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d52:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03a      	beq.n	8001de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d019      	beq.n	8001da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d72:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7ff f99a 	bl	80010b0 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d80:	f7ff f996 	bl	80010b0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e160      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d92:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f000 face 	bl	8002340 <RCC_Delay>
 8001da4:	e01c      	b.n	8001de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7ff f980 	bl	80010b0 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db2:	e00f      	b.n	8001dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db4:	f7ff f97c 	bl	80010b0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d908      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e146      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	42420000 	.word	0x42420000
 8001dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	4b92      	ldr	r3, [pc, #584]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e9      	bne.n	8001db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a6 	beq.w	8001f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b8b      	ldr	r3, [pc, #556]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b88      	ldr	r3, [pc, #544]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a87      	ldr	r2, [pc, #540]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]
 8001e0a:	4b85      	ldr	r3, [pc, #532]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b82      	ldr	r3, [pc, #520]	@ (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b7f      	ldr	r3, [pc, #508]	@ (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7ff f93d 	bl	80010b0 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7ff f939 	bl	80010b0 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	@ 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e103      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b75      	ldr	r3, [pc, #468]	@ (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x312>
 8001e60:	4b6f      	ldr	r3, [pc, #444]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a6e      	ldr	r2, [pc, #440]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e02d      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x334>
 8001e76:	4b6a      	ldr	r3, [pc, #424]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a69      	ldr	r2, [pc, #420]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4b67      	ldr	r3, [pc, #412]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a66      	ldr	r2, [pc, #408]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	e01c      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d10c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x356>
 8001e98:	4b61      	ldr	r3, [pc, #388]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4a60      	ldr	r2, [pc, #384]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6213      	str	r3, [r2, #32]
 8001ea4:	4b5e      	ldr	r3, [pc, #376]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a5d      	ldr	r2, [pc, #372]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	e00b      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a5a      	ldr	r2, [pc, #360]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	4b58      	ldr	r3, [pc, #352]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a57      	ldr	r2, [pc, #348]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d015      	beq.n	8001efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f8ed 	bl	80010b0 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7ff f8e9 	bl	80010b0 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e0b1      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ee      	beq.n	8001eda <HAL_RCC_OscConfig+0x37e>
 8001efc:	e014      	b.n	8001f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff f8d7 	bl	80010b0 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff f8d3 	bl	80010b0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e09b      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	4b40      	ldr	r3, [pc, #256]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ee      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d105      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a3b      	ldr	r2, [pc, #236]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8087 	beq.w	8002052 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f44:	4b36      	ldr	r3, [pc, #216]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d061      	beq.n	8002014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d146      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	4b33      	ldr	r3, [pc, #204]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f8a7 	bl	80010b0 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff f8a3 	bl	80010b0 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e06d      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f8c:	d108      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f8e:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4921      	ldr	r1, [pc, #132]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a19      	ldr	r1, [r3, #32]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	491b      	ldr	r1, [pc, #108]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff f877 	bl	80010b0 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff f873 	bl	80010b0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e03d      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x46a>
 8001fe4:	e035      	b.n	8002052 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff f860 	bl	80010b0 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7ff f85c 	bl	80010b0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e026      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x498>
 8002012:	e01e      	b.n	8002052 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d107      	bne.n	800202c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e019      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
 8002020:	40021000 	.word	0x40021000
 8002024:	40007000 	.word	0x40007000
 8002028:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_RCC_OscConfig+0x500>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	429a      	cmp	r2, r3
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0d0      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b6a      	ldr	r3, [pc, #424]	@ (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d910      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b67      	ldr	r3, [pc, #412]	@ (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4965      	ldr	r1, [pc, #404]	@ (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b63      	ldr	r3, [pc, #396]	@ (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b8      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020bc:	4b59      	ldr	r3, [pc, #356]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a58      	ldr	r2, [pc, #352]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d4:	4b53      	ldr	r3, [pc, #332]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a52      	ldr	r2, [pc, #328]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b50      	ldr	r3, [pc, #320]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	494d      	ldr	r1, [pc, #308]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d040      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b47      	ldr	r3, [pc, #284]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b41      	ldr	r3, [pc, #260]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e073      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3d      	ldr	r3, [pc, #244]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b39      	ldr	r3, [pc, #228]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4936      	ldr	r1, [pc, #216]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7fe ffae 	bl	80010b0 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe ffaa 	bl	80010b0 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e053      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2d      	ldr	r3, [pc, #180]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b27      	ldr	r3, [pc, #156]	@ (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d210      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b24      	ldr	r3, [pc, #144]	@ (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4922      	ldr	r1, [pc, #136]	@ (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b20      	ldr	r3, [pc, #128]	@ (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e032      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4916      	ldr	r1, [pc, #88]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021da:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	490e      	ldr	r1, [pc, #56]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ee:	f000 f821 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	490a      	ldr	r1, [pc, #40]	@ (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	5ccb      	ldrb	r3, [r1, r3]
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	4a09      	ldr	r2, [pc, #36]	@ (800222c <HAL_RCC_ClockConfig+0x1cc>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <HAL_RCC_ClockConfig+0x1d0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe ff0c 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	08003638 	.word	0x08003638
 800222c:	20000000 	.word	0x20000000
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800224e:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b04      	cmp	r3, #4
 800225c:	d002      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x30>
 800225e:	2b08      	cmp	r3, #8
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x36>
 8002262:	e027      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002264:	4b19      	ldr	r3, [pc, #100]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002266:	613b      	str	r3, [r7, #16]
      break;
 8002268:	e027      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	0c9b      	lsrs	r3, r3, #18
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	4a17      	ldr	r2, [pc, #92]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002274:	5cd3      	ldrb	r3, [r2, r3]
 8002276:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002282:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0c5b      	lsrs	r3, r3, #17
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	4a11      	ldr	r2, [pc, #68]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002296:	fb03 f202 	mul.w	r2, r3, r2
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	e004      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0c      	ldr	r2, [pc, #48]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	613b      	str	r3, [r7, #16]
      break;
 80022b2:	e002      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x98>)
 80022b6:	613b      	str	r3, [r7, #16]
      break;
 80022b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ba:	693b      	ldr	r3, [r7, #16]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	007a1200 	.word	0x007a1200
 80022d0:	08003650 	.word	0x08003650
 80022d4:	08003660 	.word	0x08003660
 80022d8:	003d0900 	.word	0x003d0900

080022dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e0:	4b02      	ldr	r3, [pc, #8]	@ (80022ec <HAL_RCC_GetHCLKFreq+0x10>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	20000000 	.word	0x20000000

080022f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f4:	f7ff fff2 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4903      	ldr	r1, [pc, #12]	@ (8002314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002306:	5ccb      	ldrb	r3, [r1, r3]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	08003648 	.word	0x08003648

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800231c:	f7ff ffde 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	0adb      	lsrs	r3, r3, #11
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	@ (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	08003648 	.word	0x08003648

08002340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002348:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <RCC_Delay+0x34>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <RCC_Delay+0x38>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0a5b      	lsrs	r3, r3, #9
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800235c:	bf00      	nop
  }
  while (Delay --);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	60fa      	str	r2, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f9      	bne.n	800235c <RCC_Delay+0x1c>
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	20000000 	.word	0x20000000
 8002378:	10624dd3 	.word	0x10624dd3

0800237c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e042      	b.n	8002414 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fb12 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	@ 0x24
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 ff65 	bl	8003290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	@ 0x30
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b20      	cmp	r3, #32
 8002434:	d156      	bne.n	80024e4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_UART_Transmit_DMA+0x26>
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e04f      	b.n	80024e6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	88fa      	ldrh	r2, [r7, #6]
 8002450:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	88fa      	ldrh	r2, [r7, #6]
 8002456:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2221      	movs	r2, #33	@ 0x21
 8002462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246a:	4a21      	ldr	r2, [pc, #132]	@ (80024f0 <HAL_UART_Transmit_DMA+0xd4>)
 800246c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002472:	4a20      	ldr	r2, [pc, #128]	@ (80024f4 <HAL_UART_Transmit_DMA+0xd8>)
 8002474:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247a:	4a1f      	ldr	r2, [pc, #124]	@ (80024f8 <HAL_UART_Transmit_DMA+0xdc>)
 800247c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002482:	2200      	movs	r2, #0
 8002484:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002486:	f107 0308 	add.w	r3, r7, #8
 800248a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002492:	6819      	ldr	r1, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3304      	adds	r3, #4
 800249a:	461a      	mov	r2, r3
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	f7fe ff79 	bl	8001394 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3314      	adds	r3, #20
 80024b2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	e853 3f00 	ldrex	r3, [r3]
 80024ba:	617b      	str	r3, [r7, #20]
   return(result);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3314      	adds	r3, #20
 80024ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80024ce:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d0:	6a39      	ldr	r1, [r7, #32]
 80024d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d4:	e841 2300 	strex	r3, r2, [r1]
 80024d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e5      	bne.n	80024ac <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e000      	b.n	80024e6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
  }
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3730      	adds	r7, #48	@ 0x30
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	08002b25 	.word	0x08002b25
 80024f4:	08002bbf 	.word	0x08002bbf
 80024f8:	08002d43 	.word	0x08002d43

080024fc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	@ 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	d14a      	bne.n	80025ac <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e043      	b.n	80025ae <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	461a      	mov	r2, r3
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fc4d 	bl	8002dd8 <UART_Start_Receive_DMA>
 800253e:	4603      	mov	r3, r0
 8002540:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002544:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002548:	2b00      	cmp	r3, #0
 800254a:	d12c      	bne.n	80025a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	2b01      	cmp	r3, #1
 8002552:	d125      	bne.n	80025a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	330c      	adds	r3, #12
 8002570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	e853 3f00 	ldrex	r3, [r3]
 8002578:	617b      	str	r3, [r7, #20]
   return(result);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f043 0310 	orr.w	r3, r3, #16
 8002580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	330c      	adds	r3, #12
 8002588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800258a:	627a      	str	r2, [r7, #36]	@ 0x24
 800258c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258e:	6a39      	ldr	r1, [r7, #32]
 8002590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002592:	e841 2300 	strex	r3, r2, [r1]
 8002596:	61fb      	str	r3, [r7, #28]
   return(result);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1e5      	bne.n	800256a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800259e:	e002      	b.n	80025a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80025a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025aa:	e000      	b.n	80025ae <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3730      	adds	r7, #48	@ 0x30
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0ba      	sub	sp, #232	@ 0xe8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80025f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <HAL_UART_IRQHandler+0x66>
 800260a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fd7c 	bl	8003114 <UART_Receive_IT>
      return;
 800261c:	e25b      	b.n	8002ad6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800261e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80de 	beq.w	80027e4 <HAL_UART_IRQHandler+0x22c>
 8002628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002638:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80d1 	beq.w	80027e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_UART_IRQHandler+0xae>
 800264e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	f043 0201 	orr.w	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_UART_IRQHandler+0xd2>
 8002672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	f043 0202 	orr.w	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800268a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_UART_IRQHandler+0xf6>
 8002696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	f043 0204 	orr.w	r2, r3, #4
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d011      	beq.n	80026de <HAL_UART_IRQHandler+0x126>
 80026ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d105      	bne.n	80026d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f043 0208 	orr.w	r2, r3, #8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 81f2 	beq.w	8002acc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_UART_IRQHandler+0x14e>
 80026f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fd07 	bl	8003114 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <HAL_UART_IRQHandler+0x17a>
 800272a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d04f      	beq.n	80027d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fc11 	bl	8002f5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d041      	beq.n	80027ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3314      	adds	r3, #20
 800274c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002750:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002754:	e853 3f00 	ldrex	r3, [r3]
 8002758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800275c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3314      	adds	r3, #20
 800276e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002772:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002776:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800277e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002782:	e841 2300 	strex	r3, r2, [r1]
 8002786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800278a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1d9      	bne.n	8002746 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d013      	beq.n	80027c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800279e:	4a7e      	ldr	r2, [pc, #504]	@ (8002998 <HAL_UART_IRQHandler+0x3e0>)
 80027a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fe90 	bl	80014cc <HAL_DMA_Abort_IT>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d016      	beq.n	80027e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027bc:	4610      	mov	r0, r2
 80027be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c0:	e00e      	b.n	80027e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f9a5 	bl	8002b12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	e00a      	b.n	80027e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f9a1 	bl	8002b12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d0:	e006      	b.n	80027e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f99d 	bl	8002b12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80027de:	e175      	b.n	8002acc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e0:	bf00      	nop
    return;
 80027e2:	e173      	b.n	8002acc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	f040 814f 	bne.w	8002a8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8148 	beq.w	8002a8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8141 	beq.w	8002a8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80b6 	beq.w	800299c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800283c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8145 	beq.w	8002ad0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800284a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800284e:	429a      	cmp	r2, r3
 8002850:	f080 813e 	bcs.w	8002ad0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800285a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b20      	cmp	r3, #32
 8002864:	f000 8088 	beq.w	8002978 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002872:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002876:	e853 3f00 	ldrex	r3, [r3]
 800287a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800287e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002882:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002886:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002894:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002898:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80028a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80028a4:	e841 2300 	strex	r3, r2, [r1]
 80028a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80028ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1d9      	bne.n	8002868 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3314      	adds	r3, #20
 80028ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028be:	e853 3f00 	ldrex	r3, [r3]
 80028c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80028c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3314      	adds	r3, #20
 80028d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80028dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80028e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80028e4:	e841 2300 	strex	r3, r2, [r1]
 80028e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80028ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e1      	bne.n	80028b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3314      	adds	r3, #20
 80028f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028fa:	e853 3f00 	ldrex	r3, [r3]
 80028fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002914:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002916:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002918:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800291a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800291c:	e841 2300 	strex	r3, r2, [r1]
 8002920:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e3      	bne.n	80028f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002948:	f023 0310 	bic.w	r3, r3, #16
 800294c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800295a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800295c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002960:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e3      	bne.n	8002936 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fd6e 	bl	8001454 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002986:	b29b      	uxth	r3, r3
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	b29b      	uxth	r3, r3
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fd fde4 	bl	800055c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002994:	e09c      	b.n	8002ad0 <HAL_UART_IRQHandler+0x518>
 8002996:	bf00      	nop
 8002998:	0800301f 	.word	0x0800301f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 808e 	beq.w	8002ad4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80029b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8089 	beq.w	8002ad4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029cc:	e853 3f00 	ldrex	r3, [r3]
 80029d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80029d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80029e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80029e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1e3      	bne.n	80029c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3314      	adds	r3, #20
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	e853 3f00 	ldrex	r3, [r3]
 8002a08:	623b      	str	r3, [r7, #32]
   return(result);
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3314      	adds	r3, #20
 8002a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002a1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a26:	e841 2300 	strex	r3, r2, [r1]
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1e3      	bne.n	80029fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	e853 3f00 	ldrex	r3, [r3]
 8002a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0310 	bic.w	r3, r3, #16
 8002a56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	330c      	adds	r3, #12
 8002a60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002a64:	61fa      	str	r2, [r7, #28]
 8002a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a68:	69b9      	ldr	r1, [r7, #24]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	e841 2300 	strex	r3, r2, [r1]
 8002a70:	617b      	str	r3, [r7, #20]
   return(result);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e3      	bne.n	8002a40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7fd fd69 	bl	800055c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a8a:	e023      	b.n	8002ad4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d009      	beq.n	8002aac <HAL_UART_IRQHandler+0x4f4>
 8002a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 face 	bl	8003046 <UART_Transmit_IT>
    return;
 8002aaa:	e014      	b.n	8002ad6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00e      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x51e>
 8002ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fb0d 	bl	80030e4 <UART_EndTransmit_IT>
    return;
 8002aca:	e004      	b.n	8002ad6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002acc:	bf00      	nop
 8002ace:	e002      	b.n	8002ad6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ad0:	bf00      	nop
 8002ad2:	e000      	b.n	8002ad6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ad4:	bf00      	nop
  }
}
 8002ad6:	37e8      	adds	r7, #232	@ 0xe8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b090      	sub	sp, #64	@ 0x40
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d137      	bne.n	8002bb0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b42:	2200      	movs	r2, #0
 8002b44:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3314      	adds	r3, #20
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	623b      	str	r3, [r7, #32]
   return(result);
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3314      	adds	r3, #20
 8002b64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b66:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b6e:	e841 2300 	strex	r3, r2, [r1]
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1e5      	bne.n	8002b46 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	e853 3f00 	ldrex	r3, [r3]
 8002b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b9a:	61fa      	str	r2, [r7, #28]
 8002b9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9e:	69b9      	ldr	r1, [r7, #24]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	e841 2300 	strex	r3, r2, [r1]
 8002ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e5      	bne.n	8002b7a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002bae:	e002      	b.n	8002bb6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002bb0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002bb2:	f7fd fd07 	bl	80005c4 <HAL_UART_TxCpltCallback>
}
 8002bb6:	bf00      	nop
 8002bb8:	3740      	adds	r7, #64	@ 0x40
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f7ff ff85 	bl	8002adc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b09c      	sub	sp, #112	@ 0x70
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d172      	bne.n	8002cdc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c06:	e853 3f00 	ldrex	r3, [r3]
 8002c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002c1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c1e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e5      	bne.n	8002bfc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3314      	adds	r3, #20
 8002c36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3a:	e853 3f00 	ldrex	r3, [r3]
 8002c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3314      	adds	r3, #20
 8002c4e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002c50:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c52:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c58:	e841 2300 	strex	r3, r2, [r1]
 8002c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e5      	bne.n	8002c30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	e853 3f00 	ldrex	r3, [r3]
 8002c72:	623b      	str	r3, [r7, #32]
   return(result);
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3314      	adds	r3, #20
 8002c82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c84:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c8c:	e841 2300 	strex	r3, r2, [r1]
 8002c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e5      	bne.n	8002c64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d119      	bne.n	8002cdc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	330c      	adds	r3, #12
 8002cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	e853 3f00 	ldrex	r3, [r3]
 8002cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0310 	bic.w	r3, r3, #16
 8002cbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002cc8:	61fa      	str	r2, [r7, #28]
 8002cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ccc:	69b9      	ldr	r1, [r7, #24]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	e841 2300 	strex	r3, r2, [r1]
 8002cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e5      	bne.n	8002ca8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cde:	2200      	movs	r2, #0
 8002ce0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d106      	bne.n	8002cf8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002cf2:	f7fd fc33 	bl	800055c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002cf6:	e002      	b.n	8002cfe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002cf8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002cfa:	f7ff fef8 	bl	8002aee <HAL_UART_RxCpltCallback>
}
 8002cfe:	bf00      	nop
 8002d00:	3770      	adds	r7, #112	@ 0x70
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d108      	bne.n	8002d34 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7fd fc15 	bl	800055c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d32:	e002      	b.n	8002d3a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff fee3 	bl	8002b00 <HAL_UART_RxHalfCpltCallback>
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b21      	cmp	r3, #33	@ 0x21
 8002d74:	d108      	bne.n	8002d88 <UART_DMAError+0x46>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002d82:	68b8      	ldr	r0, [r7, #8]
 8002d84:	f000 f8c2 	bl	8002f0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf14      	ite	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2300      	moveq	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b22      	cmp	r3, #34	@ 0x22
 8002da8:	d108      	bne.n	8002dbc <UART_DMAError+0x7a>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2200      	movs	r2, #0
 8002db4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002db6:	68b8      	ldr	r0, [r7, #8]
 8002db8:	f000 f8cf 	bl	8002f5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc0:	f043 0210 	orr.w	r2, r3, #16
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dc8:	68b8      	ldr	r0, [r7, #8]
 8002dca:	f7ff fea2 	bl	8002b12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b098      	sub	sp, #96	@ 0x60
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	4613      	mov	r3, r2
 8002de4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	88fa      	ldrh	r2, [r7, #6]
 8002df0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2222      	movs	r2, #34	@ 0x22
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e04:	4a3e      	ldr	r2, [pc, #248]	@ (8002f00 <UART_Start_Receive_DMA+0x128>)
 8002e06:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0c:	4a3d      	ldr	r2, [pc, #244]	@ (8002f04 <UART_Start_Receive_DMA+0x12c>)
 8002e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e14:	4a3c      	ldr	r2, [pc, #240]	@ (8002f08 <UART_Start_Receive_DMA+0x130>)
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002e20:	f107 0308 	add.w	r3, r7, #8
 8002e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	f7fe faac 	bl	8001394 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d019      	beq.n	8002e8e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	330c      	adds	r3, #12
 8002e78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e7a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002e80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e82:	e841 2300 	strex	r3, r2, [r1]
 8002e86:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002e88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1e5      	bne.n	8002e5a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3314      	adds	r3, #20
 8002e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e98:	e853 3f00 	ldrex	r3, [r3]
 8002e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3314      	adds	r3, #20
 8002eac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002eae:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002eb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002eb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002eb6:	e841 2300 	strex	r3, r2, [r1]
 8002eba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1e5      	bne.n	8002e8e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3314      	adds	r3, #20
 8002ec8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ed8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002ee2:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	6a39      	ldr	r1, [r7, #32]
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eea:	e841 2300 	strex	r3, r2, [r1]
 8002eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e5      	bne.n	8002ec2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3760      	adds	r7, #96	@ 0x60
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	08002bdb 	.word	0x08002bdb
 8002f04:	08002d07 	.word	0x08002d07
 8002f08:	08002d43 	.word	0x08002d43

08002f0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	@ 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	e853 3f00 	ldrex	r3, [r3]
 8002f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	330c      	adds	r3, #12
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	61ba      	str	r2, [r7, #24]
 8002f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6979      	ldr	r1, [r7, #20]
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	613b      	str	r3, [r7, #16]
   return(result);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e5      	bne.n	8002f14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002f50:	bf00      	nop
 8002f52:	3724      	adds	r7, #36	@ 0x24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b095      	sub	sp, #84	@ 0x54
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	330c      	adds	r3, #12
 8002f68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f82:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e5      	bne.n	8002f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3314      	adds	r3, #20
 8002f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	e853 3f00 	ldrex	r3, [r3]
 8002fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3314      	adds	r3, #20
 8002fb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e5      	bne.n	8002f96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d119      	bne.n	8003006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f023 0310 	bic.w	r3, r3, #16
 8002fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ff2:	61ba      	str	r2, [r7, #24]
 8002ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	6979      	ldr	r1, [r7, #20]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	e841 2300 	strex	r3, r2, [r1]
 8002ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e5      	bne.n	8002fd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003014:	bf00      	nop
 8003016:	3754      	adds	r7, #84	@ 0x54
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7ff fd6a 	bl	8002b12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b21      	cmp	r3, #33	@ 0x21
 8003058:	d13e      	bne.n	80030d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003062:	d114      	bne.n	800308e <UART_Transmit_IT+0x48>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d110      	bne.n	800308e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003080:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	621a      	str	r2, [r3, #32]
 800308c:	e008      	b.n	80030a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	1c59      	adds	r1, r3, #1
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6211      	str	r1, [r2, #32]
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4619      	mov	r1, r3
 80030ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10f      	bne.n	80030d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e000      	b.n	80030da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
  }
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7fd fa5d 	bl	80005c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	@ 0x30
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b22      	cmp	r3, #34	@ 0x22
 8003126:	f040 80ae 	bne.w	8003286 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003132:	d117      	bne.n	8003164 <UART_Receive_IT+0x50>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d113      	bne.n	8003164 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003144:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	b29b      	uxth	r3, r3
 800314e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003152:	b29a      	uxth	r2, r3
 8003154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003156:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315c:	1c9a      	adds	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	629a      	str	r2, [r3, #40]	@ 0x28
 8003162:	e026      	b.n	80031b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800316a:	2300      	movs	r3, #0
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003176:	d007      	beq.n	8003188 <UART_Receive_IT+0x74>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <UART_Receive_IT+0x82>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d106      	bne.n	8003196 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	e008      	b.n	80031a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4619      	mov	r1, r3
 80031c0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d15d      	bne.n	8003282 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0220 	bic.w	r2, r2, #32
 80031d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	2b01      	cmp	r3, #1
 800320a:	d135      	bne.n	8003278 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	613b      	str	r3, [r7, #16]
   return(result);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f023 0310 	bic.w	r3, r3, #16
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003232:	623a      	str	r2, [r7, #32]
 8003234:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	69f9      	ldr	r1, [r7, #28]
 8003238:	6a3a      	ldr	r2, [r7, #32]
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e5      	bne.n	8003212 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b10      	cmp	r3, #16
 8003252:	d10a      	bne.n	800326a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fd f973 	bl	800055c <HAL_UARTEx_RxEventCallback>
 8003276:	e002      	b.n	800327e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fc38 	bl	8002aee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e002      	b.n	8003288 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003286:	2302      	movs	r3, #2
  }
}
 8003288:	4618      	mov	r0, r3
 800328a:	3730      	adds	r7, #48	@ 0x30
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80032ca:	f023 030c 	bic.w	r3, r3, #12
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2c      	ldr	r2, [pc, #176]	@ (80033a4 <UART_SetConfig+0x114>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d103      	bne.n	8003300 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032f8:	f7ff f80e 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	e002      	b.n	8003306 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003300:	f7fe fff6 	bl	80022f0 <HAL_RCC_GetPCLK1Freq>
 8003304:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	4a22      	ldr	r2, [pc, #136]	@ (80033a8 <UART_SetConfig+0x118>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	0119      	lsls	r1, r3, #4
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009a      	lsls	r2, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fbb2 f2f3 	udiv	r2, r2, r3
 800333c:	4b1a      	ldr	r3, [pc, #104]	@ (80033a8 <UART_SetConfig+0x118>)
 800333e:	fba3 0302 	umull	r0, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2064      	movs	r0, #100	@ 0x64
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	3332      	adds	r3, #50	@ 0x32
 8003350:	4a15      	ldr	r2, [pc, #84]	@ (80033a8 <UART_SetConfig+0x118>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800335c:	4419      	add	r1, r3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009a      	lsls	r2, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	fbb2 f2f3 	udiv	r2, r2, r3
 8003374:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <UART_SetConfig+0x118>)
 8003376:	fba3 0302 	umull	r0, r3, r3, r2
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2064      	movs	r0, #100	@ 0x64
 800337e:	fb00 f303 	mul.w	r3, r0, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	3332      	adds	r3, #50	@ 0x32
 8003388:	4a07      	ldr	r2, [pc, #28]	@ (80033a8 <UART_SetConfig+0x118>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	f003 020f 	and.w	r2, r3, #15
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	440a      	add	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40013800 	.word	0x40013800
 80033a8:	51eb851f 	.word	0x51eb851f

080033ac <memset>:
 80033ac:	4603      	mov	r3, r0
 80033ae:	4402      	add	r2, r0
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d100      	bne.n	80033b6 <memset+0xa>
 80033b4:	4770      	bx	lr
 80033b6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ba:	e7f9      	b.n	80033b0 <memset+0x4>

080033bc <__libc_init_array>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	2600      	movs	r6, #0
 80033c0:	4d0c      	ldr	r5, [pc, #48]	@ (80033f4 <__libc_init_array+0x38>)
 80033c2:	4c0d      	ldr	r4, [pc, #52]	@ (80033f8 <__libc_init_array+0x3c>)
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	42a6      	cmp	r6, r4
 80033ca:	d109      	bne.n	80033e0 <__libc_init_array+0x24>
 80033cc:	f000 f828 	bl	8003420 <_init>
 80033d0:	2600      	movs	r6, #0
 80033d2:	4d0a      	ldr	r5, [pc, #40]	@ (80033fc <__libc_init_array+0x40>)
 80033d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003400 <__libc_init_array+0x44>)
 80033d6:	1b64      	subs	r4, r4, r5
 80033d8:	10a4      	asrs	r4, r4, #2
 80033da:	42a6      	cmp	r6, r4
 80033dc:	d105      	bne.n	80033ea <__libc_init_array+0x2e>
 80033de:	bd70      	pop	{r4, r5, r6, pc}
 80033e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e4:	4798      	blx	r3
 80033e6:	3601      	adds	r6, #1
 80033e8:	e7ee      	b.n	80033c8 <__libc_init_array+0xc>
 80033ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ee:	4798      	blx	r3
 80033f0:	3601      	adds	r6, #1
 80033f2:	e7f2      	b.n	80033da <__libc_init_array+0x1e>
 80033f4:	08003664 	.word	0x08003664
 80033f8:	08003664 	.word	0x08003664
 80033fc:	08003664 	.word	0x08003664
 8003400:	08003668 	.word	0x08003668

08003404 <memcpy>:
 8003404:	440a      	add	r2, r1
 8003406:	4291      	cmp	r1, r2
 8003408:	f100 33ff 	add.w	r3, r0, #4294967295
 800340c:	d100      	bne.n	8003410 <memcpy+0xc>
 800340e:	4770      	bx	lr
 8003410:	b510      	push	{r4, lr}
 8003412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003416:	4291      	cmp	r1, r2
 8003418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800341c:	d1f9      	bne.n	8003412 <memcpy+0xe>
 800341e:	bd10      	pop	{r4, pc}

08003420 <_init>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	bf00      	nop
 8003424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003426:	bc08      	pop	{r3}
 8003428:	469e      	mov	lr, r3
 800342a:	4770      	bx	lr

0800342c <_fini>:
 800342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342e:	bf00      	nop
 8003430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003432:	bc08      	pop	{r3}
 8003434:	469e      	mov	lr, r3
 8003436:	4770      	bx	lr
